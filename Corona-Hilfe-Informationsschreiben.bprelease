<?xml version="1.0" encoding="utf-8"?>
<bpr:release xmlns:bpr="http://www.blueprism.co.uk/product/release">
    <bpr:name>Corona-Hilfe-Informationsschreiben</bpr:name>
    <bpr:release-notes>v1.0
It works!</bpr:release-notes>
    <bpr:created>2021-06-20 20:59:21Z</bpr:created>
    <bpr:package-id>-1</bpr:package-id>
    <bpr:package-name>&lt;Adhoc Package&gt;</bpr:package-name>
    <bpr:user-created-by>admin</bpr:user-created-by>
    <bpr:contents count="15">
        <process id="9034042e-7131-4a79-946d-d9e79127d946" name="Anschreiben + 7Zip" xmlns="http://www.blueprism.co.uk/product/process"><process name="Anschreiben + 7Zip" version="1.0" bpversion="6.10.1.35171" narrative="Create personalized letters and 7zip them to send within an e-mail." byrefcollection="true"><view><camerax>-16</camerax><cameray>33</cameray><zoom version="2">2.1875</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2" type="Normal" published="False"><name>Create letters</name><view><camerax>50</camerax><cameray>177</cameray><zoom version="2">1.5625</zoom></view></subsheet><subsheet subsheetid="c1dc1014-f7a1-483d-974b-40de167bca79" type="Normal" published="False"><name>Change address</name><view><camerax>65</camerax><cameray>282</cameray><zoom version="2">2.8125</zoom></view></subsheet><subsheet subsheetid="8d4c219c-2de7-4630-9cec-20177b31c9d6" type="Normal" published="False"><name>7Zip</name><view><camerax>27</camerax><cameray>375</cameray><zoom version="2">2.1875</zoom></view></subsheet><subsheet subsheetid="cbc1be7f-17f5-4045-a9a5-71fbc622c5d1" type="Normal" published="False"><name>Query output</name><view><camerax>0</camerax><cameray>114</cameray><zoom version="2">1.875</zoom></view></subsheet><subsheet subsheetid="af02dc83-ab2c-423d-9709-a61aeacc6f12" type="Normal" published="False"><name>Cleanup</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="3d83eba5-5d45-4e9d-bf4c-d9c97736e41d" name="Start" type="Start"><display x="15" y="-135" /><onsuccess>78d03c9c-1c1a-4612-8dd6-ce5710297493</onsuccess></stage><stage stageid="e5c64f23-0ee9-4bad-83a2-1aab28dbfe19" name="End" type="End"><display x="15" y="225" /></stage><stage stageid="c23c7ee7-1417-47d2-8c19-c494997b7e69" name="Stage1" type="ProcessInfo"><display x="-240" y="-90" w="240" h="120" /><font family="Segoe UI" size="10" style="Bold" color="FF0000" /></stage><stage stageid="953945f3-aa9d-4e4c-8c60-6f3e5c3d3fd2" name="Change address" type="SubSheetInfo"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><narrative>Subprocess to change the address lines according to the customers in the queue</narrative><display x="-195" y="-75" w="240" h="90" /></stage><stage stageid="6615032c-ffff-4552-b4df-91c92161546d" name="Start" type="Start"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><display x="15" y="-75" /><inputs><input type="collection" name="Data" narrative="Data of Company" stage="Data" /></inputs><onsuccess>ad416e15-f5d2-429f-b490-929202e80b31</onsuccess></stage><stage stageid="9f13d172-3010-4426-9e91-a1c98c8f3d37" name="End" type="End"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><display x="15" y="555" /></stage><stage stageid="d1f68807-d28b-4948-8662-2f51f41f5eaf" name="2. Replace Firm" type="Action"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="15" y="135" /><inputs><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="text" friendlyname="text" expr="[new_firm]" /><input type="text" name="documentname" friendlyname="documentname" expr="[doc]" /></inputs><onsuccess>9456e639-59d9-4a50-a25d-dbe36c2ceff6</onsuccess><resource object="MS Word VBO" action="Type Text" /></stage><stage stageid="e164f211-f796-4b0f-90ec-92f5872f2574" name="Note1" type="Note"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><narrative>1. Find the address line for the firm name</narrative><display x="180" y="75" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="efa38854-ec0c-4fee-b02f-aee3868592e3" name="Note1" type="Note"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><narrative>2. Replace the dummy firm name with the actual name</narrative><display x="180" y="135" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="0000FF" /></stage><stage stageid="229907cd-48bf-4bc5-a9d6-3e797c7702d0" name="Note1" type="Note"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><narrative>3. Find the address line for the street name and number of the house</narrative><display x="180" y="195" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="7142e73c-796a-4a5d-a716-382293aa2620" name="Note2" type="Note"><narrative>This sample Process Solution has been provided so that you can check your Consolidation Exercise work.

Please note; this Process Solution is uniquely identifiable and cannot be submitted for assessment for internal training programs or training provided by one of our authorised training partners.</narrative><display x="-240" y="-105" /><font family="Segoe UI" size="10" style="Regular" color="FFFFFF" /></stage><stage stageid="fad3786b-b005-472d-890a-ee103b0f453e" name="Note1" type="Note"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><narrative>4. Replace the dummy street name and number with actual street name and number</narrative><display x="180" y="255" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="27bc8ade-fc50-4905-95fc-c7ce50c7c393" name="1. Find Firm" type="Action"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="15" y="75" /><inputs><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="document name" friendlyname="document name" expr="[doc]" /><input type="text" name="text" friendlyname="text" expr="[find_firm]" /><input type="flag" name="match case" friendlyname="match case" expr="[match_case]" /><input type="flag" name="match whole word" friendlyname="match whole word" expr="[match_whole_word]" /></inputs><outputs><output type="flag" name="found" friendlyname="found" stage="found" /></outputs><onsuccess>d1f68807-d28b-4948-8662-2f51f41f5eaf</onsuccess><resource object="MS Word VBO" action="Find Text" /></stage><stage stageid="d812f877-9e80-483f-b3ff-12698769ee1e" name="found" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><display x="-165" y="345" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7bb62eed-526b-40b9-98fc-2f7091679e4e" name="find_firm" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-270" y="15" /><datatype>text</datatype><initialvalue xml:space="preserve">Firma</initialvalue><private /><alwaysinit /></stage><stage stageid="1f7113a7-b372-4317-90e2-dc7c1c6f1a44" name="new_firm" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-120" y="15" /><datatype>text</datatype><initialvalue xml:space="preserve">new_firma Mueller</initialvalue><private /><alwaysinit /></stage><stage stageid="fb6fb1bb-9946-4fe6-94c8-33fabc2bc9da" name="match_case" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-285" y="300" w="90" h="30" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="e061c156-1b3b-43ff-94f2-f2b27b482ce9" name="match_whole_word" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-165" y="300" w="150" h="30" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="401eb171-d1a4-4983-abc5-80f51ef3890a" name="Note1" type="Note"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><narrative>5. Find the address line for the zip code and city name</narrative><display x="180" y="300" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="4bb3beee-e4ee-48fd-9eff-b7ff13d9116d" name="Live Process" type="Data"><narrative>We will use this to disable stages implemented for debug and test purposes only.</narrative><display x="-165" y="0" w="90" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue></stage><stage stageid="182c6400-6e0e-4911-bf84-d5309353fbe1" name="Parameters" type="Block"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-345" y="255" w="285" h="150" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="c1d34e1e-93ce-4e78-9a94-b6aefc7b8aa4" name="search pattern" type="Block"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-345" y="-15" w="135" h="210" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="16729503-ce39-4326-8c87-0d4e6969aa84" name="selected" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><display x="-285" y="345" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="796d4885-5875-437f-a36d-2a6e8ca26b01" name="new_street" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-120" y="60" /><datatype>text</datatype><initialvalue xml:space="preserve">new_straße 123</initialvalue><private /><alwaysinit /></stage><stage stageid="9456e639-59d9-4a50-a25d-dbe36c2ceff6" name="3. Find Street" type="Action"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="15" y="195" /><inputs><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="document name" friendlyname="document name" expr="[doc]" /><input type="text" name="text" friendlyname="text" expr="[find_street]" /><input type="flag" name="match case" friendlyname="match case" expr="[match_case]" /><input type="flag" name="match whole word" friendlyname="match whole word" expr="[match_whole_word]" /></inputs><outputs><output type="flag" name="found" friendlyname="found" stage="found" /></outputs><onsuccess>e8857406-e352-4f41-b386-f5a8ae5526d4</onsuccess><resource object="MS Word VBO" action="Find Text" /></stage><stage stageid="e8857406-e352-4f41-b386-f5a8ae5526d4" name="4. Replace Street" type="Action"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="15" y="255" /><inputs><input type="text" name="documentname" friendlyname="documentname" expr="[doc]" /><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="text" friendlyname="text" expr="[new_street]" /></inputs><onsuccess>f308db82-f153-4e91-b0e2-83a8c5c6f79d</onsuccess><resource object="MS Word VBO" action="Type Text" /></stage><stage stageid="423bad1d-b306-4266-ad9e-820bbf305720" name="6. Replace ZIP Code and City" type="Action"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="15" y="360" /><inputs><input type="text" name="documentname" friendlyname="documentname" expr="[doc]" /><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="text" friendlyname="text" expr="[new_zip]" /></inputs><onsuccess>f68bdb6a-439b-4c62-ba54-129b70241149</onsuccess><resource object="MS Word VBO" action="Type Text" /></stage><stage stageid="f308db82-f153-4e91-b0e2-83a8c5c6f79d" name="5. Find ZIP Code and City" type="Action"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="15" y="300" /><inputs><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="document name" friendlyname="document name" expr="[doc]" /><input type="text" name="text" friendlyname="text" expr="[find_zip]" /><input type="flag" name="match case" friendlyname="match case" expr="[match_case]" /><input type="flag" name="match whole word" friendlyname="match whole word" expr="[match_whole_word]" /></inputs><outputs><output type="flag" name="found" friendlyname="found" stage="found" /></outputs><onsuccess>423bad1d-b306-4266-ad9e-820bbf305720</onsuccess><resource object="MS Word VBO" action="Find Text" /></stage><stage stageid="07ad9884-94c9-4691-a01d-8202a684fd26" name="find_street" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-270" y="60" /><datatype>text</datatype><initialvalue xml:space="preserve">Straße Hausnummer</initialvalue><private /><alwaysinit /></stage><stage stageid="49b7489b-35f4-4a90-b87d-1b3f3dea1206" name="new_zip" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-120" y="105" /><datatype>text</datatype><initialvalue xml:space="preserve">NEW_PLZ City</initialvalue><private /><alwaysinit /></stage><stage stageid="c87f1956-b922-4108-9fde-7cc604044f75" name="find_zip" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-270" y="105" /><datatype>text</datatype><initialvalue xml:space="preserve">PLZ Ort</initialvalue><private /><alwaysinit /></stage><stage stageid="800f1de5-4572-456b-bee9-1c406194ef0a" name="Create letters" type="SubSheetInfo"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>Process flow to create personalized letters</narrative><display x="-195" y="-90" w="240" h="90" /></stage><stage stageid="72682536-7f84-4027-ac75-09d1505abbde" name="Start" type="Start"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="15" y="-75" /><inputs><input type="text" name="pdf_output_path" narrative="Path to store PDF files" stage="pdf_output" /></inputs><onsuccess>b273a336-40d5-42eb-9e7c-560c76b7331a</onsuccess></stage><stage stageid="d78850c4-b8da-4f97-95c1-188e06dedc7d" name="End" type="End"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="15" y="705" /></stage><stage stageid="b72c96fc-df0a-4ba3-8df6-72acbd359a5d" name="2. Create Instance" type="Action"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="15" y="90" w="90" h="30" /><outputs><output type="number" name="handle" friendlyname="handle" stage="handle" /></outputs><onsuccess>6f46d360-23ea-4bf7-88d7-5cbc889ffe2a</onsuccess><resource object="MS Word VBO" action="Create Instance" /></stage><stage stageid="16aad894-a52b-4409-97af-6ac0b21761a5" name="handle" type="Data"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="-150" y="210" w="120" h="30" /><datatype>number</datatype><initialvalue>0</initialvalue><alwaysinit /></stage><stage stageid="75658e2b-e108-4049-83f8-6ecac12e3237" name="4. Open Word File" type="Action"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="15" y="315" w="90" h="30" /><inputs><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="File Name" friendlyname="File Name" expr="[Sample File Path]" /></inputs><outputs><output type="text" name="Document Name" friendlyname="Document Name" stage="doc" /></outputs><onsuccess>e3bce291-69c6-4531-87c3-1e7ca5aa4617</onsuccess><resource object="MS Word VBO" action="Open" /></stage><stage stageid="e625cb95-a835-42ac-8d25-45fb1e485d6e" name="Sample File Path" type="Data"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="-285" y="0" w="120" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\BluePrism\anschreiben_corona.rtf</initialvalue><private /><alwaysinit /></stage><stage stageid="b273a336-40d5-42eb-9e7c-560c76b7331a" name="1. Check File Exists" type="Action"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="15" y="-30" w="90" h="30" /><inputs><input type="text" name="File Name" narrative="The name of the file to check" expr="[Sample File Path]" /></inputs><outputs><output type="flag" name="Exists" narrative="True if the file exists" stage="Exists" /></outputs><onsuccess>83b9905f-86c1-43bd-a216-324e89639860</onsuccess><resource object="Utility - File Management" action="File Exists" /></stage><stage stageid="8fa41376-dc1e-470c-b6b1-3fb3d6faafbb" name="Exists" type="Data"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="-285" y="210" w="120" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="83b9905f-86c1-43bd-a216-324e89639860" name="File Exists?" type="Decision"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="15" y="30" w="90" h="60" /><decision expression="[Exists]" /><ontrue>b72c96fc-df0a-4ba3-8df6-72acbd359a5d</ontrue><onfalse>c50471a0-aa3d-4290-8508-d1f8a7665fb9</onfalse></stage><stage stageid="c50471a0-aa3d-4290-8508-d1f8a7665fb9" name="System Exception" type="Exception"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="120" y="30" /><exception type="System Exception" detail="&quot;Orders file not found.&quot;" /></stage><stage stageid="36a15e5a-fa53-4fa5-8e84-d9529b02d068" name="Show Word" type="Action"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="15" y="270" w="90" h="30" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>75658e2b-e108-4049-83f8-6ecac12e3237</onsuccess><resource object="MS Word VBO" action="Show" /></stage><stage stageid="6f46d360-23ea-4bf7-88d7-5cbc889ffe2a" name="3. Is this a Live process?" type="Decision"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="15" y="150" w="90" h="60" /><decision expression="[Live Process]" /><ontrue>d101f458-43e5-4e2d-88d1-6f23a23aaf45</ontrue><onfalse>36a15e5a-fa53-4fa5-8e84-d9529b02d068</onfalse></stage><stage stageid="1a285536-6b77-4f1c-b947-5aec43597176" name="7. Close File" type="Action"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="15" y="540" w="90" h="30" /><inputs><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="documentname" friendlyname="documentname" expr="[doc]" /></inputs><onsuccess>9b7a8f4b-9ee2-4d1e-8484-92ef1f205c90</onsuccess><resource object="MS Word VBO" action="Close" /></stage><stage stageid="a844d363-f7fb-4bc9-b618-370769d638e4" name="Note1" type="Note"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>1. Check the Orders file exists.

If not, we throw an Exception which will terminate the process.</narrative><display x="330" y="-30" w="210" h="60" /><font family="Segoe UI" size="10" style="Bold" color="0000FF" /></stage><stage stageid="55e53715-07a6-4fa6-bed3-5515bdac1980" name="Note1" type="Note"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>2. Create an instance of Word. This will be visible in your Task Manager.</narrative><display x="330" y="75" w="210" h="60" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="d101f458-43e5-4e2d-88d1-6f23a23aaf45" name="Anchor6" type="Anchor"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="120" y="150" w="10" h="10" /><font family="Segoe UI" size="10" style="Regular" color="FF0000" /><onsuccess>21ebdcd5-fb6a-4b23-8e3b-a85615aaa81e</onsuccess></stage><stage stageid="1ef3a865-5ceb-4788-9d9c-f340e2791a18" name="Note1" type="Note"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>3. If the process is a live process, then we don't need to make the Word instance visible.

Showing Word can affect the performance of your process, so once you have completed your process debug and test, you should disable the show stage.</narrative><display x="330" y="225" w="210" h="90" /><font family="Segoe UI" size="10" style="Bold" color="0000FF" /></stage><stage stageid="5d53038b-2fcf-46e4-8a1d-40309c0ce203" name="Note1" type="Note"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>4. Open the Word template.</narrative><display x="330" y="315" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="aa0a3adf-55cc-4d86-81c9-0939bf43e5b3" name="Note1" type="Note"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>5. Change address lines (Subprocess)</narrative><display x="330" y="375" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="0000FF" /></stage><stage stageid="42dad464-c8cc-4460-ab13-f0830000b64e" name="6. Export PDF" type="Action"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="15" y="495" /><inputs><input type="text" name="documentname" friendlyname="documentname" expr="[doc]" /><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="File Name" friendlyname="File Name" expr="[FileName]" /></inputs><onsuccess>1a285536-6b77-4f1c-b947-5aec43597176</onsuccess><resource object="MS Word VBO" action="ExportPDF" /></stage><stage stageid="f66555e4-d66f-4cdd-8ffc-d016e2d8cd44" name="pdf_output" type="Data"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="-315" y="135" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\BluePrism\Output\PDF_Ordner\</initialvalue><private /></stage><stage stageid="9ab9a00e-e712-4daa-a6e7-9c0c1769a4cf" name="doc" type="Data"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="-120" y="0" /><datatype>text</datatype><initialvalue /><alwaysinit /></stage><stage stageid="1f853224-e931-4388-abc3-a896ebf6861f" name="Note1" type="Note"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>6. Save the personalized letter as PDF.</narrative><display x="330" y="495" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="bd02962d-8466-4a93-8d9d-73eac1657b62" name="Note1" type="Note"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>7. Close the word template without saving.</narrative><display x="330" y="540" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="3de9d885-a70f-4853-a592-eba452ed9bf6" name="Exit Word" type="Action"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="15" y="660" /><inputs><input type="number" name="handle" friendlyname="handle" expr="[handle]" /></inputs><onsuccess>d78850c4-b8da-4f97-95c1-188e06dedc7d</onsuccess><resource object="MS Word VBO" action="Exit" /></stage><stage stageid="21bcb560-dc6e-407b-a245-d7aa0ebb4054" name="technical variables" type="Block"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="-360" y="180" w="285" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="a0f8f6fe-a55b-477a-97a0-9853a74bb243" name="Input" type="Block"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="-360" y="-30" w="285" h="120" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="22bf9080-d5e6-4d84-ba73-5a6cc776c75b" name="Output" type="Block"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="-360" y="105" w="285" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="99be8e05-faf0-4d4c-b82f-754b276a1544" name="input_queue" type="Data"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="-300" y="45" w="90" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">CompanysWithoutRequest</initialvalue><private /><alwaysinit /></stage><stage stageid="f75c6c5e-ac2d-4e46-a052-af37cf9770c6" name="Data_Queue" type="Collection"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="-225" y="45" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="78d03c9c-1c1a-4612-8dd6-ce5710297493" name="Create letters" type="SubSheet"><loginhibit onsuccess="true" /><display x="15" y="-75" w="120" h="60" /><font family="Segoe UI" size="12" style="Bold" color="0000FF" /><inputs><input type="text" name="pdf_output_path" friendlyname="pdf_output_path" narrative="Path to store PDF files" expr="[PDFPath]" /></inputs><onsuccess>8e78b79e-f951-42e9-8725-a8dde7ef98b0</onsuccess><processid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</processid></stage><stage stageid="e3bce291-69c6-4531-87c3-1e7ca5aa4617" name="5. Change address" type="SubSheet"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="15" y="375" w="90" h="60" /><font family="Segoe UI" size="10" style="Regular" color="0000FF" /><inputs><input type="collection" name="Data" friendlyname="Data" narrative="Data of Company" expr="[Data_Queue]" /></inputs><onsuccess>68e39f91-3d55-448a-8471-08fbf3de751f</onsuccess><processid>c1dc1014-f7a1-483d-974b-40de167bca79</processid></stage><stage stageid="13ff798b-0774-439d-85a0-da1c613bca8d" name="Note1" type="Note"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><narrative>6. Replace the dummy zip code and city name with the actual zip code and city name</narrative><display x="180" y="360" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="21ebdcd5-fb6a-4b23-8e3b-a85615aaa81e" name="Get next item from queue" type="Action"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>This action gets the next item to be worked from the queue, returning its details and locking it so no other case can work it.

Items with higher priorities (lower numerical value) are processed first. Where the priority is the same, the next item is the one that has been in the queue the longest,  is not already locked, and is not already completed.

The Item ID returned is used to make further calls to update the work status for that item. It may be empty, in which case there are no items available. This can mean either a) the queue is empty, or b) the queue is not running. This mechanism can be used to cleanly stop all processes working a particular queue at the end of the next case. Items that have a 'deferred' time set will not be returned unless that time has been reached.</narrative><display x="120" y="195" /><inputs><input type="text" name="Queue Name" friendlyname="Queue Name" narrative="The name of the queue" expr="[input_queue]" /><input type="text" name="Key Filter" friendlyname="Key Filter" narrative="Optionally, a key value to filter by. Only items with this key value will be considered." expr="" /><input type="text" name="Tag Filter" friendlyname="Tag Filter" narrative="Optionally, a tag mask to filter by. This can consist of any number of tag searches - each term can be separated by a semi-colon and they are all applied to the search (ie. they are AND'ed terms not OR'ed terms). For example, &quot;Account: Joint; -Balance: Overdrawn; Card: *Visa*&quot; will include any items which match all the terms, ie. every item must have an 'Account: Joint' tag applied, no item can have a 'Balance: Overdrawn' tag applied, every item must have a tag applied which starts with 'Card: ' and then contains the text 'Visa'." expr="" /></inputs><outputs><output type="text" name="Status" friendlyname="Status" narrative="The status of the item." stage="" /><output type="number" name="Attempts" friendlyname="Attempts" narrative="The number of attempts already made to work this item." stage="" /><output type="collection" name="Data" friendlyname="Data" narrative="The data associated with the item - a single collection row." stage="Data_Queue" /><output type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item retrieved - empty if there are none available." stage="Company ID" /></outputs><onsuccess>fcb60bdc-feb4-4521-9a7e-bbf85824338b</onsuccess><resource object="Blueprism.Automate.clsWorkQueuesActions" action="Get Next Item" /></stage><stage stageid="f00dc7b3-9182-4498-a2c4-c4b97de859ab" name="replacements" type="Block"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-195" y="-15" w="135" h="210" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="953ae45a-24c2-4fcb-b1a7-6287e27085d9" name="8. Mark Completed" type="Action"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><narrative>Marks the item as completed, by updating the Completed timestamp and setting Locked to null. The item must be 'owned' by the calling process - i.e. it must have been retrieved using Get Next Item.</narrative><display x="180" y="600" /><inputs><input type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item to mark" expr="[Company ID]" /></inputs><onsuccess>3e479598-c741-4d81-862f-16eb856b9263</onsuccess><resource object="Blueprism.Automate.clsWorkQueuesActions" action="Mark Completed" /></stage><stage stageid="fcb60bdc-feb4-4521-9a7e-bbf85824338b" name="Got Item?" type="Decision"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>War noch ein Unternehmen in der Liste verfügbar?</narrative><display x="120" y="270" /><decision expression="[Company ID]&lt;&gt;&quot;&quot;" /><ontrue>36a15e5a-fa53-4fa5-8e84-d9529b02d068</ontrue><onfalse>334d1848-3179-4af8-b5f4-0f8c3585debe</onfalse></stage><stage stageid="3e479598-c741-4d81-862f-16eb856b9263" name="Anchor1" type="Anchor"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="180" y="525" w="10" h="10" /><font family="Segoe UI" size="10" style="Regular" color="0000FF" /><onsuccess>2bdb404d-b26d-489f-8197-e6363e6cd04c</onsuccess></stage><stage stageid="2bdb404d-b26d-489f-8197-e6363e6cd04c" name="Anchor3" type="Anchor"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="180" y="195" w="10" h="10" /><font family="Segoe UI" size="10" style="Regular" color="0000FF" /><onsuccess>21ebdcd5-fb6a-4b23-8e3b-a85615aaa81e</onsuccess></stage><stage stageid="21e02f7b-7941-4ccf-9526-2fdccf9e3dd3" name="Note1" type="Note"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><narrative>8. If the process is part of a queue, mark the queue item as completed and procceed with the next one.</narrative><display x="330" y="600" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="d158e40b-b756-452d-843d-207f517d5a72" name="7Zip" type="SubSheetInfo"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="f860408e-1d64-4e14-901e-84648d8d064d" name="Start" type="Start"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="15" y="-105" /><inputs><input type="text" name="processPath" stage="processPath" /><input type="text" name="inputPath" stage="InputPath" /><input type="text" name="destinationPath" stage="DestinationPath" /><input type="text" name="CompressedFileName" narrative="Name of the archive" stage="CompressedFileName" /></inputs><onsuccess>097aea45-ef8c-4422-a70b-d7a45738d885</onsuccess></stage><stage stageid="b6bd3c2b-5656-4e3f-8b1b-d6bd82c4fb38" name="End" type="End"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="15" y="375" /><outputs><output type="collection" name="Attachements" narrative="All collections to send via mail" stage="Attachements" /></outputs></stage><stage stageid="f763fd99-97bf-4004-a76a-ec5d3eeb2175" name="Create 7z" type="Action"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><display x="15" y="195" /><inputs><input type="text" name="InputPath" friendlyname="InputPath" narrative="Path of the input file or folder." expr="[InputPath]" /><input type="text" name="DestinationPath" friendlyname="DestinationPath" narrative="Locaction where compressed file has to be created." expr="[DestinationPath]" /><input type="text" name="ProcessPath" friendlyname="ProcessPath" narrative="File path of 7z.exe." expr="[processPath]" /><input type="text" name="CompressedFileName" friendlyname="CompressedFileName" narrative="Optional file name for compressed file." expr="[CompressedFileName]" /></inputs><outputs><output type="flag" name="Sucess" friendlyname="Sucess" narrative="Return true if execution is successful" stage="" /></outputs><onsuccess>fff8576a-1521-4f8e-b301-d35af809f997</onsuccess><resource object="ATCS-Compression &amp; Extraction" action="Create 7z" /></stage><stage stageid="8e78b79e-f951-42e9-8725-a8dde7ef98b0" name="7Zip" type="SubSheet"><loginhibit onsuccess="true" /><display x="15" y="0" w="90" h="30" /><font family="Segoe UI" size="12" style="Bold" color="0000FF" /><inputs><input type="text" name="processPath" friendlyname="processPath" expr="[7zipPath]" /><input type="text" name="inputPath" friendlyname="inputPath" expr="[PDFPath]" /><input type="text" name="destinationPath" friendlyname="destinationPath" expr="[ArchivePath]" /><input type="text" name="CompressedFileName" friendlyname="CompressedFileName" narrative="Name of the archive" expr="[ArchiveName]" /></inputs><outputs><output type="collection" name="Attachements" friendlyname="Attachements" narrative="All collections to send via mail" stage="Attachements" /></outputs><onsuccess>a9ae11f7-5ea5-4524-87c0-fa3fd9812b22</onsuccess><processid>8d4c219c-2de7-4630-9cec-20177b31c9d6</processid></stage><stage stageid="e9b56295-619c-432c-b594-5d515a25732c" name="Company ID" type="Data"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="-135" y="45" w="90" h="30" /><font family="Segoe UI" size="10" style="Regular" color="0000FF" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9b7a8f4b-9ee2-4d1e-8484-92ef1f205c90" name="Is this a Live process?" type="Decision"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><display x="15" y="600" w="90" h="60" /><decision expression="[Live Process]" /><ontrue>953ae45a-24c2-4fcb-b1a7-6287e27085d9</ontrue><onfalse>3de9d885-a70f-4853-a592-eba452ed9bf6</onfalse></stage><stage stageid="334d1848-3179-4af8-b5f4-0f8c3585debe" name="Anchor2" type="Anchor"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="120" y="660" w="10" h="10" /><onsuccess>3de9d885-a70f-4853-a592-eba452ed9bf6</onsuccess></stage><stage stageid="bf63603a-a543-40b9-ad71-c2ca47770fcd" name="Query output" type="SubSheetInfo"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="ce442c37-cbb9-450a-b289-6615c7c3df13" name="End" type="End"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="15" y="345" /></stage><stage stageid="a9ae11f7-5ea5-4524-87c0-fa3fd9812b22" name="Query Output" type="SubSheet"><loginhibit onsuccess="true" /><display x="15" y="75" w="90" h="30" /><font family="Segoe UI" size="12" style="Bold" color="0000FF" /><inputs><input type="collection" name="Attachements" friendlyname="Attachements" narrative="Attachements to send" expr="[Attachements]" /></inputs><onsuccess>58472198-cd33-4de9-b107-f2f8e67a5cb9</onsuccess><processid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</processid></stage><stage stageid="6cdf73f8-dfda-4375-93e9-d08cbcb53dd2" name="Note3" type="Note"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><narrative>Requirements

Download 7-zip from 

https://7-zip.de/download.html</narrative><display x="-210" y="15" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="0000FF" /></stage><stage stageid="73742aa8-59f1-4b0d-98dc-28281b431170" name="Username" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="255" y="-75" /><datatype>text</datatype><initialvalue xml:space="preserve">blueprism.cobitest</initialvalue><private /><alwaysinit /></stage><stage stageid="674f6e3f-7f61-4fbf-9eee-904fea1f3218" name="Password" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="330" y="-75" /><datatype>password</datatype><initialvalueenc>50,26,7,85,95,4,70,84</initialvalueenc><private /><alwaysinit /></stage><stage stageid="7b4650f8-9fd4-48bd-9568-fc1ea909e81e" name="POP3 Server" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="255" y="-30" /><datatype>text</datatype><initialvalue xml:space="preserve">pop.gmail.com</initialvalue><private /><alwaysinit /></stage><stage stageid="a3ee5050-d127-4fea-9ada-824970153a81" name="SMTP Server" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="330" y="-30" /><datatype>text</datatype><initialvalue xml:space="preserve">smtp.gmail.com</initialvalue><private /><alwaysinit /></stage><stage stageid="0702b038-5799-49a1-a2a0-f5d96bc5037e" name="POP3 Port" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="255" y="15" /><datatype>number</datatype><initialvalue>995</initialvalue><private /><alwaysinit /></stage><stage stageid="fbd15650-1587-482b-bc33-ab79ce881d23" name="SMTP Port" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="315" y="15" /><datatype>number</datatype><initialvalue>587</initialvalue><private /><alwaysinit /></stage><stage stageid="bf636664-40de-4857-93b0-a2ed1d38afc2" name="Use SSL?" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="255" y="60" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="a2be3157-f931-4df2-a0ae-456f485ef77c" name="Email-Configuration" type="Note"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="300" y="-15" w="180" h="210" /></stage><stage stageid="a0acce35-6a19-49f6-8a68-4a18bc09274d" name="Start" type="Start"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="collection" name="Attachements" narrative="Attachements to send" stage="Attachements" /></inputs><onsuccess>5653ba51-d230-46f1-b22c-67db7c64a34b</onsuccess></stage><stage stageid="5653ba51-d230-46f1-b22c-67db7c64a34b" name="Email - POP3/SMTP::Configure" type="Action"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="15" y="-30" /><inputs><input type="text" name="Username" friendlyname="Username" narrative="The POP3 and SMTP Username" expr="[Username]" /><input type="password" name="Password" friendlyname="Password" narrative="The POP3 and SMTP Password" expr="[Password]" /><input type="text" name="POP3 Server" friendlyname="POP3 Server" narrative="The POP3 Server address e.g. pop.domain.com" expr="[POP3 Server]" /><input type="text" name="SMTP Server" friendlyname="SMTP Server" narrative="The SMTP Server address e.g. smtp.domain.com" expr="[SMTP Server]" /><input type="number" name="POP3 Port" friendlyname="POP3 Port" narrative="The POP3 Port, e.g. 110 or 995" expr="[POP3 Port]" /><input type="number" name="SMTP Port" friendlyname="SMTP Port" narrative="The SMTP Port, e.g 25 or 465" expr="[SMTP Port]" /><input type="flag" name="POP3 UseSSL" friendlyname="POP3 UseSSL" narrative="Whether to use SSL for POP3" expr="[Use SSL?]" /><input type="flag" name="SMTP UseSSL" friendlyname="SMTP UseSSL" narrative="Whether to use SSL for SMTP" expr="[Use SSL?]" /></inputs><onsuccess>5bf37465-de29-4927-b94f-fc3f4c42112b</onsuccess><resource object="Email - POP3/SMTP" action="Configure" /></stage><stage stageid="564ac20b-8685-4017-a6dc-b1555083e5bf" name="Email - POP3/SMTP::Send Message" type="Action"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="15" y="240" /><inputs><input type="text" name="From" friendlyname="From" narrative="The email address of the sender." expr="[From]" /><input type="text" name="To" friendlyname="To" narrative="The email address of the recipient. To address multiple recipients use the format &quot;john.smith@example.com, henry.jones@example.com&quot; OR &quot;John Smith &lt;john.smith@example.com&gt;, Henry Jones &lt;henry.jones@example.com&gt;&quot;." expr="[To]" /><input type="text" name="Subject" friendlyname="Subject" narrative="The subject of the email." expr="[Subject]" /><input type="text" name="Body" friendlyname="Body" narrative="The body of the email." expr="[Body]" /><input type="collection" name="Attachments" friendlyname="Attachments" narrative="A Collection containing a list of files to add to the email as attachments." expr="[Attachements]" /><input type="flag" name="BodyIsHTML" friendlyname="BodyIsHTML" narrative="Indicates if the body should be sent as HTML" expr="[BodyIsHTML]" /></inputs><onsuccess>ce442c37-cbb9-450a-b289-6615c7c3df13</onsuccess><resource object="Email - POP3/SMTP" action="Send Message" /></stage><stage stageid="add8c557-b8aa-4757-9d94-9923a470e8d9" name="From" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="-210" y="0" /><datatype>text</datatype><initialvalue xml:space="preserve">blueprism.cobitest@gmail.com</initialvalue><private /><alwaysinit /></stage><stage stageid="e8e10d9c-cf02-4662-8a68-1a9821c92a9d" name="To" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="-150" y="0" /><datatype>text</datatype><initialvalue xml:space="preserve">florian.goehring@mailbox.org</initialvalue><private /><alwaysinit /></stage><stage stageid="69803f3e-0627-4b87-ba5a-0daaa8a135ea" name="Subject" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="-210" y="45" /><datatype>text</datatype><initialvalue xml:space="preserve">CoBee Assignment submission</initialvalue><private /><alwaysinit /></stage><stage stageid="b2b7a11c-8a57-4ed8-993a-8d286527be4a" name="Body" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="-150" y="45" /><datatype>text</datatype><initialvalue xml:space="preserve">Hello,

attached you can find a file containing CoBee's work.

Sincerely,
Your Cobee</initialvalue><private /><alwaysinit /></stage><stage stageid="3dd2049b-6aba-45b3-8e75-20aaf85b94e9" name="BodyIsHTML" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="-180" y="135" w="120" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="eabe4041-e3f1-47f7-8815-764e5a3c7751" name="Counter" type="Data"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="-225" y="135" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="68e39f91-3d55-448a-8471-08fbf3de751f" name="Set File Path and name" type="MultipleCalculation"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><display x="15" y="435" /><onsuccess>42dad464-c8cc-4460-ab13-f0830000b64e</onsuccess><steps><calculation expression="[pdf_output]&amp;&quot;attachement&quot;&amp;[Counter]" stage="FileName" /><calculation expression="[Counter]+1" stage="Counter" /></steps></stage><stage stageid="04568b7b-b92e-4e10-9c53-56a0d9a6aa85" name="FileName" type="Data"><subsheetid>f3a8754b-d65d-4ea3-a92e-2c6e44b0abb2</subsheetid><loginhibit onsuccess="true" /><narrative>Name of the PDF file</narrative><display x="-135" y="135" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2fcc38dd-803b-472c-8c8e-ce8dc3aeb5db" name="Data" type="Collection"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><display x="90" y="-75" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="ad416e15-f5d2-429f-b490-929202e80b31" name="Set Data for process" type="MultipleCalculation"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><narrative>Set Name, Street, Zip-Code of the current company to local variables.</narrative><display x="15" y="-15" /><onsuccess>27bc8ade-fc50-4905-95fc-c7ce50c7c393</onsuccess><steps><calculation expression="[Data.Name]" stage="new_firm" /><calculation expression="[Data.StreetAndNumber]" stage="new_street" /><calculation expression="[Data.PLZ] &amp; [Data.City]" stage="new_zip" /></steps></stage><stage stageid="c28d4bc7-1bf8-4193-ac33-c13474e181ed" name="6. Replace date" type="Action"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="15" y="480" /><inputs><input type="text" name="documentname" friendlyname="documentname" expr="[doc]" /><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="text" friendlyname="text" expr="FormatDate(Today(), &quot;dd.MM.yyyy&quot;)" /></inputs><onsuccess>9f13d172-3010-4426-9e91-a1c98c8f3d37</onsuccess><resource object="MS Word VBO" action="Type Text" /></stage><stage stageid="f68bdb6a-439b-4c62-ba54-129b70241149" name="5. Find Date" type="Action"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="15" y="420" /><inputs><input type="number" name="handle" friendlyname="handle" expr="[handle]" /><input type="text" name="document name" friendlyname="document name" expr="[doc]" /><input type="text" name="text" friendlyname="text" expr="[find_date]" /><input type="flag" name="match case" friendlyname="match case" expr="[match_case]" /><input type="flag" name="match whole word" friendlyname="match whole word" expr="[match_whole_word]" /></inputs><outputs><output type="flag" name="found" friendlyname="found" stage="found" /></outputs><onsuccess>c28d4bc7-1bf8-4193-ac33-c13474e181ed</onsuccess><resource object="MS Word VBO" action="Find Text" /></stage><stage stageid="bdb793a9-2434-4cf0-a235-ec04ee764991" name="today" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-120" y="150" /><datatype>date</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="38ec0313-a07d-462d-8261-dba2b3bac77a" name="find_date" type="Data"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><loginhibit onsuccess="true" /><display x="-270" y="150" /><datatype>text</datatype><initialvalue xml:space="preserve">aktuelles Datum</initialvalue><private /><alwaysinit /></stage><stage stageid="471ee3d1-ffb3-4a7c-9db0-a1fac47d6181" name="Note1" type="Note"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><narrative>7. Find the date line for the current date</narrative><display x="180" y="420" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="1dd20f12-6b1f-403e-8fa9-990d44b382a3" name="Note1" type="Note"><subsheetid>c1dc1014-f7a1-483d-974b-40de167bca79</subsheetid><narrative>8. Replace the string with the current date</narrative><display x="180" y="480" w="210" h="30" /><font family="Segoe UI" size="10" style="Bold" color="000080" /></stage><stage stageid="71945845-7214-4e91-a401-198e783e5746" name="Cleanup" type="SubSheetInfo"><subsheetid>af02dc83-ab2c-423d-9709-a61aeacc6f12</subsheetid><display x="-210" y="-90" w="150" h="90" /></stage><stage stageid="b41e2906-51f9-4e28-a4ae-8e6eecd10f77" name="Start" type="Start"><subsheetid>af02dc83-ab2c-423d-9709-a61aeacc6f12</subsheetid><display x="15" y="-105" /><inputs><input type="text" name="PDFPath" narrative="Path to folder with pdf files to delete" stage="PDFPath" /><input type="text" name="ArchivePath" narrative="Path to folder with archive files to delete" stage="ArchivePath" /></inputs><onsuccess>21877a6b-0c7e-4308-8b56-2065a56bfe88</onsuccess></stage><stage stageid="666d9ec5-aaae-4673-8d84-6e4712edcd29" name="End" type="End"><subsheetid>af02dc83-ab2c-423d-9709-a61aeacc6f12</subsheetid><display x="15" y="120" /></stage><stage stageid="58472198-cd33-4de9-b107-f2f8e67a5cb9" name="Cleanup" type="SubSheet"><loginhibit onsuccess="true" /><display x="15" y="150" /><inputs><input type="text" name="PDFPath" friendlyname="PDFPath" narrative="Path to folder with pdf files to delete" expr="[PDFPath]" /><input type="text" name="ArchivePath" friendlyname="ArchivePath" narrative="Path to folder with archive files to delete" expr="[ArchivePath]" /></inputs><onsuccess>e5c64f23-0ee9-4bad-83a2-1aab28dbfe19</onsuccess><processid>af02dc83-ab2c-423d-9709-a61aeacc6f12</processid></stage><stage stageid="21877a6b-0c7e-4308-8b56-2065a56bfe88" name="Delete PDF files" type="Action"><subsheetid>af02dc83-ab2c-423d-9709-a61aeacc6f12</subsheetid><loginhibit onsuccess="true" /><narrative>Delete PDF files to save ressources</narrative><display x="15" y="-45" /><inputs><input type="text" name="Folder" friendlyname="Folder" narrative="The path from which to delete the files" expr="[PDFPath]" /><input type="text" name="Pattern" friendlyname="Pattern" narrative="The wildcard pattern of files to delete" expr="&quot;*&quot;" /></inputs><onsuccess>d7ddae5e-afdf-4c41-bb33-f1cb2010ba54</onsuccess><resource object="Utility - File Management" action="Delete Files" /></stage><stage stageid="91b2f4ba-2b73-4038-86af-b5a5305cc095" name="ArchivePath" type="Data"><loginhibit /><display x="-210" y="105" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\BluePrism\Output\PDF_Archiv\</initialvalue><private /></stage><stage stageid="3df04f2a-4c64-4eb1-a12d-eab4e699908d" name="PDFPath" type="Data"><loginhibit /><display x="-210" y="60" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\BluePrism\Output\PDF_Ordner\</initialvalue><private /></stage><stage stageid="cda40366-6148-47d1-8027-a23aa13b0186" name="ArchiveName" type="Data"><display x="-360" y="105" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">PDF_Companys</initialvalue><private /></stage><stage stageid="51799f5e-ef30-4235-b93a-09c829e30420" name="7zip variables" type="Block"><loginhibit /><display x="-450" y="30" w="330" h="105" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="1ef68437-0a98-40d3-88ba-83e84e39a292" name="7zipPath" type="Data"><display x="-360" y="60" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Program Files\7-Zip\7z.exe</initialvalue><private /></stage><stage stageid="3835a253-31f8-4275-96d9-ecc093af8b09" name="processPath" type="Data"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="285" y="-45" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0ebd5fe9-e3b2-4998-8a1e-4b4cac651a83" name="InputPath" type="Data"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="210" y="-45" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cb6e8b4b-51b2-421a-9fdd-ac3139efaba8" name="DestinationPath" type="Data"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="210" y="-90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a83ce6a8-c043-413f-85c2-eb139ceda0bd" name="CompressedFileName" type="Data"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="285" y="-90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="11caaed5-ed86-42a4-901d-11245873ee5f" name="Input" type="Block"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><display x="165" y="-120" w="165" h="105" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="38ed14c8-7f04-420e-821d-f925ac1027c5" name="ArchivePath" type="Data"><subsheetid>af02dc83-ab2c-423d-9709-a61aeacc6f12</subsheetid><narrative>Path to folder with Archives</narrative><display x="-60" y="15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d7ddae5e-afdf-4c41-bb33-f1cb2010ba54" name="Delete Archives" type="Action"><subsheetid>af02dc83-ab2c-423d-9709-a61aeacc6f12</subsheetid><loginhibit onsuccess="true" /><narrative>Delete Archives to save ressources</narrative><display x="15" y="15" /><inputs><input type="text" name="Folder" friendlyname="Folder" narrative="The path from which to delete the files" expr="[ArchivePath]" /><input type="text" name="Pattern" friendlyname="Pattern" narrative="The wildcard pattern of files to delete" expr="&quot;*&quot;" /></inputs><onsuccess>666d9ec5-aaae-4673-8d84-6e4712edcd29</onsuccess><resource object="Utility - File Management" action="Delete Files" /></stage><stage stageid="2629f9d4-9455-4da4-bd43-682aa40c0ea4" name="PDFPath" type="Data"><subsheetid>af02dc83-ab2c-423d-9709-a61aeacc6f12</subsheetid><display x="-60" y="-45" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ae391f78-59f0-440f-9fcf-7bc7298f738e" name="Attachements" type="Collection"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="90" y="375" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Path" type="text" description="Path to created file" /></collectioninfo></stage><stage stageid="459051bd-d191-475f-b85d-0a97b9dfef93" name="Add Attachement" type="Calculation"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><narrative>Add an attachement to send via mail</narrative><display x="15" y="315" /><onsuccess>b6bd3c2b-5656-4e3f-8b1b-d6bd82c4fb38</onsuccess><calculation expression="[DestinationPath] &amp; [CompressedFileName] &amp; &quot;.7z&quot;" stage="Attachements.Path" /></stage><stage stageid="fff8576a-1521-4f8e-b301-d35af809f997" name="Collections::Add Row" type="Action"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><display x="15" y="255" /><inputs><input type="text" name="Collection Name" friendlyname="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Attachements&quot;" /></inputs><onsuccess>459051bd-d191-475f-b85d-0a97b9dfef93</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="3fe5073a-6300-41a3-b677-ac8c8d2529f0" name="Attachements" type="Collection"><display x="105" y="0" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Path" type="text" description="Path to files to send via mail" /></collectioninfo></stage><stage stageid="b6754923-5cef-415b-83e0-6de4e389e7fc" name="Attachements" type="Collection"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="-180" y="90" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Path" type="text" description="Path to files to attach" /></collectioninfo></stage><stage stageid="818b3dda-b8a4-4393-8a6b-f6a57588ef86" name="Archive existing?" type="Decision"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><narrative>Exists the Archive, delete and create. Else only Create.</narrative><display x="15" y="0" /><decision expression="[Exists]" /><ontrue>e8c7659e-c306-42c6-9bab-e98d023f6bcf</ontrue><onfalse>516d1889-5dd9-4e1e-9c7e-ef765ba9b64c</onfalse></stage><stage stageid="097aea45-ef8c-4422-a70b-d7a45738d885" name="Check file existing" type="Action"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><display x="15" y="-60" /><inputs><input type="text" name="File Name" friendlyname="File Name" narrative="The name of the file to check" expr="[DestinationPath] &amp; [CompressedFileName] &amp; &quot;.7z&quot;" /></inputs><outputs><output type="flag" name="Exists" friendlyname="Exists" narrative="True if the file exists" stage="Exists" /></outputs><onsuccess>818b3dda-b8a4-4393-8a6b-f6a57588ef86</onsuccess><resource object="Utility - File Management" action="File Exists" /></stage><stage stageid="0ec768eb-d42e-4bda-b6bc-ba73d58c293b" name="Exists" type="Data"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="90" y="-60" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e8c7659e-c306-42c6-9bab-e98d023f6bcf" name="Delete Archive files" type="Action"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><narrative>Delete PDF files to save ressources</narrative><display x="90" y="0" /><inputs><input type="text" name="Folder" friendlyname="Folder" narrative="The path from which to delete the files" expr="[DestinationPath]" /><input type="text" name="Pattern" friendlyname="Pattern" narrative="The wildcard pattern of files to delete" expr="&quot;*&quot;" /></inputs><onsuccess>8c61785e-2386-4084-b7c1-0ed60adfde5c</onsuccess><resource object="Utility - File Management" action="Delete Files" /></stage><stage stageid="8c61785e-2386-4084-b7c1-0ed60adfde5c" name="Anchor4" type="Anchor"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><display x="90" y="60" w="10" h="10" /><onsuccess>516d1889-5dd9-4e1e-9c7e-ef765ba9b64c</onsuccess></stage><stage stageid="516d1889-5dd9-4e1e-9c7e-ef765ba9b64c" name="Check Files exist" type="Action"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><narrative>Check whether PFD files exist</narrative><display x="15" y="60" /><inputs><input type="text" name="Folder" friendlyname="Folder" narrative="The folder in which to look for files" expr="[InputPath]" /><input type="text" name="Patterns CSV" friendlyname="Patterns CSV" narrative="The comma seperated list of wildcard patterns" expr="&quot;*&quot;" /></inputs><outputs><output type="flag" name="Success" friendlyname="Success" narrative="True if successful" stage="" /><output type="text" name="Message" friendlyname="Message" narrative="A message if unsuccessful" stage="" /><output type="collection" name="Files" friendlyname="Files" narrative="The collection of files found" stage="Files" /></outputs><onsuccess>d75a4c94-6f72-4be5-a525-5aa456f904e4</onsuccess><resource object="Utility - File Management" action="Get Files" /></stage><stage stageid="7cf4ebba-9c35-4c50-8406-539419fb949b" name="Files exist?" type="Decision"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="15" y="150" /><decision expression="[Count]&gt;0" /><ontrue>f763fd99-97bf-4004-a76a-ec5d3eeb2175</ontrue><onfalse>e24eb819-9cab-4432-abc6-bfc8e4ee5a41</onfalse></stage><stage stageid="e24eb819-9cab-4432-abc6-bfc8e4ee5a41" name="Anchor5" type="Anchor"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><display x="-45" y="150" w="10" h="10" /><onsuccess>c210825d-22de-49a9-9104-bf4cc7eb59a7</onsuccess></stage><stage stageid="c210825d-22de-49a9-9104-bf4cc7eb59a7" name="Anchor7" type="Anchor"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><display x="-45" y="375" w="10" h="10" /><onsuccess>b6bd3c2b-5656-4e3f-8b1b-d6bd82c4fb38</onsuccess></stage><stage stageid="2e54d862-c98c-4e00-a715-4978ccad1a44" name="Attachements?" type="Decision"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><narrative>Check if there are any attachements</narrative><display x="15" y="90" /><decision expression="[Count]&gt;0" /><ontrue>564ac20b-8685-4017-a6dc-b1555083e5bf</ontrue><onfalse>7bb6c971-ccef-4e80-a5b7-1898cb430b5a</onfalse></stage><stage stageid="5bf37465-de29-4927-b94f-fc3f4c42112b" name="Count Attachements" type="Action"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="15" y="30" /><inputs><input type="text" name="Collection Name" friendlyname="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Attachements&quot;" /></inputs><outputs><output type="number" name="Count" friendlyname="Count" narrative="The number of rows counted in the collection" stage="Count" /></outputs><onsuccess>2e54d862-c98c-4e00-a715-4978ccad1a44</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="05d8572e-b3d3-42ad-b88e-26221311ebc0" name="Count" type="Data"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><display x="90" y="30" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="967d02a0-e6f4-4acd-b56e-70adedc91d38" name="Change Body of Message" type="Calculation"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><narrative>Change the body to inform worker that there are no attachements</narrative><display x="90" y="135" /><onsuccess>c97d63b5-c935-4c65-a79e-0d4049a5685f</onsuccess><calculation expression="&quot;Hello,&#xA;&#xA;I couldn't find any companys to inform.&#xA;&#xA;Sincerely,&#xA;Your Cobee&quot;" stage="Body" /></stage><stage stageid="c97d63b5-c935-4c65-a79e-0d4049a5685f" name="Anchor8" type="Anchor"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="90" y="240" w="10" h="10" /><onsuccess>564ac20b-8685-4017-a6dc-b1555083e5bf</onsuccess></stage><stage stageid="7bb6c971-ccef-4e80-a5b7-1898cb430b5a" name="Anchor9" type="Anchor"><subsheetid>cbc1be7f-17f5-4045-a9a5-71fbc622c5d1</subsheetid><loginhibit onsuccess="true" /><display x="90" y="90" w="10" h="10" /><onsuccess>967d02a0-e6f4-4acd-b56e-70adedc91d38</onsuccess></stage><stage stageid="d214bfe1-b23d-49a4-81c8-9fc45f7e275a" name="Files" type="Collection"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="-60" y="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="d75a4c94-6f72-4be5-a525-5aa456f904e4" name="Collections::Count Rows" type="Action"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><loginhibit onsuccess="true" /><display x="15" y="105" /><inputs><input type="text" name="Collection Name" friendlyname="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Files&quot;" /></inputs><outputs><output type="number" name="Count" friendlyname="Count" narrative="The number of rows counted in the collection" stage="Count" /></outputs><onsuccess>7cf4ebba-9c35-4c50-8406-539419fb949b</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="b7bfd61f-7274-4888-a018-ce6f546cbeac" name="Count" type="Data"><subsheetid>8d4c219c-2de7-4630-9cec-20177b31c9d6</subsheetid><display x="90" y="105" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage></process></process>
        <process id="e6c0a04c-3ddf-4119-b065-a3e1781caeff" name="Auftragsliste Erstellen" xmlns="http://www.blueprism.co.uk/product/process"><process name="Auftragsliste Erstellen" version="1.0" bpversion="6.10.1.35171" narrative="Erstellung der Auftragsliste auf Basis der in der CSV enthaltenenen Einträge." byrefcollection="true"><view><camerax>0</camerax><cameray>-102</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="af0dfef4-7831-476b-b35e-3a00f1cb8260" type="Normal" published="False"><name>Crawl Telefonbuch</name><view><camerax>0</camerax><cameray>27</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5" type="Normal" published="False"><name>Read from CSV</name><view><camerax>-26</camerax><cameray>111</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="90b7fe47-1747-4219-949a-19aa05a3ea33" type="Normal" published="False"><name>Check PLZ</name><view><camerax>6</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="42d03f80-8c69-4e62-92fb-f1903ca84b32" type="Normal" published="False"><name>Query input</name><view><camerax>1</camerax><cameray>-105</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d7090e43-7c8b-40b4-8712-e4540ba4fcbf" type="Normal" published="False"><name>Process message</name><view><camerax>0</camerax><cameray>60</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="b8e2f3f5-7789-4671-aa91-4f95d4b6e254" type="Normal" published="False"><name>Results to Queue</name><view><camerax>140</camerax><cameray>7</cameray><zoom version="2">1.875</zoom></view></subsheet><subsheet subsheetid="02a41d29-509c-4652-8b65-22dfbecc809f" type="Normal" published="False"><name>Generate Company ID</name><view><camerax>27</camerax><cameray>63</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="169239b7-e8c7-409c-a554-37c694385675" name="Start" type="Start"><display x="15" y="-120" /><onsuccess>e996ca1d-cc88-4ffb-9346-e36c567c86c6</onsuccess></stage><stage stageid="9b8c37d2-8d8f-401e-84d7-93af25d53291" name="End" type="End"><display x="15" y="225" /></stage><stage stageid="95dfc342-920d-4500-bbfe-cb214580192a" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="2c1af8ca-1d9f-4be1-b316-18903f573e7d" name="Read from CSV" type="SubSheetInfo"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><narrative>Open CSV and save content to global Collection "Auftrag Input".</narrative><display x="-300" y="-105" w="120" h="90" /></stage><stage stageid="ff6ca5fb-9db3-49e6-9d1e-b192f42cecb9" name="Start" type="Start"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><preconditions><condition narrative="First row of CSV needs to be Header." /></preconditions><postconditions><condition narrative="Content of CSV is stored in global Collection &quot;Auftrag Input&quot;." /></postconditions><display x="-60" y="-120" /><inputs><input type="unknown" name="CSV path" stage="CSV path" /></inputs><onsuccess>875aa591-0891-47fd-9dde-dbea6168b85e</onsuccess></stage><stage stageid="c8c7b4fe-eafc-49de-a11a-e7bf981e3c40" name="End" type="End"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="-60" y="570" /><outputs><output type="collection" name="Job Input" stage="Jobs" /></outputs></stage><stage stageid="20c79e1f-1f95-463d-828f-e7acde65867e" name="Process message" type="SubSheet"><loginhibit onsuccess="true" /><display x="45" y="90" /><inputs><input type="text" name="MessagePath" friendlyname="MessagePath" expr="[messagePaths.path]" /><input type="text" name="MessageId" friendlyname="MessageId" expr="[messagePaths.messageID]" /></inputs><onsuccess>f5388e7f-d0ff-4488-8017-1c81bfb9897c</onsuccess><processid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</processid></stage><stage stageid="0de0ff0e-3885-463d-a214-47d3f642937a" name="Check if File Exists" type="Action"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><loginhibit onsuccess="true" /><display x="-60" y="195" /><inputs><input type="text" name="File Name" friendlyname="File Name" narrative="The name of the file to check" expr="[Files.Path]" /></inputs><outputs><output type="flag" name="Exists" friendlyname="Exists" narrative="True if the file exists" stage="Exists" /></outputs><onsuccess>818e38a6-323c-4bcf-a578-2404c7c1dfff</onsuccess><resource object="Utility - File Management" action="File Exists" /></stage><stage stageid="818e38a6-323c-4bcf-a578-2404c7c1dfff" name="Exists?" type="Decision"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="-60" y="255" /><decision expression="[Exists]" /><ontrue>9c58df49-84c0-4c04-8e13-464e45edb3f2</ontrue><onfalse>e5851008-2ddf-43f1-bd80-232ede48c6ac</onfalse></stage><stage stageid="68b983f5-9ce3-40b1-943a-b5596b2efbb8" name="Exists" type="Data"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><loginhibit onsuccess="true" /><display x="30" y="195" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="e5851008-2ddf-43f1-bd80-232ede48c6ac" name="Exception1" type="Exception"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="30" y="255" /><exception localized="yes" type="File Not Found" detail="&quot;File not found&quot;" /></stage><stage stageid="9c58df49-84c0-4c04-8e13-464e45edb3f2" name="Utility - File Management::Get CSV Text As Collection" type="Action"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><loginhibit onsuccess="true" /><display x="-60" y="315" w="90" h="30" /><inputs><input type="text" name="CSV File Path" friendlyname="CSV File Path" narrative="The full path to the CSV file" expr="[Files.Path]" /><input type="flag" name="First Line Is Header" friendlyname="First Line Is Header" narrative="Set True if you want to treat the first line as a header" expr="True" /></inputs><outputs><output type="collection" name="CSV Values" friendlyname="CSV Values" narrative="The collection populated with the values of the CSV file" stage="Input Data" /></outputs><onsuccess>4446a783-ff08-4298-9c3f-ec3981119456</onsuccess><resource object="Utility - File Management" action="Get CSV Text As Collection" /></stage><stage stageid="265aaace-cd10-447b-bc7e-0eb0bce4b748" name="Crawl Telefonbuch" type="SubSheetInfo"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="a1483feb-8e05-4012-af9d-a3c014f39864" name="Start" type="Start"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><display x="15" y="-105" /><inputs><input type="text" name="Branche" stage="Branche" /><input type="text" name="PLZ" stage="PLZ" /></inputs><onsuccess>55b42a96-82aa-4c3f-8b0a-354a45d4314b</onsuccess></stage><stage stageid="8816cf96-49fc-4df6-92ae-ee909ea582c1" name="End" type="End"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><display x="15" y="195" /><outputs><output type="collection" name="ResultSet" stage="ResultSet" /></outputs></stage><stage stageid="6230fbc6-e409-4fb5-b0cf-697501de481d" name="Query input" type="SubSheetInfo"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="fd4578d1-6341-43ae-8305-a0ad1bad43a6" name="Start" type="Start"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><display x="15" y="-105" /><onsuccess>840268ba-6e2f-4eb9-bd6e-33c3b955d349</onsuccess></stage><stage stageid="c0127342-c9dd-48aa-ae24-3723abd77f69" name="End" type="End"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><display x="15" y="570" /></stage><stage stageid="840268ba-6e2f-4eb9-bd6e-33c3b955d349" name="Email - POP3/SMTP::Configure" type="Action"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="15" y="-45" w="90" h="30" /><inputs><input type="text" name="Username" friendlyname="Username" narrative="The POP3 and SMTP Username" expr="[Username]" /><input type="password" name="Password" friendlyname="Password" narrative="The POP3 and SMTP Password" expr="[Password]" /><input type="text" name="POP3 Server" friendlyname="POP3 Server" narrative="The POP3 Server address e.g. pop.domain.com" expr="[POP3 Server]" /><input type="text" name="SMTP Server" friendlyname="SMTP Server" narrative="The SMTP Server address e.g. smtp.domain.com" expr="[SMTP Server]" /><input type="number" name="POP3 Port" friendlyname="POP3 Port" narrative="The POP3 Port, e.g. 110 or 995" expr="[POP3 Port]" /><input type="number" name="SMTP Port" friendlyname="SMTP Port" narrative="The SMTP Port, e.g 25 or 465" expr="[SMTP Port]" /><input type="flag" name="POP3 UseSSL" friendlyname="POP3 UseSSL" narrative="Whether to use SSL for POP3" expr="[Use SSL?]" /><input type="flag" name="SMTP UseSSL" friendlyname="SMTP UseSSL" narrative="Whether to use SSL for SMTP" expr="[Use SSL?]" /></inputs><onsuccess>dcf99a43-fbd3-41b7-b8d0-ef8b88345b62</onsuccess><resource object="Email - POP3/SMTP" action="Configure" /></stage><stage stageid="0d74ee7e-3f0e-42bd-bb58-075fd4767a63" name="Username" type="Data"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="195" y="-90" /><datatype>text</datatype><initialvalue xml:space="preserve">blueprism.cobitest</initialvalue><private /><alwaysinit /></stage><stage stageid="ceb8ff0f-297e-47c9-8a03-17e62db553a0" name="Password" type="Data"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="270" y="-90" /><datatype>password</datatype><initialvalueenc>50,26,7,85,95,4,70,84</initialvalueenc><private /><alwaysinit /></stage><stage stageid="7e25d469-86f5-4352-9e40-c6a7f8d06e2e" name="POP3 Server" type="Data"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="195" y="-45" /><datatype>text</datatype><initialvalue xml:space="preserve">pop.gmail.com</initialvalue><private /><alwaysinit /></stage><stage stageid="05730999-9441-43a3-85d0-bf346c305bbf" name="SMTP Server" type="Data"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="270" y="-45" /><datatype>text</datatype><initialvalue xml:space="preserve">smtp.gmail.com</initialvalue><private /><alwaysinit /></stage><stage stageid="cb6a467c-ee7b-427c-9997-1560e6f31913" name="POP3 Port" type="Data"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="195" y="0" /><datatype>number</datatype><initialvalue>995</initialvalue><private /><alwaysinit /></stage><stage stageid="ac89e48a-9001-4b4e-a156-aac6cbb70efe" name="SMTP Port" type="Data"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="255" y="0" /><datatype>number</datatype><initialvalue>587</initialvalue><private /><alwaysinit /></stage><stage stageid="dd7d8bf0-15f2-44ce-9524-9d01abb72caf" name="Use SSL?" type="Data"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="195" y="45" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="e996ca1d-cc88-4ffb-9346-e36c567c86c6" name="Query input" type="SubSheet"><loginhibit onsuccess="true" /><display x="15" y="-45" /><onsuccess>2ae1d660-e7c3-4cc1-9bec-5c4d90731e98</onsuccess><processid>42d03f80-8c69-4e62-92fb-f1903ca84b32</processid></stage><stage stageid="dcf99a43-fbd3-41b7-b8d0-ef8b88345b62" name="Email - POP3/SMTP::List Messages" type="Action"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="15" y="15" w="90" h="30" /><outputs><output type="collection" name="Emails" friendlyname="Emails" stage="Messages" /></outputs><onsuccess>fc3fb869-d55d-4be3-aab2-602c3d96aacf</onsuccess><resource object="Email - POP3/SMTP" action="List Messages" /></stage><stage stageid="2fc3384c-0679-487c-8ed0-9f9c82f3e559" name="Messages" type="Collection"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><display x="-165" y="-15" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Subject" type="text" description="The subject of the email." /><field name="From Name" type="text" description="The name of the sender." /><field name="From Address" type="text" description="The email address of the sender." /><field name="Date Sent" type="datetime" description="The date and time at which the email was sent." /><field name="MessageID" type="text" description="The ID of the email message." /></collectioninfo></stage><stage stageid="fc3fb869-d55d-4be3-aab2-602c3d96aacf" name="For each message ID" type="LoopStart"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="15" y="90" /><onsuccess>bcec8477-9fb9-4827-bfcb-a3d045eeda66</onsuccess><groupid>12b25eaf-d90f-477e-9a8c-945e8992b2a1</groupid><looptype>ForEach</looptype><loopdata>Messages</loopdata></stage><stage stageid="e56ef98f-a3d3-4b5a-be7c-f097958b9812" name="For each message ID" type="LoopEnd"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="15" y="495" /><onsuccess>c0127342-c9dd-48aa-ae24-3723abd77f69</onsuccess><groupid>12b25eaf-d90f-477e-9a8c-945e8992b2a1</groupid></stage><stage stageid="263f9dde-ee33-4351-b081-1139f4455f4c" name="Email - POP3/SMTP::Save Attachments" type="Action"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="45" y="375" w="90" h="30" /><inputs><input type="text" name="MessageID" friendlyname="MessageID" narrative="The ID of the email message." expr="[Messages.MessageID]" /><input type="text" name="Folder" friendlyname="Folder" narrative="A Folder in which to save all the attachments." expr="[messagePaths.path]" /></inputs><onsuccess>3137a301-d9e9-4dcc-9798-7c4c60ad3c35</onsuccess><resource object="Email - POP3/SMTP" action="Save Attachments" /></stage><stage stageid="953a3229-cf63-40c7-947b-a03a5c6abd63" name="Atttachment Path" type="Data"><loginhibit onsuccess="true" /><display x="240" y="-75" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\BluePrism\attachements\</initialvalue><alwaysinit /></stage><stage stageid="549d2ec1-07b9-4160-bc31-f8777687cb43" name="Global Vars" type="Note"><display x="285" y="-30" w="180" h="150" /></stage><stage stageid="ab920826-bf07-43ca-9297-79d2b8870002" name="Note3" type="Note"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><narrative>Liste:

[mailid: path]
[mailId: [path]]</narrative><display x="-165" y="225" w="90" h="60" /></stage><stage stageid="875aa591-0891-47fd-9dde-dbea6168b85e" name="Utility - File Management::Get Files" type="Action"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><loginhibit onsuccess="true" /><display x="-60" y="-30" w="90" h="30" /><inputs><input type="text" name="Folder" friendlyname="Folder" narrative="The folder in which to look for files" expr="[CSV path]" /><input type="text" name="Patterns CSV" friendlyname="Patterns CSV" narrative="The comma seperated list of wildcard patterns" expr="&quot;*.csv&quot;" /></inputs><outputs><output type="flag" name="Success" friendlyname="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" friendlyname="Message" narrative="A message if unsuccessful" stage="Message" /><output type="collection" name="Files" friendlyname="Files" narrative="The collection of files found" stage="Files" /></outputs><onsuccess>71b6749e-5482-473d-82c7-d985c3b7ffc2</onsuccess><resource object="Utility - File Management" action="Get Files" /></stage><stage stageid="d075919e-7c17-40c9-a12c-47c2616fbd45" name="Success" type="Data"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="180" y="-30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ff218ff4-2022-4acd-b5c5-efcd95406046" name="Message" type="Data"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="105" y="-30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="60928cdc-fed9-43b6-97e4-2fe2a157fe6f" name="Files" type="Collection"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="30" y="-30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="7d294629-b385-4193-a7f6-aa28829cf831" name="Exception2" type="Exception"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="30" y="45" /><exception localized="yes" type="System Exception" detail="&quot;No Attachements Found&quot;" /></stage><stage stageid="71b6749e-5482-473d-82c7-d985c3b7ffc2" name="Success getting files?" type="Decision"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="-60" y="45" /><decision expression="[Success]" /><ontrue>7dc1dc85-ac73-4714-bffd-7a7687c4ebf8</ontrue><onfalse>7d294629-b385-4193-a7f6-aa28829cf831</onfalse></stage><stage stageid="7dc1dc85-ac73-4714-bffd-7a7687c4ebf8" name="For each File" type="LoopStart"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><loginhibit onsuccess="true" /><display x="-60" y="135" /><onsuccess>0de0ff0e-3885-463d-a214-47d3f642937a</onsuccess><groupid>eabeb54c-ab90-44e5-959d-8bf8b89e2eb7</groupid><looptype>ForEach</looptype><loopdata>Files</loopdata></stage><stage stageid="77d3f155-6849-4eb8-8827-bda9182c8421" name="For each File" type="LoopEnd"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><loginhibit onsuccess="true" /><display x="-60" y="495" /><onsuccess>c8c7b4fe-eafc-49de-a11a-e7bf981e3c40</onsuccess><groupid>eabeb54c-ab90-44e5-959d-8bf8b89e2eb7</groupid></stage><stage stageid="4e3b5c23-670e-4ee8-a5e7-5be0efcd7d41" name="Note1" type="Note"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><narrative>TODO:

- wenn keine emails verfügbar sind -&gt; prozess ende
- wann wird die email gelöscht</narrative><display x="240" y="165" w="120" h="120" /></stage><stage stageid="d269e9db-5eac-48df-a48a-f3712875fca0" name="Note2" type="Note"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><narrative>TODO

- check ob Anhang korrektes Format hat
--- .csv
--- inhalt korrekt formatioert
</narrative><display x="-270" y="165" w="150" h="120" /></stage><stage stageid="b65c21ff-1ceb-44f7-b276-6168bf22c60a" name="Email-Configuration" type="Note"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><display x="240" y="-30" w="180" h="210" /></stage><stage stageid="578aa144-8283-4305-a888-9dfa53c5895d" name="generate folder name" type="Calculation"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="45" y="210" /><onsuccess>8e8eba74-8c70-4a24-a6b7-12b3027dfcbb</onsuccess><calculation expression="[Atttachment Path] &amp; Left([Messages.MessageID], 25)" stage="messagePaths.path" /></stage><stage stageid="90bbc199-1faa-498a-a9a8-a2a72f5e50ce" name="create subfolder" type="Action"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="45" y="315" /><inputs><input type="text" name="Directory Path" friendlyname="Directory Path" narrative="The path in which to create the directory" expr="[messagePaths.path]" /><input type="flag" name="Error If Already Exists" friendlyname="Error If Already Exists" narrative="True to generate an error if the directory already exists" expr="False" /></inputs><outputs><output type="flag" name="Success" friendlyname="Success" narrative="True if successful" stage="Success?" /><output type="text" name="Message" friendlyname="Message" narrative="An error message if unsuccessful" stage="FailureMessage" /></outputs><onsuccess>263f9dde-ee33-4351-b081-1139f4455f4c</onsuccess><resource object="Utility - File Management" action="Create Directory" /></stage><stage stageid="beecbad9-0554-4952-9ff4-2a4929825a3b" name="Success?" type="Data"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><display x="120" y="315" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a3109d99-124b-4658-aea0-96cda121df05" name="FailureMessage" type="Data"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><display x="195" y="315" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="670cde37-122d-4910-8e1c-326f559607b7" name="Process message" type="SubSheetInfo"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="efc0953a-7a63-4908-8698-f8c9559e491d" name="Start" type="Start"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><display x="-15" y="-150" /><inputs><input type="text" name="MessagePath" stage="MessagePath" /><input type="text" name="MessageId" stage="MessageId" /></inputs><onsuccess>47f48465-ba64-4d83-a37d-0ccea7c3a1f6</onsuccess></stage><stage stageid="6325bc4a-d460-488c-8b06-12c6e4c2f7d1" name="End" type="End"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><display x="-15" y="300" /></stage><stage stageid="06667a16-e250-4071-87b6-6c2affe6a2eb" name="CSV path" type="Data"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="15" y="-120" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="47f48465-ba64-4d83-a37d-0ccea7c3a1f6" name="Read from CSV" type="SubSheet"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><loginhibit onsuccess="true" /><display x="-15" y="-90" /><inputs><input type="unknown" name="CSV path" friendlyname="CSV path" expr="[MessagePath]" /></inputs><outputs><output type="collection" name="Job Input" friendlyname="Job Input" stage="QueryJobs" /></outputs><onsuccess>f922a7a6-b212-485d-8477-ee03b5a5d49c</onsuccess><processid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</processid></stage><stage stageid="bcec8477-9fb9-4827-bfcb-a3d045eeda66" name="Collections::Add Row" type="Action"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="45" y="150" /><inputs><input type="text" name="Collection Name" friendlyname="Collection Name" narrative="The name of the collection to act upon" expr="&quot;messagePaths&quot;" /></inputs><onsuccess>578aa144-8283-4305-a888-9dfa53c5895d</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="8e8eba74-8c70-4a24-a6b7-12b3027dfcbb" name="generate messageID" type="Calculation"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="45" y="255" /><onsuccess>90bbc199-1faa-498a-a9a8-a2a72f5e50ce</onsuccess><calculation expression="[Messages.MessageID]" stage="messagePaths.messageID" /></stage><stage stageid="c831a3db-8921-412a-9fb2-4667d9c33607" name="Note4" type="Note"><narrative>schlägt das fehl wenn der pfad nicht existiert? -&gt; pfad erstellen
</narrative><display x="255" y="-150" w="300" h="60" /></stage><stage stageid="cc68a1c1-bafc-408a-a898-d8ecf1cc5ae8" name="messagePaths" type="Collection"><display x="-165" y="45" w="90" h="30" /><datatype>collection</datatype><alwaysinit /><collectioninfo><field name="messageID" type="text" /><field name="path" type="text" /></collectioninfo></stage><stage stageid="2ae1d660-e7c3-4cc1-9bec-5c4d90731e98" name="Loop through message paths" type="LoopStart"><loginhibit onsuccess="true" /><display x="15" y="30" /><onsuccess>20c79e1f-1f95-463d-828f-e7acde65867e</onsuccess><groupid>85b92e21-64cd-4725-8ddb-0af5c149fb6d</groupid><looptype>ForEach</looptype><loopdata>messagePaths</loopdata></stage><stage stageid="f5388e7f-d0ff-4488-8017-1c81bfb9897c" name="Loop through message paths" type="LoopEnd"><loginhibit onsuccess="true" /><display x="15" y="150" /><onsuccess>9b8c37d2-8d8f-401e-84d7-93af25d53291</onsuccess><groupid>85b92e21-64cd-4725-8ddb-0af5c149fb6d</groupid></stage><stage stageid="87fa6c25-6676-4126-962c-ab93240bdc57" name="MessagePath" type="Data"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><display x="-195" y="-30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8c92362c-50e8-4997-80c3-6ac98862a090" name="MessageId" type="Data"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><display x="-195" y="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20ba7814-5bd2-485f-905a-682d49fdcec8" name="Input Data" type="Collection"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="30" y="315" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="PLZ" type="text" /><field name="Branche" type="text" /></collectioninfo></stage><stage stageid="c6e4fbd0-a318-42b2-a25b-e2f85d741c64" name="QueryJobs" type="Collection"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><display x="-195" y="90" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="PLZ" type="text" /><field name="Branche" type="text" /></collectioninfo></stage><stage stageid="f922a7a6-b212-485d-8477-ee03b5a5d49c" name="For each query job" type="LoopStart"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><loginhibit onsuccess="true" /><display x="30" y="-15" /><onsuccess>11a44665-984e-4922-8089-1b1878d963e7</onsuccess><groupid>6141c4fe-ff84-4411-8b3c-0d0fbf584e98</groupid><looptype>ForEach</looptype><loopdata>QueryJobs</loopdata></stage><stage stageid="480a2b49-054a-4fcb-a1ce-47de0e56239e" name="For each query job" type="LoopEnd"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><loginhibit onsuccess="true" /><display x="30" y="165" /><onsuccess>5806a351-8a1c-4370-9f4c-62ea8180f682</onsuccess><groupid>6141c4fe-ff84-4411-8b3c-0d0fbf584e98</groupid></stage><stage stageid="11f21c51-ab7d-4831-8622-5698147e2619" name="ResultSet" type="Collection"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><display x="105" y="45" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="55b42a96-82aa-4c3f-8b0a-354a45d4314b" name="GPM - DasTelefonbuch.de::Launch" type="Action"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><loginhibit onsuccess="true" /><display x="15" y="-45" w="90" h="30" /><onsuccess>595e5122-db73-4007-84e5-06e9ae4a9a3f</onsuccess><resource object="GPM - DasTelefonbuch.de" action="Launch" /></stage><stage stageid="595e5122-db73-4007-84e5-06e9ae4a9a3f" name="GPM - DasTelefonbuch.de::Search" type="Action"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><loginhibit onsuccess="true" /><display x="15" y="15" w="90" h="30" /><inputs><input type="text" name="Branche" friendlyname="Branche" narrative="Suchparameter1" expr="[Branche]" /><input type="text" name="PLZ" friendlyname="PLZ" narrative="Suchparameter2" expr="[PLZ]" /></inputs><onsuccess>4b67afba-3802-486e-9edd-39770ffc54ad</onsuccess><resource object="GPM - DasTelefonbuch.de" action="Search" /></stage><stage stageid="4b67afba-3802-486e-9edd-39770ffc54ad" name="GPM - DasTelefonbuch.de::Get Results" type="Action"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><loginhibit onsuccess="true" /><display x="15" y="75" w="90" h="30" /><inputs><input type="text" name="Branche" friendlyname="Branche" narrative="Branche of company" expr="[Branche]" /></inputs><outputs><output type="collection" name="ResultSet" friendlyname="ResultSet" stage="ResultSet" /></outputs><onsuccess>f25eb0a1-e3e8-4b4b-a975-782749723350</onsuccess><resource object="GPM - DasTelefonbuch.de" action="Get Results" /></stage><stage stageid="f851ab0a-1d92-45cd-acd2-a57ccd1067f8" name="ResultSet" type="Collection"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><display x="-60" y="195" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="11a44665-984e-4922-8089-1b1878d963e7" name="Crawl Telefonbuch" type="SubSheet"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><loginhibit onsuccess="true" /><display x="30" y="45" /><inputs><input type="text" name="Branche" friendlyname="Branche" expr="[QueryJobs.Branche]" /><input type="text" name="PLZ" friendlyname="PLZ" expr="[QueryJobs.PLZ]" /></inputs><outputs><output type="collection" name="ResultSet" friendlyname="ResultSet" stage="ResultSet" /></outputs><onsuccess>954bcdd9-0022-4b0f-b7f0-764ad18adcb0</onsuccess><processid>af0dfef4-7831-476b-b35e-3a00f1cb8260</processid></stage><stage stageid="8b75993b-af98-4020-ae9a-6575e96c4168" name="Branche" type="Data"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><display x="90" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="61594077-6542-424d-9498-83c09f790279" name="Results to Queue" type="SubSheetInfo"><subsheetid>b8e2f3f5-7789-4671-aa91-4f95d4b6e254</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="62dae11a-6974-4ca5-9af9-ef264c08f883" name="Start" type="Start"><subsheetid>b8e2f3f5-7789-4671-aa91-4f95d4b6e254</subsheetid><display x="15" y="-105" /><inputs><input type="collection" name="Data" stage="Results" /></inputs><onsuccess>dee9040b-2915-47ea-a8f3-2fd8c8faf683</onsuccess></stage><stage stageid="0b6b9c4f-2f0d-4ed1-9449-2b6b68d9d1e8" name="End" type="End"><subsheetid>b8e2f3f5-7789-4671-aa91-4f95d4b6e254</subsheetid><display x="15" y="165" /></stage><stage stageid="5806a351-8a1c-4370-9f4c-62ea8180f682" name="Results to Queue" type="SubSheet"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><loginhibit onsuccess="true" /><display x="-15" y="240" /><inputs><input type="collection" name="Data" friendlyname="Data" expr="[ResultsTotal]" /></inputs><onsuccess>6325bc4a-d460-488c-8b06-12c6e4c2f7d1</onsuccess><processid>b8e2f3f5-7789-4671-aa91-4f95d4b6e254</processid></stage><stage stageid="e6baf913-1ca9-45cf-a5ff-979c5c03483c" name="Results" type="Collection"><subsheetid>b8e2f3f5-7789-4671-aa91-4f95d4b6e254</subsheetid><display x="-60" y="-15" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="72469b9c-4648-4c88-9e3e-cee255f2ff96" name="PLZ" type="Data"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><display x="-60" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f25eb0a1-e3e8-4b4b-a975-782749723350" name="GPM - DasTelefonbuch.de::Close" type="Action"><subsheetid>af0dfef4-7831-476b-b35e-3a00f1cb8260</subsheetid><loginhibit onsuccess="true" /><display x="15" y="135" w="90" h="30" /><onsuccess>8816cf96-49fc-4df6-92ae-ee909ea582c1</onsuccess><resource object="GPM - DasTelefonbuch.de" action="Close" /></stage><stage stageid="43d7a88b-b219-4aee-99f4-8ae586aa6bd9" name="Note7" type="Note"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><narrative>OPTIMIERUNG:

jede E-Mail die keinen Anhang hat kann theoretisch sofort gelöscht werden und auch die messageId &amp; pfad müssen nicht weiter gegeben werden
</narrative><display x="225" y="405" w="180" h="120" /></stage><stage stageid="5172e3c4-9e7d-4474-ae19-80eeb5e651e0" name="Check PLZ" type="SubSheetInfo"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="dd8c7a7a-4ab3-466a-b98d-3d53d08199a0" name="Start" type="Start"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><display x="15" y="-105" /><inputs><input type="collection" name="Input" stage="Input" /></inputs><onsuccess>ca65f59b-3bf8-415f-97f6-9c01c63a7d9c</onsuccess></stage><stage stageid="502a41aa-4f4e-4ca8-8087-4e925dfdeb20" name="End" type="End"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><display x="15" y="165" /><outputs><output type="collection" name="Jobs" stage="Input" /></outputs></stage><stage stageid="ca65f59b-3bf8-415f-97f6-9c01c63a7d9c" name="For Each Job Input" type="LoopStart"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><loginhibit onsuccess="true" /><display x="15" y="-30" /><onsuccess>ac30145d-3095-4ad6-a05c-9759c2fd6db1</onsuccess><groupid>e8ca0451-9ec4-4ecc-9f80-f297db32ad0f</groupid><looptype>ForEach</looptype><loopdata>Input</loopdata></stage><stage stageid="4f076879-a715-4d91-9c71-dc5c62ab42c2" name="For Each Job Input" type="LoopEnd"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><loginhibit onsuccess="true" /><display x="15" y="90" /><onsuccess>502a41aa-4f4e-4ca8-8087-4e925dfdeb20</onsuccess><groupid>e8ca0451-9ec4-4ecc-9f80-f297db32ad0f</groupid></stage><stage stageid="ac30145d-3095-4ad6-a05c-9759c2fd6db1" name="PLZ has 5 digits?" type="Decision"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><display x="15" y="30" /><decision expression="Len([Input.PLZ]) = 5" /><ontrue>4f076879-a715-4d91-9c71-dc5c62ab42c2</ontrue><onfalse>90a306b5-3aaf-4a6f-bdc1-922f2e5a6975</onfalse></stage><stage stageid="2cfb94e3-3710-40c4-96b7-fc0f6f856faa" name="Note8" type="Note"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><narrative>Wrong formatting of the input csv can cause leading 0s to be omitted. </narrative><display x="-210" y="45" w="180" h="90" /></stage><stage stageid="03802bd3-7ca3-43cf-b94d-4f22107ff08b" name="Anchor3" type="Anchor"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><loginhibit onsuccess="true" /><display x="135" y="-30" w="10" h="10" /><onsuccess>ac30145d-3095-4ad6-a05c-9759c2fd6db1</onsuccess></stage><stage stageid="90a306b5-3aaf-4a6f-bdc1-922f2e5a6975" name="Add leading 0" type="Calculation"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><loginhibit onsuccess="true" /><display x="135" y="30" /><onsuccess>03802bd3-7ca3-43cf-b94d-4f22107ff08b</onsuccess><calculation expression="&quot;0&quot; &amp; [Input.PLZ]" stage="Input.PLZ" /></stage><stage stageid="fb9cec1f-e04d-4f90-afd2-0d84db77ac77" name="Input" type="Collection"><subsheetid>90b7fe47-1747-4219-949a-19aa05a3ea33</subsheetid><display x="90" y="-105" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Branche" type="text" /><field name="PLZ" type="text" /></collectioninfo></stage><stage stageid="de766e46-09e4-4c89-97b5-36615eda037e" name="Note6" type="Note"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><narrative>Global</narrative><display x="-285" y="30" w="60" h="120" /></stage><stage stageid="4446a783-ff08-4298-9c3f-ec3981119456" name="Check PLZ" type="SubSheet"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><loginhibit onsuccess="true" /><display x="-60" y="375" /><inputs><input type="collection" name="Input" friendlyname="Input" expr="[Input Data]" /></inputs><outputs><output type="collection" name="Jobs" friendlyname="Jobs" stage="Input Data" /></outputs><onsuccess>a3962f59-c071-4c57-a765-8ccc2e62ef91</onsuccess><processid>90b7fe47-1747-4219-949a-19aa05a3ea33</processid></stage><stage stageid="a3962f59-c071-4c57-a765-8ccc2e62ef91" name="Append Input to Jobs" type="Action"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><loginhibit onsuccess="true" /><display x="-60" y="435" /><inputs><input type="collection" name="Main Collection" friendlyname="Main Collection" narrative="The collection to append to." expr="[Jobs]" /><input type="collection" name="Collection to Append" friendlyname="Collection to Append" narrative="The collection to append." expr="[Input Data]" /></inputs><outputs><output type="collection" name="Combined Collection" friendlyname="Combined Collection" narrative="The combined collection." stage="Jobs" /></outputs><onsuccess>77d3f155-6849-4eb8-8827-bda9182c8421</onsuccess><resource object="Utility - Collection Manipulation" action="Append Rows to Collection" /></stage><stage stageid="d238bd9a-c187-413e-8db4-250620289a2d" name="Jobs" type="Collection"><subsheetid>9e3ea9e1-b5ac-4bd0-8007-48b4704f84e5</subsheetid><display x="-150" y="435" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Branche" type="text" /><field name="PLZ" type="text" /></collectioninfo></stage><stage stageid="ea05de5b-0b2a-43b9-ae01-b7aa52f0450b" name="ResultsTotal" type="Collection"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><display x="-195" y="150" /><datatype>collection</datatype><alwaysinit /></stage><stage stageid="954bcdd9-0022-4b0f-b7f0-764ad18adcb0" name="Append Results to Total" type="Action"><subsheetid>d7090e43-7c8b-40b4-8712-e4540ba4fcbf</subsheetid><loginhibit onsuccess="true" /><display x="30" y="105" /><inputs><input type="collection" name="Main Collection" friendlyname="Main Collection" narrative="The collection to append to." expr="[ResultsTotal]" /><input type="collection" name="Collection to Append" friendlyname="Collection to Append" narrative="The collection to append." expr="[ResultSet]" /></inputs><outputs><output type="collection" name="Combined Collection" friendlyname="Combined Collection" narrative="The combined collection." stage="ResultsTotal" /></outputs><onsuccess>480a2b49-054a-4fcb-a1ce-47de0e56239e</onsuccess><resource object="Utility - Collection Manipulation" action="Append Rows to Collection" /></stage><stage stageid="3e2f7868-970d-4743-a3ea-c107e0501213" name="Add Companys to queue" type="Action"><subsheetid>b8e2f3f5-7789-4671-aa91-4f95d4b6e254</subsheetid><loginhibit onsuccess="true" /><narrative>The Data collection contains the items to be added to the queue. The collection may contain single or multiple rows, with each representing an item to be added.

If there is a failure during the process, the queue will be unchanged - i.e. no rows will be loaded even if the error occurred on the last one.

If Defer Until is specified, the items will not be available to be worked until then. Otherwise, they are available immediately.

If the queue has a key field defined, an item added has key data longer than the maximum permitted 255 characters, an error will occur</narrative><display x="15" y="75" /><inputs><input type="text" name="Queue Name" friendlyname="Queue Name" narrative="The name of the queue to add items to" expr="&quot;PotentialCompanys&quot;" /><input type="collection" name="Data" friendlyname="Data" narrative="A collection containing the data, one row for each item to be added" expr="[Companys]" /><input type="datetime" name="Defer Until" friendlyname="Defer Until" narrative="Optionally, the date/time the new item(s) should be deferred until" expr="" /><input type="number" name="Priority" friendlyname="Priority" narrative="Optionally, the priority for the new item(s). Lower numbers represent higher priorities. The default is 0." expr="" /><input type="text" name="Tags" friendlyname="Tags" narrative="Optionally, a semi-colon-separated set of tags to apply to the queue item(s)" expr="" /><input type="text" name="Status" friendlyname="Status" narrative="Optionally, the initial status required of the work queue item(s) " expr="" /><input type="number" name="Batch Size" friendlyname="Batch Size" narrative="Optionally, the batch size to use when adding many items to the queue.  A Value of 0 will process all items in one batch.  An empty field will use the default batch size of 1000." expr=""><validator type="BluePrism.AutomateProcessCore.RangeParameterValidation" parameter="0:25000" /></input></inputs><outputs><output type="collection" name="Item IDs" friendlyname="Item IDs" narrative="The IDs of the items which have been added to the queue, in the order of the collection of data passed that was input" stage="" /></outputs><onsuccess>0b6b9c4f-2f0d-4ed1-9449-2b6b68d9d1e8</onsuccess><resource object="Blueprism.Automate.clsWorkQueuesActions" action="Add To Queue" /></stage><stage stageid="3137a301-d9e9-4dcc-9798-7c4c60ad3c35" name="Email - POP3/SMTP::Delete Message" type="Action"><subsheetid>42d03f80-8c69-4e62-92fb-f1903ca84b32</subsheetid><loginhibit onsuccess="true" /><display x="45" y="435" /><inputs><input type="text" name="MessageID" friendlyname="MessageID" narrative="The ID of the message to delete." expr="[Messages.MessageID]" /></inputs><onsuccess>e56ef98f-a3d3-4b5a-be7c-f097958b9812</onsuccess><resource object="Email - POP3/SMTP" action="Delete Message" /></stage><stage stageid="9aa7b474-c177-4476-b946-28dfe636bfed" name="Generate Company ID" type="SubSheetInfo"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="bca8afb2-00cf-4bc4-9c17-10818b2fbeea" name="Start" type="Start"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><display x="15" y="-60" /><inputs><input type="collection" name="Results" narrative="Results of Crawling" stage="Results" /></inputs><onsuccess>3abb9331-71ac-49a6-81dc-98a31c034d86</onsuccess></stage><stage stageid="2277c6b9-aacc-41ea-9af2-7c60165a6ab1" name="End" type="End"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><display x="15" y="300" /><outputs><output type="collection" name="Companys" narrative="Companys With ID ready for next steps" stage="Companys" /></outputs></stage><stage stageid="dee9040b-2915-47ea-a8f3-2fd8c8faf683" name="Generate Company ID" type="SubSheet"><subsheetid>b8e2f3f5-7789-4671-aa91-4f95d4b6e254</subsheetid><loginhibit onsuccess="true" /><display x="15" y="-15" /><inputs><input type="collection" name="Results" friendlyname="Results" narrative="Results of Crawling" expr="[Results]" /></inputs><outputs><output type="collection" name="Companys" friendlyname="Companys" narrative="Companys With ID ready for next steps" stage="Companys" /></outputs><onsuccess>3e2f7868-970d-4743-a3ea-c107e0501213</onsuccess><processid>02a41d29-509c-4652-8b65-22dfbecc809f</processid></stage><stage stageid="87aa6593-9216-42e2-9ed6-9dcecb241e85" name="Results" type="Collection"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><display x="90" y="-60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="7dd44a89-0a4a-4fb2-b0ad-b5b7f49a5668" name="Companys" type="Collection"><subsheetid>b8e2f3f5-7789-4671-aa91-4f95d4b6e254</subsheetid><display x="90" y="-15" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="5da31c0b-2719-44a5-9a7f-9e78197626ac" name="Companys" type="Collection"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><display x="90" y="300" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Company ID" type="text" description="Unique Company ID" /><field name="Name" type="text" description="Name of company" /><field name="StreetAndNumber" type="text" description="Adress of company" /><field name="PLZ" type="text" description="Location of Company" /><field name="City" type="text" description="City where company is" /><field name="Branche" type="text" description="Branche of company" /></collectioninfo></stage><stage stageid="3abb9331-71ac-49a6-81dc-98a31c034d86" name="Loop through results" type="LoopStart"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><loginhibit onsuccess="true" /><narrative>For every company in results is a ID generated and ut in new collection</narrative><display x="15" y="0" /><onsuccess>36d7268d-2646-4336-865d-c229291f1154</onsuccess><groupid>5116b433-7282-49a1-af2e-177c311c74d3</groupid><looptype>ForEach</looptype><loopdata>Results</loopdata></stage><stage stageid="fbab209f-015b-46ad-a4e8-f4ba56623d79" name="Loop through results" type="LoopEnd"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><loginhibit onsuccess="true" /><display x="15" y="240" /><onsuccess>2277c6b9-aacc-41ea-9af2-7c60165a6ab1</onsuccess><groupid>5116b433-7282-49a1-af2e-177c311c74d3</groupid></stage><stage stageid="36d7268d-2646-4336-865d-c229291f1154" name="Generate Company ID" type="Calculation"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><loginhibit onsuccess="true" /><narrative>Generade unique company ID for simple filtering</narrative><display x="15" y="60" /><onsuccess>b2734d3a-9f92-44ba-aa7a-66b02433677f</onsuccess><calculation expression="Trim(Left([Results.Branche],3)) &amp; &#xA;&quot;-&quot; &amp; &#xA;Trim([Results.PLZ]) &amp; &#xA;&quot;-&quot; &amp;&#xA;Trim(Left([Results.Name],2)) &amp; &#xA;Trim(Right([Results.Name],2)) &amp; &#xA;Trim(Left([Results.Street],2)) &amp; &#xA;Trim(Right([Results.Street],2))" stage="Company ID" /></stage><stage stageid="0e34d089-079e-4a39-9d45-e1b6dc2ebc94" name="Company ID" type="Data"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><display x="90" y="60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b2734d3a-9f92-44ba-aa7a-66b02433677f" name="AddToCompanyCollection" type="Action"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><loginhibit onsuccess="true" /><narrative>Add the Company ID and the data in new collection for processing.</narrative><display x="15" y="120" /><inputs><input type="text" name="Collection Name" friendlyname="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Companys&quot;" /></inputs><onsuccess>0148ae6c-87c7-4d5d-b4f8-c9310392643c</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="0148ae6c-87c7-4d5d-b4f8-c9310392643c" name="Append Data to Collection" type="MultipleCalculation"><subsheetid>02a41d29-509c-4652-8b65-22dfbecc809f</subsheetid><loginhibit onsuccess="true" /><narrative>Append the information of the current company fully in new collection</narrative><display x="15" y="180" /><onsuccess>fbab209f-015b-46ad-a4e8-f4ba56623d79</onsuccess><steps><calculation expression="[Company ID]" stage="Companys.Company ID" /><calculation expression="[Results.Name]" stage="Companys.Name" /><calculation expression="[Results.Street]" stage="Companys.StreetAndNumber" /><calculation expression="[Results.PLZ]" stage="Companys.PLZ" /><calculation expression="[Results.City]" stage="Companys.City" /><calculation expression="[Results.Branche]" stage="Companys.Branche" /></steps></stage></process></process>
        <process id="9bf22891-0c3c-4b2e-9e1b-5b135ccc57b7" name="Corona-Hilfe" published="true" xmlns="http://www.blueprism.co.uk/product/process"><process name="Corona-Hilfe" version="1.0" bpversion="6.10.1.35171" narrative="Informierung von gefilterten Unternehmen über Corona-Hilfe-Maßnahmen" byrefcollection="true"><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><stage stageid="faa99ea1-301c-4d1f-9f5b-ad1bc76a7ccd" name="Start" type="Start"><display x="15" y="-105" /><inputs><input type="collection" name="CompanysWithRequest" narrative="Unternehmen mit bereits gestelltem Antrag" stage="CompanysWithRequest" /></inputs><onsuccess>ea065ff8-3d3d-40bd-a9da-c7f2d3cfe2ab</onsuccess></stage><stage stageid="98356c89-c36e-473a-8af1-c3837317a549" name="End" type="End"><display x="15" y="210" /></stage><stage stageid="c84a900a-5c15-46e1-8954-045f19373c11" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="9ca95e3b-8c14-4f56-9558-2136a4beca89" name="CompanysWithRequest" type="Collection"><display x="90" y="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="ea065ff8-3d3d-40bd-a9da-c7f2d3cfe2ab" name="Eingabe: Antragliste erstellen" type="Process"><loginhibit onsuccess="true" /><narrative>Generierung der Queue alles zu überprüfenden Unternehmen</narrative><display x="15" y="-45" /><onsuccess>f788707d-1e01-4f29-abf2-d0ffdd2396fa</onsuccess><processid>e6c0a04c-3ddf-4119-b065-a3e1781caeff</processid></stage><stage stageid="f788707d-1e01-4f29-abf2-d0ffdd2396fa" name="Überprüfung: Antragsabgleich" type="Process"><loginhibit onsuccess="true" /><narrative>Prüfe die herausgesuchten Unternehmen, ob diese bereits einen Antrag gestellt haben. Falls ja: ignorieren</narrative><display x="15" y="30" /><inputs><input type="collection" name="CompanysWithRequest" friendlyname="CompanysWithRequest" narrative="Unternehmen, die bereits einen Antrag eingereicht haben" expr="[CompanysWithRequest]" /></inputs><onsuccess>9b4235bc-c973-45b6-b95e-ec02c07308df</onsuccess><processid>dd2807f6-9126-4428-8363-0f77b2a1ad6c</processid></stage><stage stageid="9b4235bc-c973-45b6-b95e-ec02c07308df" name="Ausgabe: Dokumenterzeugung" type="Process"><loginhibit onsuccess="true" /><narrative>Erzeugen der Informationsschreiben und versenden der .zip-Datei aller Blätter an vorgegebene E-Mail</narrative><display x="15" y="105" /><onsuccess>98356c89-c36e-473a-8af1-c3837317a549</onsuccess><processid>9034042e-7131-4a79-946d-d9e79127d946</processid></stage></process></process>
        <process id="dd2807f6-9126-4428-8363-0f77b2a1ad6c" name="GPM - Antragsabgleich" xmlns="http://www.blueprism.co.uk/product/process"><process name="GPM - Antragsabgleich" version="1.0" bpversion="6.10.1.35171" narrative="Potenzielle Unternehmen werden mit einer bereits vorliegenden Antragsliste abgeglichen, um Unternehmen, die bereits einen Antrag gestellt haben, nicht erneut anzuschreiben." byrefcollection="true"><view><camerax>-65</camerax><cameray>-15</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="0d20e369-5e7a-49e1-9eff-774905f7943f" type="Normal" published="False"><name>CheckList</name><view><camerax>15</camerax><cameray>75</cameray><zoom version="2">1.875</zoom></view></subsheet><stage stageid="4c579205-37d9-4762-b373-705845ae8cf5" name="Start" type="Start"><display x="15" y="-105" /><inputs><input type="collection" name="CompanysWithRequest" narrative="Unternehmen, die bereits einen Antrag eingereicht haben" stage="CompanysWithRequest" /></inputs><onsuccess>3d873a77-97b4-4993-80fe-e38a98d6fcfe</onsuccess></stage><stage stageid="74707f24-531f-444c-a800-6cba2a4f8acd" name="End" type="End"><display x="15" y="90" /></stage><stage stageid="73bc15e6-ce5d-4e09-a656-4a83ae0b3626" name="Stage1" type="ProcessInfo"><display x="-165" y="-45" w="180" h="150" /></stage><stage stageid="723cf450-8492-4e6a-9c6d-e7368983f8ba" name="CheckList" type="SubSheetInfo"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><narrative>Prüfe vorhandene Elemente, ob diese in der Liste der Antragssteller vorkommen.</narrative><display x="-255" y="-105" w="150" h="90" /></stage><stage stageid="28f0f4b8-faa3-4fc1-b81e-72018aca1d16" name="Start" type="Start"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><display x="15" y="-105" /><onsuccess>7c85acf7-0e63-4203-a5a5-2791cbe14551</onsuccess></stage><stage stageid="3d873a77-97b4-4993-80fe-e38a98d6fcfe" name="CheckList" type="SubSheet"><loginhibit onsuccess="true" /><display x="15" y="-15" /><onsuccess>74707f24-531f-444c-a800-6cba2a4f8acd</onsuccess><processid>0d20e369-5e7a-49e1-9eff-774905f7943f</processid></stage><stage stageid="7c85acf7-0e63-4203-a5a5-2791cbe14551" name="GetNextCompany" type="Action"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><narrative>This action gets the next item to be worked from the queue, returning its details and locking it so no other case can work it.

Items with higher priorities (lower numerical value) are processed first. Where the priority is the same, the next item is the one that has been in the queue the longest,  is not already locked, and is not already completed.

The Item ID returned is used to make further calls to update the work status for that item. It may be empty, in which case there are no items available. This can mean either a) the queue is empty, or b) the queue is not running. This mechanism can be used to cleanly stop all processes working a particular queue at the end of the next case. Items that have a 'deferred' time set will not be returned unless that time has been reached.</narrative><display x="15" y="-45" /><inputs><input type="text" name="Queue Name" friendlyname="Queue Name" narrative="The name of the queue" expr="&quot;PotentialCompanys&quot;" /><input type="text" name="Key Filter" friendlyname="Key Filter" narrative="Optionally, a key value to filter by. Only items with this key value will be considered." expr="" /><input type="text" name="Tag Filter" friendlyname="Tag Filter" narrative="Optionally, a tag mask to filter by. This can consist of any number of tag searches - each term can be separated by a semi-colon and they are all applied to the search (ie. they are AND'ed terms not OR'ed terms). For example, &quot;Account: Joint; -Balance: Overdrawn; Card: *Visa*&quot; will include any items which match all the terms, ie. every item must have an 'Account: Joint' tag applied, no item can have a 'Balance: Overdrawn' tag applied, every item must have a tag applied which starts with 'Card: ' and then contains the text 'Visa'." expr="" /></inputs><outputs><output type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item retrieved - empty if there are none available." stage="Company ID" /><output type="collection" name="Data" friendlyname="Data" narrative="The data associated with the item - a single collection row." stage="Data" /><output type="text" name="Status" friendlyname="Status" narrative="The status of the item." stage="" /><output type="number" name="Attempts" friendlyname="Attempts" narrative="The number of attempts already made to work this item." stage="" /></outputs><onsuccess>29c9c161-83e6-4f45-b912-7175d617be25</onsuccess><resource object="Blueprism.Automate.clsWorkQueuesActions" action="Get Next Item" /></stage><stage stageid="29c9c161-83e6-4f45-b912-7175d617be25" name="Got Item?" type="Decision"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><narrative>War noch ein Unternehmen in der Liste verfügbar?</narrative><display x="15" y="15" /><decision expression="[Company ID]&lt;&gt;&quot;&quot;" /><ontrue>14bd1da3-a060-42b9-88c5-78b9a85b5d10</ontrue><onfalse>2e4ebb4c-575d-467b-aea6-994611d5a232</onfalse></stage><stage stageid="c0480169-c81a-4e61-ac09-b414c4faf0a0" name="Company ID" type="Data"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><display x="-180" y="-15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c4e2da37-7647-4a82-accb-729276120c31" name="Data" type="Collection"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><narrative>Daten des aktuellen Unternehmens</narrative><display x="-180" y="15" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="2e4ebb4c-575d-467b-aea6-994611d5a232" name="End1" type="End"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><display x="120" y="15" /></stage><stage stageid="14bd1da3-a060-42b9-88c5-78b9a85b5d10" name="CheckIfAlreadyRequested" type="Action"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><narrative>Überprüft, ob das Unternehmen bereits in der Liste der Antragssteller enthalten ist.</narrative><display x="15" y="75" /><inputs><input type="collection" name="Collection" friendlyname="Collection" narrative="Required : The collection to search" expr="[CompanysWithRequest]" /><input type="text" name="Column Name" friendlyname="Column Name" narrative="Required : The name of the column to search" expr="&quot;Company ID&quot;" /><input type="text" name="Exact Value" friendlyname="Exact Value" narrative="Optional : The exact value to search for - this is case insensitive" expr="[Data.Company ID]" /><input type="text" name="Regex" friendlyname="Regex" narrative="Optional : The regular expression to search for - this is case sensitive unless specified otherwise in the regular expression using &quot;(?i)&quot;" expr="" /></inputs><outputs><output type="flag" name="Contains Search Term" friendlyname="Contains Search Term" narrative="Flag indicating if the collection found the given search term or not" stage="Requested" /><output type="collection" name="Groups" friendlyname="Groups" narrative="The groups defined in the regular expression when it is applied to the found term" stage="" /></outputs><onsuccess>338b291b-4470-446f-997f-130b9ebecd72</onsuccess><resource object="Utility - Collection Manipulation" action="Collection Contains Value" /></stage><stage stageid="53d5d4bf-c09b-4687-a907-ceaaa8a950a5" name="Requested" type="Data"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><display x="90" y="75" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="338b291b-4470-446f-997f-130b9ebecd72" name="AlreadyRequested?" type="Decision"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><narrative>Hat das aktuelle Unternehmen bereits einen Antrag gestellt?</narrative><display x="15" y="135" /><decision expression="[Requested]=True" /><ontrue>1a27341d-4596-4603-b308-ef1c136bbec8</ontrue><onfalse>8486a0bf-e417-43c6-ac78-e1a00a2a12ea</onfalse></stage><stage stageid="1a27341d-4596-4603-b308-ef1c136bbec8" name="Exception" type="Action"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><narrative>Marks the item as an exception, optionally retrying it by cloning the item and returning the ID of the clone. The item must be 'owned' by the calling process - i.e. it must have been retrieved using Get Next Item.</narrative><display x="105" y="135" /><inputs><input type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item to mark" expr="[Company ID]" /><input type="text" name="Exception Reason" friendlyname="Exception Reason" narrative="A description of the reason for the exception" expr="&quot;Unternehmen hat bereits einen Antrag gestellt!&quot;" /><input type="flag" name="Retry" friendlyname="Retry" narrative="Whether or not to retry the item, up to the maximum number of attempts specified for the queue. Optional - if not specified, the item will be retried" expr="" /><input type="flag" name="Keep Locked" friendlyname="Keep Locked" narrative="Whether or not the clone of the item should remain locked after the exception has been registered and the item is retried. Optional - default is False" expr="" /></inputs><outputs><output type="text" name="New Item ID" friendlyname="New Item ID" narrative="The Item ID of the newly cloned item. This item will be locked if 'Keep Locked' is True. This will be empty if no item was cloned (ie. the item was not retried." stage="" /></outputs><onsuccess>9cbb4ec5-1522-4b98-8626-042283ecefbe</onsuccess><resource object="Blueprism.Automate.clsWorkQueuesActions" action="Mark Exception" /></stage><stage stageid="ff97e3ab-a784-4c6d-846c-a9a3123081c2" name="AddToInformationQueue" type="Action"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><narrative>The Data collection contains the items to be added to the queue. The collection may contain single or multiple rows, with each representing an item to be added.

If there is a failure during the process, the queue will be unchanged - i.e. no rows will be loaded even if the error occurred on the last one.

If Defer Until is specified, the items will not be available to be worked until then. Otherwise, they are available immediately.

If the queue has a key field defined, an item added has key data longer than the maximum permitted 255 characters, an error will occur</narrative><display x="105" y="195" /><inputs><input type="text" name="Queue Name" friendlyname="Queue Name" narrative="The name of the queue to add items to" expr="&quot;CompanysWithoutRequest&quot;" /><input type="collection" name="Data" friendlyname="Data" narrative="A collection containing the data, one row for each item to be added" expr="[Data]" /><input type="datetime" name="Defer Until" friendlyname="Defer Until" narrative="Optionally, the date/time the new item(s) should be deferred until" expr="" /><input type="number" name="Priority" friendlyname="Priority" narrative="Optionally, the priority for the new item(s). Lower numbers represent higher priorities. The default is 0." expr="" /><input type="text" name="Tags" friendlyname="Tags" narrative="Optionally, a semi-colon-separated set of tags to apply to the queue item(s)" expr="" /><input type="text" name="Status" friendlyname="Status" narrative="Optionally, the initial status required of the work queue item(s) " expr="" /><input type="number" name="Batch Size" friendlyname="Batch Size" narrative="Optionally, the batch size to use when adding many items to the queue.  A Value of 0 will process all items in one batch.  An empty field will use the default batch size of 1000." expr=""><validator type="BluePrism.AutomateProcessCore.RangeParameterValidation" parameter="0:25000" /></input></inputs><outputs><output type="collection" name="Item IDs" friendlyname="Item IDs" narrative="The IDs of the items which have been added to the queue, in the order of the collection of data passed that was input" stage="" /></outputs><onsuccess>22b7273e-619f-47a5-834e-d27e774d46c2</onsuccess><resource object="Blueprism.Automate.clsWorkQueuesActions" action="Add To Queue" /></stage><stage stageid="f9ef9b2f-a6a3-4e5c-8ae4-7b8230efa94a" name="Anchor3" type="Anchor"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><display x="270" y="-45" w="10" h="10" /><onsuccess>7c85acf7-0e63-4203-a5a5-2791cbe14551</onsuccess></stage><stage stageid="9cbb4ec5-1522-4b98-8626-042283ecefbe" name="Anchor4" type="Anchor"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><display x="270" y="135" w="10" h="10" /><onsuccess>f9ef9b2f-a6a3-4e5c-8ae4-7b8230efa94a</onsuccess></stage><stage stageid="fb68676d-96be-4881-bc1a-57a26702b00c" name="CompanysWithRequest" type="Collection"><narrative>Unternehmen, die bereits einen Antrag gestellt haben</narrative><display x="-105" y="60" /><datatype>collection</datatype><alwaysinit /><collectioninfo><field name="Company ID" type="text" /><field name="Name" type="text" /><field name="StreetAndNumber" type="text" /><field name="PLZ" type="text" /><field name="City" type="text" /><field name="Branche" type="text" /></collectioninfo><initialvalue><row><field name="Company ID" type="text" value="Fri-04315-MereKr2" /><field name="Name" type="text" value="Meckel &amp; Friseure" /><field name="StreetAndNumber" type="text" value="Krönerstr. 2" /><field name="PLZ" type="text" value="04315 " /><field name="City" type="text" value="Leipzig" /><field name="Branche" type="text" value="Friseure" /></row></initialvalue></stage><stage stageid="8486a0bf-e417-43c6-ac78-e1a00a2a12ea" name="Anchor5" type="Anchor"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><display x="15" y="195" w="10" h="10" /><onsuccess>ff97e3ab-a784-4c6d-846c-a9a3123081c2</onsuccess></stage><stage stageid="31d7975c-6827-4594-ad39-65d5da00cfdb" name="Anchor6" type="Anchor"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><display x="270" y="195" w="10" h="10" /><onsuccess>9cbb4ec5-1522-4b98-8626-042283ecefbe</onsuccess></stage><stage stageid="22b7273e-619f-47a5-834e-d27e774d46c2" name="Completed" type="Action"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><loginhibit onsuccess="true" /><narrative>Marks the item as completed, by updating the Completed timestamp and setting Locked to null. The item must be 'owned' by the calling process - i.e. it must have been retrieved using Get Next Item.</narrative><display x="195" y="195" /><inputs><input type="text" name="Item ID" friendlyname="Item ID" narrative="The ID of the item to mark" expr="[Company ID]" /></inputs><onsuccess>31d7975c-6827-4594-ad39-65d5da00cfdb</onsuccess><resource object="Blueprism.Automate.clsWorkQueuesActions" action="Mark Completed" /></stage><stage stageid="6eb1186d-9ea1-42a9-9791-8ee1040d7e76" name="Get Elements Note" type="Note"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><narrative>Beziehen des nächsten Elements der zu verarbeitenden Queue.
Falls kein Element (mehr) vorhanden --&gt; Ende</narrative><display x="-60" y="-15" w="90" h="90" /></stage><stage stageid="fa5d6a5b-b88e-4d91-8632-dad13addd990" name="Check Company Noite" type="Note"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><narrative>Prüfung, ob das Unternehmen in der Liste der Antragssteller vorkommt. Ergebnis wird im Data item "Requested" gespeichert.</narrative><display x="-60" y="75" w="90" h="60" /></stage><stage stageid="98caa589-46f0-42c4-bf11-1cf64333fdd5" name="Requested Question Note" type="Note"><subsheetid>0d20e369-5e7a-49e1-9eff-774905f7943f</subsheetid><narrative>Ist das Unternehmen vorgekommen, ist keine weitere Bearbeitung notwendig --&gt; Exception mit entsprechendem Hinweis
Ist das Unternehmen NICHT vorgekommen, wird es in die nächste Queue kopiert zur weiteren Verarbeitung und als abgeschlossen markiert.</narrative><display x="-75" y="180" w="120" h="120" /></stage></process></process>
        <object id="b953edbf-b0e0-4d4c-9ee5-d723397f9e45" name="ATCS-Compression &amp; Extraction" xmlns="http://www.blueprism.co.uk/product/process"><process name="ATCS-Compression &amp; Extraction" version="1.0" bpversion="6.10.1.35171" narrative="" byrefcollection="true" type="object" runmode="Background"><appdef><element name="Application Root"><id>bcb24888-8991-402a-acc3-ab1015f27e99</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>-202</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view><preconditions><condition narrative="The following S/W must be installed before execution" /><condition narrative="1. 7-Zip for create ZIP,TAR,WIM,,XZ,and 7z files" /></preconditions><endpoint narrative="" /><subsheet subsheetid="ada944c3-9a9e-40ba-b795-9f838b3795e1" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="07e27e88-83e8-40ea-bf25-2ed290ead7c8" type="Normal" published="True"><name>Create Zip </name><view><camerax>70</camerax><cameray>-84</cameray><zoom version="2">1.5625</zoom></view></subsheet><subsheet subsheetid="10310079-c744-4144-97f0-d98d1a3cacc7" type="Normal" published="True"><name>CreateXZ</name><view><camerax>141</camerax><cameray>-126</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="1e664d5c-3bfc-4a50-aff1-bdda0f76cdda" type="Normal" published="True"><name>Extract Compressed File</name><view><camerax>16</camerax><cameray>-84</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d28c7c4f-aef6-402b-9589-4c88aee357dc" type="Normal" published="True"><name>Create Bzip2</name><view><camerax>141</camerax><cameray>-126</cameray><zoom version="2">1.875</zoom></view></subsheet><subsheet subsheetid="c69ee2dd-d514-44e7-9df2-e80b3972792c" type="Normal" published="True"><name>Create GZip</name><view><camerax>141</camerax><cameray>-147</cameray><zoom version="2">1.875</zoom></view></subsheet><subsheet subsheetid="bc9042c6-3e04-487a-93f1-7fea61f52413" type="Normal" published="True"><name>CreateTar</name><view><camerax>0</camerax><cameray>-143</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="63594ef5-1c46-45a2-a098-cf4772b9a563" type="Normal" published="True"><name>CreateWim</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="23ae9094-9d85-422d-a800-27777d4d1cea" type="Normal" published="True"><name>Create 7z</name><view><camerax>291</camerax><cameray>-99</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="285cf092-2d2f-4251-9878-9ff307eec268" name="Start" type="Start"><loginhibit /><display x="15" y="-90" /><onsuccess>d1038e88-40ed-440c-9530-855104a33603</onsuccess></stage><stage stageid="d1038e88-40ed-440c-9530-855104a33603" name="End" type="End"><loginhibit /><display x="15" y="90" /></stage><stage stageid="c4eca8d7-a586-44c6-a2db-974f61e1c53a" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /><references><reference>System.dll</reference><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference><reference>System.IO.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Data</import><import>System.IO</import></imports><language>csharp</language><globalcode><![CDATA[]]></globalcode><code><![CDATA[public static String checkLengthisValid(String input, String dest, String proocesspath)
		{
			if (input.Length < 1)
			{
				throw new Exception("Blank path for input path");
			}
			else if (dest.Length < 1)
			{
				throw new Exception("Blank path for destination path");
			}
			else if (proocesspath.Length < 1)
			{
				throw new Exception("Blank path for proccess path");
			}
			else
			{
				return "Success";
			}
		}

		public bool Create7z(String inputpath, String destinationpath, String processPath, String compressedFileName)
		{
			inputpath = @"" + inputpath;
			processPath = @"" + processPath;
			destinationpath = @"" + destinationpath;

			if (checkLengthisValid(inputpath, destinationpath, processPath).Equals("Success"))
			{


				FileInfo fi = new FileInfo(inputpath);
				if (verifyFileAlreadyExists(inputpath, destinationpath, compressedFileName, ".7z"))
				{
					throw new Exception("Compressed file already exists");
				}
				if (!Directory.Exists(destinationpath))
				{
					throw new Exception("Invalid Path : " + destinationpath);
				}
				if ((Directory.Exists(inputpath)) || (File.Exists(inputpath)))
				{
				}
				else
				{
					throw new Exception("Invalid Path : " + inputpath);
				}
				var arguments = "";
				if (compressedFileName.Length > 0)
				{
					arguments = string.Format("a \"{0}\" \"{1}\"", destinationpath + @"\" + compressedFileName + ".7z", inputpath);
				}
				else
				{
					arguments = string.Format("a \"{0}\" \"{1}\"", destinationpath + @"\" + fi.Name + ".7z", inputpath);
				}
				var processStartInfo = new System.Diagnostics.ProcessStartInfo
				{
					ErrorDialog = false,
					UseShellExecute = true,
					Arguments = arguments,
					FileName = processPath,
					CreateNoWindow = false,
					WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
				};
				var process = System.Diagnostics.Process.Start(processStartInfo);
				process?.WaitForExit();
				return true;
			}
			else
			{
				return false;
			}

		}
		public bool Createzip(String inputpath, String destinationpath, String processPath, String compressedFileName)
		{

			inputpath = @"" + inputpath;
			processPath = @"" + processPath;
			destinationpath = @"" + destinationpath;

			if (checkLengthisValid(inputpath, destinationpath, processPath).Equals("Success"))
			{
				FileInfo fi = new FileInfo(inputpath);
				if (verifyFileAlreadyExists(inputpath, destinationpath, compressedFileName, ".zip"))
				{
					throw new Exception("Compressed file already exists");
				}

				if (inputpath.Length < 1 || destinationpath.Length < 1)
				{
					throw new Exception("Blank Path : ");
				}
				if (!Directory.Exists(destinationpath))
				{
					throw new Exception("Invalid Path : " + destinationpath);
				}
				if ((Directory.Exists(inputpath)) || (File.Exists(inputpath)))
				{
				}
				else
				{
					throw new Exception("Invalid Path : " + inputpath);
				}
				var arguments = "";

				if (compressedFileName.Length > 0)
				{
					arguments = string.Format("a \"{0}\" \"{1}\"", destinationpath + @"\" + compressedFileName + ".zip", inputpath);

				}
				else
				{
					arguments = string.Format("a \"{0}\" \"{1}\"", destinationpath + @"\" + fi.Name + ".zip", inputpath);
				}

				var processStartInfo = new System.Diagnostics.ProcessStartInfo
				{
					ErrorDialog = false,
					UseShellExecute = true,
					Arguments = arguments,
					FileName = processPath,
					CreateNoWindow = false,
					WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
				};
				var process = System.Diagnostics.Process.Start(processStartInfo);
				process?.WaitForExit();
				return true;
			}
			else
			{
				return false;
			}

		}

		public bool Createtar(String inputpath, String destinationpath, String processPath, String compressedFileName)
		{
			inputpath = @"" + inputpath;
			processPath = @"" + processPath;
			destinationpath = @"" + destinationpath;

			if (checkLengthisValid(inputpath, destinationpath, processPath).Equals("Success"))
			{
				FileInfo fi = new FileInfo(inputpath);
				if (verifyFileAlreadyExists(inputpath, destinationpath, compressedFileName, ".tar"))
				{
					throw new Exception("Compressed file already exists");
				}
				if (!Directory.Exists(destinationpath))
				{
					throw new Exception("Invalid Path : " + destinationpath);
				}
				if ((Directory.Exists(inputpath)) || (File.Exists(inputpath)))
				{
				}
				else
				{
					throw new Exception("Invalid Path : " + inputpath);
				}

				var arguments = "";
				if (compressedFileName.Length > 0)
				{
					arguments = string.Format("a \"{0}\" \"{1}\"", destinationpath + @"\" + compressedFileName + ".tar", inputpath);
				}
				else
				{
					arguments = string.Format("a \"{0}\" \"{1}\"", destinationpath + @"\" + fi.Name + ".tar", inputpath);
				}
				var processStartInfo = new System.Diagnostics.ProcessStartInfo
				{
					ErrorDialog = false,
					UseShellExecute = true,
					Arguments = arguments,
					FileName = processPath,
					CreateNoWindow = false,
					WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
				};
				var process = System.Diagnostics.Process.Start(processStartInfo);
				process?.WaitForExit();
				return true;
			}
			else
			{
				return false;
			}
		}

		public bool Createwim(String inputpath, String destinationpath, String processPath, String compressedFileName)
		{
			inputpath = @"" + inputpath;
			processPath = @"" + processPath;
			destinationpath = @"" + destinationpath;
			if (checkLengthisValid(inputpath, destinationpath, processPath).Equals("Success"))
			{
				FileInfo fi = new FileInfo(inputpath);
				if (verifyFileAlreadyExists(inputpath, destinationpath, compressedFileName, ".wim"))
				{
					throw new Exception("Compressed file already exists");
				}
				if (!Directory.Exists(destinationpath))
				{
					throw new Exception("Invalid Path : " + destinationpath);
				}
				if ((Directory.Exists(inputpath)) || (File.Exists(inputpath)))
				{
				}
				else
				{
					throw new Exception("Invalid Path : " + inputpath);
				}
				var arguments = "";
				if (compressedFileName.Length > 0)
				{
					arguments = string.Format("a \"{0}\" \"{1}\"", destinationpath + @"\" + compressedFileName + ".wim", inputpath);
				}
				else
				{
					arguments = string.Format("a \"{0}\" \"{1}\"", destinationpath + @"\" + fi.Name + ".wim", inputpath);
				}
				var processStartInfo = new System.Diagnostics.ProcessStartInfo
				{
					ErrorDialog = false,
					UseShellExecute = true,
					Arguments = arguments,
					FileName = processPath,
					CreateNoWindow = false,
					WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
				};
				var process = System.Diagnostics.Process.Start(processStartInfo);
				process?.WaitForExit();
				return true;
			}
			else
			{
				return false;
			}

		}
		public bool CreateXZ(String inputpath, String destinationpath, String processPath, String compressedFileName)
		{
			processPath = @"" + processPath;
			destinationpath = @"" + destinationpath;
			inputpath = @"" + inputpath;
			if (checkLengthisValid(inputpath, destinationpath, processPath).Equals("Success"))
			{
				if (verifyFileAlreadyExists(inputpath, destinationpath, compressedFileName, ".xz"))
				{
					throw new Exception("Compressed file already exists");
				}
				if (!Directory.Exists(destinationpath))
				{
					throw new Exception("Invalid Path : " + destinationpath);
				}
				if ((Directory.Exists(inputpath)) || (File.Exists(inputpath)))
				{
				}
				else
				{
					throw new Exception("Invalid Path : " + inputpath);
				}


				if (File.Exists(inputpath))
				{
					processPath = @"" + processPath;
					destinationpath = @"" + destinationpath;
					FileInfo fi = new FileInfo(inputpath);
					var arguments = "";
					if (compressedFileName.Length > 0)
					{
						arguments = string.Format("a -tgzip \"{0}\" \"{1}\"", destinationpath + @"\" + compressedFileName + ".xz", inputpath);
					}
					else
					{
						arguments = string.Format("a -tgzip \"{0}\" \"{1}\"", destinationpath + @"\" + fi.Name + ".xz", inputpath);
					}
					var processStartInfo = new System.Diagnostics.ProcessStartInfo
					{
						ErrorDialog = false,
						UseShellExecute = true,
						Arguments = arguments,
						FileName = processPath,
						CreateNoWindow = false,
						WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
					};
					var process = System.Diagnostics.Process.Start(processStartInfo);
					process?.WaitForExit();
				}
				else
				{
					throw new Exception("Invalid input path or 7zip extension 'xz' only work with files");
				}
				return true;
			}
			else
			{
				return false;
			}

		}
		public bool CreateBZIP2(String inputpath, String destinationpath, String processPath, String compressedFileName)
		{
			processPath = @"" + processPath;
			destinationpath = @"" + destinationpath;
			inputpath = @"" + inputpath;
			if (checkLengthisValid(inputpath, destinationpath, processPath).Equals("Success"))
			{
				if (verifyFileAlreadyExists(inputpath, destinationpath, compressedFileName, ".bz2"))
				{
					throw new Exception("Compressed file already exists");
				}
				if (!Directory.Exists(destinationpath))
				{
					throw new Exception("Invalid Path : " + destinationpath);
				}
				if ((Directory.Exists(inputpath)) || (File.Exists(inputpath)))
				{
				}
				else
				{
					throw new Exception("Invalid Path : " + inputpath);
				}
				if (File.Exists(inputpath))
				{

					FileInfo fi = new FileInfo(inputpath);
					var arguments = "";
					if (compressedFileName.Length > 0)
					{
						arguments = string.Format("a -tgzip \"{0}\" \"{1}\"", destinationpath + @"\" + compressedFileName + ".bz2", inputpath);
					}
					else
					{
						arguments = string.Format("a -tgzip \"{0}\" \"{1}\"", destinationpath + @"\" + fi.Name + ".bz2", inputpath);
					}
					var processStartInfo = new System.Diagnostics.ProcessStartInfo
					{
						ErrorDialog = false,
						UseShellExecute = true,
						Arguments = arguments,
						FileName = processPath,
						CreateNoWindow = false,
						WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
					};
					var process = System.Diagnostics.Process.Start(processStartInfo);
					process?.WaitForExit();
				}
				else
				{
					throw new Exception("Invalid input path or 7zip extension 'bzip2' only work with files");
				}
				return true;
			}
			else
			{
				return false;
			}


		}
		public bool CreateGZIP(String inputpath, String destinationpath, String processPath, String compressedFileName)
		{
			processPath = @"" + processPath;
			destinationpath = @"" + destinationpath;
			inputpath = @"" + inputpath;

			if (checkLengthisValid(inputpath, destinationpath, processPath).Equals("Success"))
			{
				if (verifyFileAlreadyExists(inputpath, destinationpath, compressedFileName, ".gz"))
				{
					throw new Exception("Compressed file already exists");
				}
				if (!Directory.Exists(destinationpath))
				{
					throw new Exception("Invalid Path : " + destinationpath);
				}
				if ((Directory.Exists(inputpath)) || (File.Exists(inputpath)))
				{
				}
				else
				{
					throw new Exception("Invalid Path : " + inputpath);
				}
				processPath = @"" + processPath;
				destinationpath = @"" + destinationpath;
				inputpath = @"" + inputpath;
				if (File.Exists(inputpath))
				{

					FileInfo fi = new FileInfo(inputpath);
					var arguments = "";
					if (compressedFileName.Length > 0)
					{
						arguments = string.Format("a -tgzip \"{0}\" \"{1}\"", destinationpath + @"\" + compressedFileName + ".gz", inputpath);
					}
					else
					{
						arguments = string.Format("a -tgzip \"{0}\" \"{1}\"", destinationpath + @"\" + fi.Name + ".gz", inputpath);
					}
					var processStartInfo = new System.Diagnostics.ProcessStartInfo
					{
						ErrorDialog = false,
						UseShellExecute = true,
						Arguments = arguments,
						FileName = processPath,
						CreateNoWindow = false,
						WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
					};
					var process = System.Diagnostics.Process.Start(processStartInfo);
					process?.WaitForExit();
				}
				else
				{
					throw new Exception("Invalid input path or 7zip extension '.gz' only work with files");
				}
				return true;
			}
			else
			{
				return false;
			}
		}
		public static void ExtractFile(String inputpath, String destinationpath, String processPath)
		{
			processPath = @"" + processPath;
			destinationpath = @"" + destinationpath;
			inputpath = @"" + inputpath;

			if (checkLengthisValid(inputpath, destinationpath, processPath).Equals("Success"))
			{
			if (File.Exists(@"" + inputpath))
			{
				FileInfo fi = new FileInfo(inputpath);
				String fileNameWithoutExtension=fi.Name.Replace(fi.Extension, "");
				String filePathWithoutExtension=fi.FullName.Replace(fi.Extension, "");
				DirectoryInfo di = new DirectoryInfo(destinationpath+@"\"+fileNameWithoutExtension);
				if(di.Exists)
				{
					throw new Exception("Extracted folder already exists");
				}
				else if(File.Exists(destinationpath+@"\"+fileNameWithoutExtension))
				{
					throw new Exception("Extracted file already exists");
				}	
				else
				{
					
					var processStartInfo = new System.Diagnostics.ProcessStartInfo
					{
						ErrorDialog = false,
						UseShellExecute = true,
						
						Arguments = string.Format("x \"{0}\" -y -o\"{1}\"", inputpath, destinationpath),
						FileName = processPath,
						CreateNoWindow = false,


						WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
					};

					var process = System.Diagnostics.Process.Start(processStartInfo);
					process?.WaitForExit();
				}
				
			}
			else
			{
				throw new FileNotFoundException("File does not exist : " + inputpath);
			}
		}


		}
		public bool verifyFileAlreadyExists(String inputpath, String destinationpath, String compressedFileName, String extn)
		{
			if (compressedFileName.Length > 0)
			{
				if (File.Exists(destinationpath + @"\" + compressedFileName + extn))
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			else
			{

				FileInfo fi = new FileInfo(inputpath);
				if (File.Exists(destinationpath + @"\" + fi.Name + extn))
				{
					return true;
				}
				else
				{
					return false;
				}
			}
		}]]></code></stage><stage stageid="a44e063c-bbbb-4da9-b2ed-df99ce666452" name="Clean Up" type="SubSheetInfo"><subsheetid>ada944c3-9a9e-40ba-b795-9f838b3795e1</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="1c00763b-c422-43a1-a429-48ddc18a0b09" name="Start" type="Start"><subsheetid>ada944c3-9a9e-40ba-b795-9f838b3795e1</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>2bb5b972-2e48-4333-98a4-1c2ec9360b98</onsuccess></stage><stage stageid="2bb5b972-2e48-4333-98a4-1c2ec9360b98" name="End" type="End"><subsheetid>ada944c3-9a9e-40ba-b795-9f838b3795e1</subsheetid><loginhibit /><display x="15" y="90" /></stage><stage stageid="0514df7d-2b6e-45cf-9303-6938ef2e9ef5" name="Note1" type="Note"><subsheetid>ada944c3-9a9e-40ba-b795-9f838b3795e1</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="b0205c0e-4dc8-4e61-bcef-de26892da27a" name="Note2" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="aa94a993-d66b-46b0-9370-044283344917" name="CreateTar" type="SubSheetInfo"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><narrative>Provides functionality to create TAR file of any file or folder .

Params: 
- DestinationPath-Text : location where compressed file has to be created
-InputPath-Text: path of the input file or folder.
-ProcessPath-Text : 7zip..exe path
-CompressedFileName-Text: Optional

Return :
-Succes-Bool: True if TAR file is creatad successfully</narrative><display x="-195" y="-105" w="180" h="150" /></stage><stage stageid="1fdc5b56-1788-440c-877e-fe41c9719cdd" name="Create Tar" type="Code"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><loginhibit /><display x="15" y="-30" /><inputs><input type="text" name="InputPath" expr="[InputPath]" /><input type="text" name="DestinationPath" expr="[DestinationPath]" /><input type="text" name="processpath" expr="[processPath]" /><input type="text" name="FileName" expr="[CompressedFileName]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>85119676-3d58-4506-876b-99fe169b58ef</onsuccess><code><![CDATA[Success=Createtar(InputPath,DestinationPath,processpath,FileName);]]></code></stage><stage stageid="211b98e7-1341-4c55-930e-1f33e3db8931" name="CreateWim" type="SubSheetInfo"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><narrative>Provides functionality to create WIM file of any file or folder .

Params: 
- DestinationPath-Text : location where compressed file has to be created
-InputPath-Text: path of the input file or folder.
-ProcessPath-Text : 7zip..exe path
-CompressedFileName-Text: Optional

Return :
-Succes-Bool: True if  WIM file is creatad successfully</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="916cc073-6b89-4c73-8f7f-3b8815b16b8c" name="Create Wim" type="Code"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="InputPath" expr="[InputPath]" /><input type="text" name="DestinationPath" expr="[DestinationPath]" /><input type="text" name="processpath" expr="[processPath]" /><input type="text" name="FileName" expr="[CompressedFileName]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>1c779ea5-102d-469f-a9c6-eec84e067631</onsuccess><code><![CDATA[Success=Createwim(InputPath,DestinationPath,processpath,FileName);]]></code></stage><stage stageid="9a81f4be-31cc-4ca9-9530-a5cf25574749" name="Create 7z" type="SubSheetInfo"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><narrative>Provides functionality to create 7z file of any file or folder .

Params: 
- DestinationPath-Text : location where compressed file has to be created
-InputPath-Text: path of the input file or folder.
-ProcessPath-Text : 7zip..exe path
-CompressedFileName-Text: Optional
Return :
-Succes-Bool: True if 7z file is creatad successfully</narrative><display x="-195" y="-105" w="150" h="180" /></stage><stage stageid="ad333244-977b-447f-9f51-3a3a3e34c43c" name="Extract Compressed File" type="SubSheetInfo"><subsheetid>1e664d5c-3bfc-4a50-aff1-bdda0f76cdda</subsheetid><narrative>Provides functionality to decompress compressed files

Params: 
- DestinationPath-Text : location where compressed file has to be extracted or decompress
-InputPath-Text: path of the icompressed nput file .
-ProcessPath-Text : 7zip..exe path

Return :
-Succes-Bool: True if  compressed file is extracted successfully</narrative><display x="-390" y="-180" w="240" h="210" /></stage><stage stageid="8b42d302-a987-413d-baed-8cb9fc0b5761" name="Start" type="Start"><subsheetid>1e664d5c-3bfc-4a50-aff1-bdda0f76cdda</subsheetid><loginhibit /><display x="-60" y="-135" /><inputs><input type="text" name="Process path" narrative="File path of 7z.exe." stage="processPath" /><input type="text" name="InputPatth" narrative="File path of compressed file." stage="InputPath" /><input type="text" name="TargetFolder" narrative="The location where compressed file has to be exracted." stage="TargetFolder" /></inputs><onsuccess>4461962e-54c2-4c0c-8ca0-b0cab1ece0db</onsuccess></stage><stage stageid="4461962e-54c2-4c0c-8ca0-b0cab1ece0db" name="Extract File" type="Code"><subsheetid>1e664d5c-3bfc-4a50-aff1-bdda0f76cdda</subsheetid><loginhibit /><display x="-60" y="-45" /><inputs><input type="text" name="InputPath" expr="[InputPath]" /><input type="text" name="TargetFolder" expr="[TargetFolder]" /><input type="text" name="processpath" expr="[processPath]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>31c10532-555f-46cb-836b-01e6284495cb</onsuccess><code><![CDATA[ExtractFile(InputPath,TargetFolder,processpath);
	Success=true;]]></code></stage><stage stageid="c2a39e72-dbb9-4ed4-a3d5-bfa2e5eab656" name="CreateXZ" type="SubSheetInfo"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><narrative>Provides functionality to create XZ file of any file. It only works with files

Params: 
- DestinationPath-Text : location where compressed file has to be created
-InputPath-Text: path of the input file or folder.
-ProcessPath-Text : 7zip..exe path
-CompressedFileName-Text: Optional

Return :
-Succes-Bool: True if XZ file is creatad successfully</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="4c149610-e4e4-48af-80ce-2ddf73da0209" name="Create XZ" type="Code"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><loginhibit /><display x="30" y="-60" /><inputs><input type="text" name="InputPath" expr="[InputPath]" /><input type="text" name="DestinationPath" expr="[DestinationPath]" /><input type="text" name="processpath" expr="[processPath]" /><input type="text" name="FileName" expr="[CompressedFileName]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>0a9564bc-991e-4ad1-80ac-c077e2a7f18d</onsuccess><code><![CDATA[Success=CreateXZ(InputPath,DestinationPath,processpath,FileName);
	]]></code></stage><stage stageid="261f1785-774c-4855-a8ae-ea1a4a485001" name="Success" type="Data"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><display x="300" y="-90" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1a84cc34-ea9f-42c5-82b7-bfa44c5416a7" name="Create Zip " type="SubSheetInfo"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><narrative>Provides functionality to create zip file of any file or folder .

Params: 
- DestinationPath-Text : location where compressed file has to be created
-InputPath-Text: path of the input file or folder.
-ProcessPath-Text : 7zip..exe path
-CompressedFileName-Text: Optional

Return :
-Succes-Bool: True if zip file is creatad successfully</narrative><display x="-390" y="-165" w="180" h="150" /></stage><stage stageid="c4b50336-27ee-405c-b651-4903bf317513" name="Create Zip using 7 zip" type="Code"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><loginhibit /><display x="-60" y="-45" /><inputs><input type="text" name="InputPath" expr="[InputPath]" /><input type="text" name="DestinationPath" expr="[DestinationPath]" /><input type="text" name="processpath" expr="[processPath]" /><input type="text" name="CompressedFileName" expr="[CompressedFileName]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>080267b7-8b11-4598-b496-5fe7a8548379</onsuccess><code><![CDATA[Success=Createzip(InputPath,DestinationPath,processpath,CompressedFileName);]]></code></stage><stage stageid="03179685-40f8-4dad-9067-1c519ab432ef" name="Output" type="Block"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><loginhibit /><display x="225" y="-135" w="180" h="90" /><font family="Segoe UI" size="10" style="Regular" color="99CC00" /></stage><stage stageid="7c257446-fed5-4940-83a5-49f8fedcd046" name="Success" type="Data"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><display x="315" y="15" w="240" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="235c523c-2928-421f-9fd4-73c5775bface" name="Input" type="Block"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><loginhibit /><display x="150" y="-225" w="390" h="165" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="2d8b1ae5-1a4e-473c-9055-07e06a3a85c9" name="Output" type="Block"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><loginhibit /><display x="150" y="-30" w="390" h="105" /><font family="Segoe UI" size="10" style="Regular" color="99CC00" /></stage><stage stageid="2fae17c7-0b53-4ee7-8294-425db2a00644" name="Success" type="Data"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><display x="210" y="-60" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d87a5118-d47b-456f-b013-e3461b470cdb" name="Output" type="Block"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><loginhibit /><display x="135" y="-105" w="180" h="90" /><font family="Segoe UI" size="10" style="Regular" color="99CC00" /></stage><stage stageid="faab884d-56bc-4024-bb4c-258c55a1b2b9" name="Success" type="Data"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><display x="210" y="-30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a3216db4-9328-492e-aa5c-c6a3cf7330d7" name="Output" type="Block"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><loginhibit /><display x="135" y="-75" w="180" h="90" /><font family="Segoe UI" size="10" style="Regular" color="99CC00" /></stage><stage stageid="94ff9bd7-06a3-4610-ae50-ed23dcced688" name="Success" type="Data"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><display x="375" y="-30" w="150" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="12698f1f-bdc3-48ce-93e9-015fea7d5c60" name="Output" type="Block"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><loginhibit /><display x="285" y="-75" w="180" h="90" /><font family="Segoe UI" size="10" style="Regular" color="99CC00" /></stage><stage stageid="cc7a9d1c-c13e-4231-9b6c-051973ac0b33" name="InputPath" type="Data"><subsheetid>1e664d5c-3bfc-4a50-aff1-bdda0f76cdda</subsheetid><loginhibit /><display x="255" y="-165" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Downloads\ACE Supporting Files\Quotes.zip</initialvalue><private /><alwaysinit /></stage><stage stageid="3628d796-eb53-48b1-bb48-752fdcb21a2c" name="Success" type="Data"><subsheetid>1e664d5c-3bfc-4a50-aff1-bdda0f76cdda</subsheetid><display x="195" y="-15" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a55500f7-aa19-4dba-8445-5c7967340442" name="Input" type="Block"><subsheetid>1e664d5c-3bfc-4a50-aff1-bdda0f76cdda</subsheetid><loginhibit /><display x="120" y="-195" w="180" h="105" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="79fb36be-8717-4a92-bc59-6ffb618d9e57" name="Output" type="Block"><subsheetid>1e664d5c-3bfc-4a50-aff1-bdda0f76cdda</subsheetid><loginhibit /><display x="120" y="-60" w="180" h="90" /><font family="Segoe UI" size="10" style="Regular" color="99CC00" /></stage><stage stageid="8bebdec5-fe4d-4aa7-9c75-64b71a7cc9d8" name="Start" type="Start"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><loginhibit /><display x="-60" y="-120" /><inputs><input type="text" name="InputPath" narrative="Path of the input file or folder." stage="InputPath" /><input type="text" name="DestinationPath" narrative="Locaction where compressed file has to be created." stage="DestinationPath" /><input type="text" name="ProcessPath" narrative="File path of 7z.exe." stage="processPath" /><input type="text" name="CompressedFileName" narrative="Optional file name for compressed file." stage="CompressedFileName" /></inputs><onsuccess>c4b50336-27ee-405c-b651-4903bf317513</onsuccess></stage><stage stageid="080267b7-8b11-4598-b496-5fe7a8548379" name="End" type="End"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><loginhibit /><display x="-60" y="45" /><outputs><output type="flag" name="Sucess" narrative="Return true if execution is successful" stage="Success" /></outputs></stage><stage stageid="2e2596ea-9d50-4c27-a9b1-8a935b3bee01" name="Input" type="Block"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><loginhibit /><display x="120" y="-315" w="390" h="165" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="77d4cca6-150f-45b6-b5ad-ccad82e1c596" name="CompressedFileName" type="Data"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><display x="225" y="-240" w="180" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="60fc9c38-0466-4ae8-8fe8-0bbd19ac89f9" name="DestinationPath" type="Data"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><loginhibit /><display x="360" y="-195" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test</initialvalue><private /><alwaysinit /></stage><stage stageid="1772764d-3ec2-4354-9eb1-5dc96ad7744a" name="InputPath" type="Data"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><loginhibit /><display x="360" y="-240" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test\BlueprismTrainingFoundationCertifiate_PrashantRajut.pdf</initialvalue><private /><alwaysinit /></stage><stage stageid="febf6013-3d31-48dc-ab72-23e7bf662bdc" name="Input" type="Block"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><loginhibit /><display x="60" y="-270" w="390" h="165" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="a80f0fd9-9db8-47d8-aab4-1bfa9ea66e53" name="CompressedFileName" type="Data"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><display x="165" y="-195" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">doc.1.0.12</initialvalue><private /><alwaysinit /></stage><stage stageid="6fa30747-1f15-4723-be91-9d9c418f588e" name="Input" type="Block"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><loginhibit /><display x="195" y="-285" w="390" h="165" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="b4cb48b3-7ed3-4eb0-bb88-4add13c67802" name="Input" type="Block"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><loginhibit /><display x="75" y="-330" w="390" h="165" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="c0a41354-a157-4c28-8448-68b6b56bfc9f" name="Create Bzip2" type="SubSheetInfo"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><narrative>Provides functionality to create Bzip2  file of any file. It only works with files

Params: 
- DestinationPath-Text : location where compressed file has to be created
-InputPath-Text: path of the input file or folder.
-ProcessPath-Text : 7zip..exe path
-CompressedFileName-Text: Optional

Return :
-Succes-Bool: True if   Bzip2  file is creatad successfully</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="23523b60-2303-4258-9d1d-59da1a79060e" name="Create BZIP2" type="Code"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><loginhibit /><display x="30" y="-60" /><inputs><input type="text" name="InputPath" expr="[InputPath]" /><input type="text" name="DestinationPath" expr="[DestinationPath]" /><input type="text" name="processpath" expr="[processPath]" /><input type="text" name="FileName" expr="[CompressedFileName]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>9ec2719d-e3ee-4419-a330-7beb75027f30</onsuccess><code><![CDATA[Success=CreateBZIP2(InputPath,DestinationPath,processpath,FileName);]]></code></stage><stage stageid="a56edba2-db2c-4122-ae46-b46abc251928" name="Success" type="Data"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><display x="300" y="-90" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="eb33ff5b-4055-4ab7-8369-561ca3e85da5" name="Output" type="Block"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><loginhibit /><display x="225" y="-135" w="180" h="90" /><font family="Segoe UI" size="10" style="Regular" color="99CC00" /></stage><stage stageid="361deb2e-f7eb-4f07-be70-d52998a656a4" name="DestinationPath" type="Data"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><loginhibit /><display x="420" y="-240" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test\</initialvalue><private /><alwaysinit /></stage><stage stageid="29c54fca-1a7a-4617-afba-64e7a9ca6355" name="InputPath" type="Data"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><loginhibit /><display x="420" y="-285" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test\BlueprismTrainingFoundationCertifiate_PrashantRajut.pdf</initialvalue><private /><alwaysinit /></stage><stage stageid="01228e4a-9f44-48ec-82aa-fb9cd5f6b5fb" name="Input" type="Block"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><loginhibit /><display x="120" y="-315" w="390" h="165" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="e7b9178b-aadb-4b8d-a7f6-e8a0ed54a671" name="CompressedFileName" type="Data"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><display x="225" y="-240" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">as.hgf</initialvalue><private /><alwaysinit /></stage><stage stageid="969be8bf-67c2-4597-aad0-238da3884ccc" name="Create GZip" type="SubSheetInfo"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><narrative>Provides functionality to create GZip  file of any file. It only works with files

Params: 
- DestinationPath-Text : location where compressed file has to be created
-InputPath-Text: path of the input file or folder.
-ProcessPath-Text : 7zip..exe path
-CompressedFileName-Text: Optional

Return :
-Succes-Bool: True if  GZip file is creatad successfully</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="ad3a35ee-6fd5-4cb9-b5ad-71b4f864f8bf" name="Create GZIP" type="Code"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><loginhibit /><display x="30" y="-90" /><inputs><input type="text" name="InputPath" expr="[InputPath]" /><input type="text" name="DestinationPath" expr="[DestinationPath]" /><input type="text" name="processpath" expr="[processPath]" /><input type="text" name="FileName" expr="[CompressedFileName]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>63a75dfb-cdce-4237-af78-6b4cd29f4383</onsuccess><code><![CDATA[Success=CreateGZIP(InputPath,DestinationPath,processpath,FileName);]]></code></stage><stage stageid="ffc4e48b-c994-460d-b56c-cb497b219b78" name="Success" type="Data"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><display x="300" y="-90" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c1059cea-87fc-4be9-88bd-2804d8edaf96" name="Output" type="Block"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><loginhibit /><display x="225" y="-135" w="180" h="90" /><font family="Segoe UI" size="10" style="Regular" color="99CC00" /></stage><stage stageid="4fc08d14-7e22-4157-9d51-bc2171154b91" name="Input" type="Block"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><loginhibit /><display x="120" y="-315" w="390" h="165" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="684c39bb-a98e-428b-85f6-4273a594aa59" name="CompressedFileName" type="Data"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><display x="225" y="-240" w="180" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0a9564bc-991e-4ad1-80ac-c077e2a7f18d" name="End" type="End"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><loginhibit /><display x="30" y="45" /><outputs><output type="flag" name="Sucess" narrative="Return true if execution is successful" stage="Success" /></outputs></stage><stage stageid="9ec2719d-e3ee-4419-a330-7beb75027f30" name="End" type="End"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><loginhibit /><display x="30" y="0" /><outputs><output type="flag" name="Sucess" narrative="Return true if execution is successful" stage="Success" /></outputs></stage><stage stageid="63a75dfb-cdce-4237-af78-6b4cd29f4383" name="End" type="End"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><loginhibit /><display x="30" y="-45" /><outputs><output type="flag" name="Sucess" narrative="Return true if execution is successful" stage="Success" /></outputs></stage><stage stageid="85119676-3d58-4506-876b-99fe169b58ef" name="End" type="End"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><loginhibit /><display x="15" y="60" /><outputs><output type="flag" name="Sucess" narrative="Return true if execution is successful" stage="Success" /></outputs></stage><stage stageid="1c779ea5-102d-469f-a9c6-eec84e067631" name="End" type="End"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><loginhibit /><display x="15" y="105" /><outputs><output type="flag" name="Sucess" narrative="Return true if execution is successful" stage="Success" /></outputs></stage><stage stageid="02ba23b2-71bb-431b-9646-7f4525040d14" name="End" type="End"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="flag" name="Sucess" narrative="Return true if execution is successful" stage="Success" /></outputs></stage><stage stageid="31c10532-555f-46cb-836b-01e6284495cb" name="End" type="End"><subsheetid>1e664d5c-3bfc-4a50-aff1-bdda0f76cdda</subsheetid><loginhibit /><display x="-60" y="45" /><outputs><output type="flag" name="Sucess" narrative="Return true if the executin is successful" stage="Success" /></outputs></stage><stage stageid="cc3e413c-9472-46e4-8b9a-cce3ccb97331" name="Start" type="Start"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><loginhibit /><display x="30" y="-180" /><inputs><input type="text" name="InputPath" narrative="Path of the input file or folder." stage="InputPath" /><input type="text" name="DestinationPath" narrative="Locaction where compressed file has to be created." stage="DestinationPath" /><input type="text" name="ProcessPath" narrative="File path of 7z.exe." stage="processPath" /><input type="text" name="CompressedFileName" narrative="Optional file name for compressed file." stage="CompressedFileName" /></inputs><onsuccess>4c149610-e4e4-48af-80ce-2ddf73da0209</onsuccess></stage><stage stageid="d5d4e711-ec30-4685-8d68-3a1461d7ace2" name="Start" type="Start"><subsheetid>d28c7c4f-aef6-402b-9589-4c88aee357dc</subsheetid><loginhibit /><display x="30" y="-135" /><inputs><input type="text" name="InputPath" narrative="Path of the input file or folder." stage="InputPath" /><input type="text" name="DestinationPath" narrative="Locaction where compressed file has to be created." stage="DestinationPath" /><input type="text" name="ProcessPath" narrative="File path of 7z.exe." stage="processPath" /><input type="text" name="CompressedFileName" narrative="Optional file name for compressed file." stage="CompressedFileName" /></inputs><onsuccess>23523b60-2303-4258-9d1d-59da1a79060e</onsuccess></stage><stage stageid="3f73a917-1bac-4af9-9a71-d83dd139911b" name="Start" type="Start"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><loginhibit /><display x="30" y="-165" /><inputs><input type="text" name="InputPath" narrative="Path of the input file or folder." stage="InputPath" /><input type="text" name="DestinationPath" narrative="Locaction where compressed file has to be created." stage="DestinationPath" /><input type="text" name="ProcessPath" narrative="File path of 7z.exe." stage="processPath" /><input type="text" name="CompressedFileName" narrative="Optional file name for compressed file." stage="CompressedFileName" /></inputs><onsuccess>ad3a35ee-6fd5-4cb9-b5ad-71b4f864f8bf</onsuccess></stage><stage stageid="558807aa-9aa4-4750-af29-e2434a0b4dc9" name="Start" type="Start"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><loginhibit /><display x="15" y="-165" /><inputs><input type="text" name="InputPath" narrative="Path of the input file or folder." stage="InputPath" /><input type="text" name="DestinationPath" narrative="Locaction where compressed file has to be created." stage="DestinationPath" /><input type="text" name="ProcessPath" narrative="File path of 7z.exe." stage="processPath" /><input type="text" name="CompressedFileName" narrative="Optional file name for compressed file." stage="CompressedFileName" /></inputs><onsuccess>1fdc5b56-1788-440c-877e-fe41c9719cdd</onsuccess></stage><stage stageid="46ea0edb-92f4-4936-b10b-c5aa05800856" name="Start" type="Start"><subsheetid>63594ef5-1c46-45a2-a098-cf4772b9a563</subsheetid><loginhibit /><display x="15" y="-120" /><inputs><input type="text" name="InputPath" narrative="Path of the input file or folder." stage="InputPath" /><input type="text" name="DestinationPath" narrative="Locaction where compressed file has to be created." stage="DestinationPath" /><input type="text" name="ProcessPath" narrative="File path of 7z.exe." stage="processPath" /><input type="text" name="CompressedFileName" narrative="Optional file name for compressed file." stage="CompressedFileName" /></inputs><onsuccess>916cc073-6b89-4c73-8f7f-3b8815b16b8c</onsuccess></stage><stage stageid="35dcc55c-80cf-41c7-8c4b-2322819941c0" name="Start" type="Start"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><loginhibit /><display x="15" y="-135" /><inputs><input type="text" name="InputPath" narrative="Path of the input file or folder." stage="InputPath" /><input type="text" name="DestinationPath" narrative="Locaction where compressed file has to be created." stage="DestinationPath" /><input type="text" name="ProcessPath" narrative="File path of 7z.exe." stage="processPath" /><input type="text" name="CompressedFileName" narrative="Optional file name for compressed file." stage="CompressedFileName" /></inputs><onsuccess>9ff85b37-26f5-4350-bc42-75fccf7f1e48</onsuccess></stage><stage stageid="eee36666-eb28-4f14-8016-b0b12c4d9d85" name="processPath" type="Data"><display x="195" y="-75" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Program Files\7-Zip\7z.exe</initialvalue></stage><stage stageid="6e0e802a-462e-4abb-87b7-5c207e3176bc" name="DestinationPath" type="Data"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><loginhibit /><display x="375" y="-240" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test</initialvalue><private /><alwaysinit /></stage><stage stageid="c46b7623-b233-446b-a3f6-8b02395ebce7" name="InputPath" type="Data"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><loginhibit /><display x="375" y="-285" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test\New folder</initialvalue><private /><alwaysinit /></stage><stage stageid="7c199de7-32d4-4062-94c0-67ea274bc96d" name="CompressedFileName" type="Data"><subsheetid>bc9042c6-3e04-487a-93f1-7fea61f52413</subsheetid><display x="180" y="-240" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">fil.1</initialvalue><private /><alwaysinit /></stage><stage stageid="7deaf1e6-5183-479e-9bad-b33d17efc365" name="DestinationPath" type="Data"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><loginhibit /><display x="480" y="-195" w="180" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="101e0b0b-05dd-4640-b41e-48218e137093" name="InputPath" type="Data"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><loginhibit /><display x="480" y="-240" w="180" h="30" /><datatype>text</datatype><initialvalue /><private /></stage><stage stageid="f3cad4c1-83f9-4d99-b806-b0f6c1009859" name="CompressedFileName" type="Data"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><display x="285" y="-195" w="180" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a9ddc3ad-d6b0-4583-9a7b-4bcde383ca2e" name="DestinationPath" type="Data"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><loginhibit /><display x="435" y="-135" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\ravel.siirde\Desktop\Uni</initialvalue><private /><alwaysinit /></stage><stage stageid="ae4d079b-db39-4d8f-9929-8c417131a0a9" name="InputPath" type="Data"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><loginhibit /><display x="435" y="-180" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\ravel.siirde\Desktop\Uni\Alicia\Tino</initialvalue><private /><alwaysinit /></stage><stage stageid="ebf206df-0569-4a1c-b1aa-e4de60ee1980" name="CompressedFileName" type="Data"><subsheetid>07e27e88-83e8-40ea-bf25-2ed290ead7c8</subsheetid><display x="240" y="-135" w="180" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c4889bc0-2883-4c67-8e14-56f4daecfb1b" name="DestinationPath" type="Data"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><loginhibit /><display x="420" y="-225" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test</initialvalue><private /><alwaysinit /></stage><stage stageid="89d2db23-0e39-41cc-a246-1a2d91569a71" name="InputPath" type="Data"><subsheetid>10310079-c744-4144-97f0-d98d1a3cacc7</subsheetid><loginhibit /><display x="420" y="-270" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test\BlueprismTrainingFoundationCertifiate_PrashantRajut.pdf</initialvalue><private /><alwaysinit /></stage><stage stageid="02803b40-2e75-4e45-b54f-de6a440d87d2" name="DestinationPath" type="Data"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><loginhibit /><display x="405" y="-225" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test\</initialvalue><private /><alwaysinit /></stage><stage stageid="6d7558fd-2f31-48b1-94a7-d2bde4e42152" name="InputPath" type="Data"><subsheetid>c69ee2dd-d514-44e7-9df2-e80b3972792c</subsheetid><loginhibit /><display x="405" y="-270" w="180" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Desktop\test\BlueprismTrainingFoundationCertifiate_PrashantRajut.pdf</initialvalue><private /><alwaysinit /></stage><stage stageid="9b381e5a-0112-4a82-8b04-9b42fe359915" name="TargetFolder" type="Data"><subsheetid>1e664d5c-3bfc-4a50-aff1-bdda0f76cdda</subsheetid><display x="225" y="-120" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\Users\prashant.rajput\Downloads\ACE Supporting Files</initialvalue><private /><alwaysinit /></stage><stage stageid="9ff85b37-26f5-4350-bc42-75fccf7f1e48" name="Generate 7z from files" type="Code"><subsheetid>23ae9094-9d85-422d-a800-27777d4d1cea</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="InputPath" expr="[InputPath]" /><input type="text" name="DestinationPath" expr="[DestinationPath]" /><input type="text" name="processpath" expr="[processPath]" /><input type="text" name="CompressedFileName" expr="[CompressedFileName]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>02ba23b2-71bb-431b-9646-7f4525040d14</onsuccess><code><![CDATA[Success=Create7z(InputPath,DestinationPath,processpath,CompressedFileName);]]></code></stage></process></object>
        <object id="b99d5b9f-f5b7-45a4-b7b2-17a2cce2ac4c" name="Email - POP3/SMTP" xmlns="http://www.blueprism.co.uk/product/process"><process name="Email - POP3/SMTP" version="6.9.0.26970" bpversion="6.10.1.35171" narrative="Retrieve email via POP3 protocol and send using SMTP protocol" byrefcollection="true" type="object" runmode="Exclusive"><appdef><element name="Application Root"><id>011d2f54-1ac9-4681-a6e7-993aa460851d</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="67bff276-3cf2-4985-a957-e462b800ac3b" type="Normal" published="True"><name>Get Message</name><view><camerax>0</camerax><cameray>79</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="cc1b4ba2-0510-4980-92bd-d6312072c5bf" type="Normal" published="True"><name>Send Message</name><view><camerax>0</camerax><cameray>14</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e" type="Normal" published="True"><name>Delete Message</name><view><camerax>0</camerax><cameray>-6</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="849d1a37-179b-40ae-9683-4ebb0d951576" type="Normal" published="True"><name>Delete Messages</name><view><camerax>0</camerax><cameray>160</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="4688b112-6575-4f8a-980c-713566729518" type="Normal" published="False"><name>Number From ID</name><view><camerax>0</camerax><cameray>64</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="544abb24-e623-4adb-a24d-3a5dba6164ba" type="Normal" published="True"><name>Configure</name><view><camerax>63</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="954d358e-45d9-44b3-b56a-87e1c21f9d0f" type="Normal" published="False"><name>Connect POP3</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="c8b9e601-7444-4385-b2aa-6709658ad472" type="Normal" published="False"><name>Disconnect POP3</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f" type="Normal" published="True"><name>List Messages</name><view><camerax>0</camerax><cameray>64</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="803f1a2c-38f9-4614-97aa-5ca66d454d2d" type="Normal" published="True"><name>Save Attachments</name><view><camerax>0</camerax><cameray>-27</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="f87d36b8-5544-47f1-bd36-115a2493fdcd" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><onsuccess>a378f6c1-35f0-4954-9186-e304278d369e</onsuccess></stage><stage stageid="a378f6c1-35f0-4954-9186-e304278d369e" name="End" type="End"><loginhibit /><display x="15" y="90" /></stage><stage stageid="65d9a6b9-33b9-4e6b-8211-7aa840ca5eee" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /><references><reference>System.dll</reference><reference>System.Data.dll</reference><reference>System.Xml.dll</reference></references><imports><import>System</import><import>System.IO</import><import>System.Net</import><import>System.Net.Mail</import><import>System.Net.Mime</import><import>System.Net.Sockets</import><import>System.Net.Security</import><import>System.Collections.Generic</import><import>System.Collections.Specialized</import><import>System.Text</import><import>System.Security.Cryptography</import><import>System.Globalization</import><import>System.Text.RegularExpressions</import><import>System.Data</import></imports><language>csharp</language><globalcode><![CDATA[]]></globalcode><code><![CDATA[Pop3Client _rclient;

/// <summary>
/// This interface describes a MessageTraverser which is able to traverse a Message structure
/// and deliver some answer given some question.
/// </summary>
/// <typeparam name="TAnswer">This is the type of the answer you want to have delivered.</typeparam>
/// <typeparam name="TQuestion">This is the type of the question you want to have answered.</typeparam>
public interface IQuestionAnswerMessageTraverser<TQuestion, TAnswer>
{
    /// <summary>
    /// Call this when you want to apply this traverser on a <see cref="Message"/>.
    /// </summary>
    /// <param name="message">The <see cref="Message"/> which you want to traverse. Must not be <see langword="null"/>.</param>
    /// <param name="question">The question</param>
    /// <returns>An answer</returns>
    TAnswer VisitMessage(Message message, TQuestion question);

    /// <summary>
    /// Call this when you want to apply this traverser on a <see cref="MessagePart"/>.
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> which you want to traverse. Must not be <see langword="null"/>.</param>
    /// <param name="question">The question</param>
    /// <returns>An answer</returns>
    TAnswer VisitMessagePart(MessagePart messagePart, TQuestion question);
}

///<summary>
/// Finds all the <see cref="MessagePart"/>s which have a given MediaType using a depth first traversal.
///</summary>
internal class FindAllMessagePartsWithMediaType : IQuestionAnswerMessageTraverser<string, List<MessagePart>>
{
    /// <summary>
    /// Finds all the <see cref="MessagePart"/>s with the given MediaType
    /// </summary>
    /// <param name="message">The <see cref="Message"/> to start looking in</param>
    /// <param name="question">The MediaType to look for. Case is ignored.</param>
    /// <returns>
    /// A List of <see cref="MessagePart"/>s with the given MediaType.<br/>
    /// <br/>
    /// The List might be empty if no such <see cref="MessagePart"/>s were found.<br/>
    /// The order of the elements in the list is the order which they are found using
    /// a depth first traversal of the <see cref="Message"/> hierarchy.
    /// </returns>
    public List<MessagePart> VisitMessage(Message message, string question)
    {
        if (message == null)
            throw new ArgumentNullException("message");

        return VisitMessagePart(message.MessagePart, question);
    }

    /// <summary>
    /// Finds all the <see cref="MessagePart"/>s with the given MediaType
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> to start looking in</param>
    /// <param name="question">The MediaType to look for. Case is ignored.</param>
    /// <returns>
    /// A List of <see cref="MessagePart"/>s with the given MediaType.<br/>
    /// <br/>
    /// The List might be empty if no such <see cref="MessagePart"/>s were found.<br/>
    /// The order of the elements in the list is the order which they are found using
    /// a depth first traversal of the <see cref="Message"/> hierarchy.
    /// </returns>
    public List<MessagePart> VisitMessagePart(MessagePart messagePart, string question)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        List<MessagePart> results = new List<MessagePart>();

        if (messagePart.ContentType.MediaType.Equals(question, StringComparison.OrdinalIgnoreCase))
            results.Add(messagePart);

        if (messagePart.IsMultiPart)
        {
            foreach (MessagePart part in messagePart.MessageParts)
            {
                List<MessagePart> result = VisitMessagePart(part, question);
                results.AddRange(result);
            }
        }

        return results;
    }
}

///<summary>
/// Finds the first <see cref="MessagePart"/> which have a given MediaType in a depth first traversal.
///</summary>
internal class FindFirstMessagePartWithMediaType : IQuestionAnswerMessageTraverser<string, MessagePart>
{
    /// <summary>
    /// Finds the first <see cref="MessagePart"/> with the given MediaType
    /// </summary>
    /// <param name="message">The <see cref="Message"/> to start looking in</param>
    /// <param name="question">The MediaType to look for. Case is ignored.</param>
    /// <returns>A <see cref="MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="MessagePart"/> was found</returns>
    public MessagePart VisitMessage(Message message, string question)
    {
        if (message == null)
            throw new ArgumentNullException("message");

        return VisitMessagePart(message.MessagePart, question);
    }

    /// <summary>
    /// Finds the first <see cref="MessagePart"/> with the given MediaType
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> to start looking in</param>
    /// <param name="question">The MediaType to look for. Case is ignored.</param>
    /// <returns>A <see cref="MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="MessagePart"/> was found</returns>
    public MessagePart VisitMessagePart(MessagePart messagePart, string question)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        if (messagePart.ContentType.MediaType.Equals(question, StringComparison.OrdinalIgnoreCase))
            return messagePart;

        if (messagePart.IsMultiPart)
        {
            foreach (MessagePart part in messagePart.MessageParts)
            {
                MessagePart result = VisitMessagePart(part, question);
                if (result != null)
                    return result;
            }
        }

        return null;
    }
}

/// <summary>
/// Finds all <see cref="MessagePart"/>s which are considered to be attachments
/// </summary>
internal class AttachmentFinder : MultipleMessagePartFinder
{
    protected override List<MessagePart> CaseLeaf(MessagePart messagePart)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        // Maximum space needed is one
        List<MessagePart> leafAnswer = new List<MessagePart>(1);

        if (messagePart.IsAttachment)
            leafAnswer.Add(messagePart);

        return leafAnswer;
    }
}

/// <summary>
/// This interface describes a MessageTraverser which is able to traverse a Message hierarchy structure
/// and deliver some answer.
/// </summary>
/// <typeparam name="TAnswer">This is the type of the answer you want to have delivered.</typeparam>
public interface IAnswerMessageTraverser<TAnswer>
{
    /// <summary>
    /// Call this when you want to apply this traverser on a <see cref="Message"/>.
    /// </summary>
    /// <param name="message">The <see cref="Message"/> which you want to traverse. Must not be <see langword="null"/>.</param>
    /// <returns>An answer</returns>
    TAnswer VisitMessage(Message message);

    /// <summary>
    /// Call this when you want to apply this traverser on a <see cref="MessagePart"/>.
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> which you want to traverse. Must not be <see langword="null"/>.</param>
    /// <returns>An answer</returns>
    TAnswer VisitMessagePart(MessagePart messagePart);
}

/// <summary>
/// This is an abstract class which handles traversing of a <see cref="Message"/> tree structure.<br/>
/// It runs through the message structure using a depth-first traversal.
/// </summary>
/// <typeparam name="TAnswer">The answer you want from traversing the message tree structure</typeparam>
public abstract class AnswerMessageTraverser<TAnswer> : IAnswerMessageTraverser<TAnswer>
{
    /// <summary>
    /// Call this when you want an answer for a full message.
    /// </summary>
    /// <param name="message">The message you want to traverse</param>
    /// <returns>An answer</returns>
    /// <exception cref="ArgumentNullException">if <paramref name="message"/> is <see langword="null"/></exception>
    public TAnswer VisitMessage(Message message)
    {
        if (message == null)
            throw new ArgumentNullException("message");

        return VisitMessagePart(message.MessagePart);
    }

    /// <summary>
    /// Call this method when you want to find an answer for a <see cref="MessagePart"/>
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> part you want an answer from.</param>
    /// <returns>An answer</returns>
    /// <exception cref="ArgumentNullException">if <paramref name="messagePart"/> is <see langword="null"/></exception>
    public TAnswer VisitMessagePart(MessagePart messagePart)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        if (messagePart.IsMultiPart)
        {
            List<TAnswer> leafAnswers = new List<TAnswer>(messagePart.MessageParts.Count);
            foreach (MessagePart part in messagePart.MessageParts)
            {
                leafAnswers.Add(VisitMessagePart(part));
            }
            return MergeLeafAnswers(leafAnswers);
        }

        return CaseLeaf(messagePart);
    }

    /// <summary>
    /// For a concrete implementation an answer must be returned for a leaf <see cref="MessagePart"/>, which are
    /// MessageParts that are not <see cref="MessagePart.IsMultiPart">MultiParts.</see>
    /// </summary>
    /// <param name="messagePart">The message part which is a leaf and thereby not a MultiPart</param>
    /// <returns>An answer</returns>
    protected abstract TAnswer CaseLeaf(MessagePart messagePart);

    /// <summary>
    /// For a concrete implementation, when a MultiPart <see cref="MessagePart"/> has fetched it's answers from it's children, these
    /// answers needs to be merged. This is the responsibility of this method.
    /// </summary>
    /// <param name="leafAnswers">The answer that the leafs gave</param>
    /// <returns>A merged answer</returns>
    protected abstract TAnswer MergeLeafAnswers(List<TAnswer> leafAnswers);
}

///<summary>
/// An abstract class that implements the MergeLeafAnswers method.<br/>
/// The method simply returns the union of all answers from the leaves.
///</summary>
public abstract class MultipleMessagePartFinder : AnswerMessageTraverser<List<MessagePart>>
{
    /// <summary>
    /// Adds all the <paramref name="leafAnswers"/> in one big answer
    /// </summary>
    /// <param name="leafAnswers">The answers to merge</param>
    /// <returns>A list with has all the elements in the <paramref name="leafAnswers"/> lists</returns>
    /// <exception cref="ArgumentNullException">if <paramref name="leafAnswers"/> is <see langword="null"/></exception>
    protected override List<MessagePart> MergeLeafAnswers(List<List<MessagePart>> leafAnswers)
    {
        if (leafAnswers == null)
            throw new ArgumentNullException("leafAnswers");

        // We simply create a list with all the answer generated from the leaves
        List<MessagePart> mergedResults = new List<MessagePart>();

        foreach (List<MessagePart> leafAnswer in leafAnswers)
        {
            mergedResults.AddRange(leafAnswer);
        }

        return mergedResults;
    }
}

/// <summary>
/// Finds all text/[something] versions in a Message hierarchy
/// </summary>
internal class TextVersionFinder : MultipleMessagePartFinder
{
    protected override List<MessagePart> CaseLeaf(MessagePart messagePart)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        // Maximum space needed is one
        List<MessagePart> leafAnswer = new List<MessagePart>(1);

        if (messagePart.IsText)
            leafAnswer.Add(messagePart);

        return leafAnswer;
    }
}

/// <summary>
/// This class is responsible for decoding parameters that has been encoded with:<br/>
/// <list type="bullet">
/// <item>
///    <b>Continuation</b><br/>
///    This is where a single parameter has such a long value that it could
///    be wrapped while in transit. Instead multiple parameters is used on each line.<br/>
///    <br/>
///    <b>Example</b><br/>
///    From: <c>Content-Type: text/html; boundary="someVeryLongStringHereWhichCouldBeWrappedInTransit"</c><br/>
///    To: <c>Content-Type: text/html; boundary*0="someVeryLongStringHere" boundary*1="WhichCouldBeWrappedInTransit"</c><br/>
/// </item>
/// <item>
///    <b>Encoding</b><br/>
///    Sometimes other characters then ASCII characters are needed in parameters.<br/>
///    The parameter is then given a different name to specify that it is encoded.<br/>
///    <br/>
///    <b>Example</b><br/>
///    From: <c>Content-Disposition attachment; filename="specialCharsÆØÅ"</c><br/>
///    To: <c>Content-Disposition attachment; filename*="ISO-8859-1'en-us'specialCharsC6D8C0"</c><br/>
///    This encoding is almost the same as <see cref="EncodedWord"/> encoding, and is used to decode the value.<br/>
/// </item>
/// <item>
///    <b>Continuation and Encoding</b><br/>
///    Both Continuation and Encoding can be used on the same time.<br/>
///    <br/>
///    <b>Example</b><br/>
///    From: <c>Content-Disposition attachment; filename="specialCharsÆØÅWhichIsSoLong"</c><br/>
///    To: <c>Content-Disposition attachment; filename*0*="ISO-8859-1'en-us'specialCharsC6D8C0"; filename*1*="WhichIsSoLong"</c><br/>
///    This could also be encoded as:<br/>
///    To: <c>Content-Disposition attachment; filename*0*="ISO-8859-1'en-us'specialCharsC6D8C0"; filename*1="WhichIsSoLong"</c><br/>
///    Notice that <c>filename*1</c> does not have an <c>*</c> after it - denoting it IS NOT encoded.<br/>
///    There are some rules about this:<br/>
///    <list type="number">
///      <item>The encoding must be mentioned in the first part (filename*0*), which has to be encoded.</item>
///      <item>No other part must specify an encoding, but if encoded it uses the encoding mentioned in the first part.</item>
///      <item>Parts may be encoded or not in any order.</item>
///    </list>
///    <br/>
/// </item>
/// </list>
/// More information and the specification is available in <see href="http://tools.ietf.org/html/rfc2231">RFC 2231</see>.
/// </summary>
internal static class Rfc2231Decoder
{
    /// <summary>
    /// Decodes a string of the form:<br/>
    /// <c>value0; key1=value1; key2=value2; key3=value3</c><br/>
    /// The returned List of key value pairs will have the key as key and the decoded value as value.<br/>
    /// The first value0 will have a key of <see cref="string.Empty"/>.<br/>
    /// <br/>
    /// If continuation is used, then multiple keys will be merged into one key with the different values
    /// decoded into on big value for that key.<br/>
    /// Example:<br/>
    /// <code>
    /// title*0=part1
    /// title*1=part2
    /// </code>
    /// will have key and value of:<br></br>
    /// <c>title=decode(part1)decode(part2)</c>
    /// </summary>
    /// <param name="toDecode">The string to decode.</param>
    /// <returns>A list of decoded key value pairs.</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
    public static List<KeyValuePair<string, string>> Decode(string toDecode)
		{
			if(toDecode == null)
				throw new ArgumentNullException("toDecode");

			// Normalize the input to take account for missing semicolons after parameters.
			// Example
			// text/plain; charset=\"iso-8859-1\" name=\"somefile.txt\" or
            // text/plain;\tcharset=\"iso-8859-1\"\tname=\"somefile.txt\"
			// is normalized to
			// text/plain; charset=\"iso-8859-1\"; name=\"somefile.txt\"
			// Only works for parameters inside quotes
			// \s = matches whitespace
			toDecode = Regex.Replace(toDecode, "=\\s*\"(?<value>[^\"]*)\"\\s", "=\"${value}\"; ");

			// Normalize 
			// Since the above only works for parameters inside quotes, we need to normalize
			// the special case with the first parameter.
			// Example:
			// attachment filename="foo"
			// is normalized to
			// attachment; filename="foo"
			// ^ = matches start of line (when not inside square bracets [])
			toDecode = Regex.Replace(toDecode, @"^(?<first>[^;\s]+)\s(?<second>[^;\s]+)", "${first}; ${second}");

			// Split by semicolon, but only if not inside quotes
			List<string> splitted = Utility.SplitStringWithCharNotInsideQuotes(toDecode.Trim(), ';');

			List<KeyValuePair<string, string>> collection = new List<KeyValuePair<string, string>>(splitted.Count);

			foreach (string part in splitted)
			{
				// Empty strings should not be processed
				if (part.Trim().Length == 0)
					continue;

				string[] keyValue = part.Trim().Split(new char[] {'='}, 2);
				if(keyValue.Length == 1)
				{
					collection.Add(new KeyValuePair<string, string>("", keyValue[0]));
				} else if (keyValue.Length == 2)
				{
					collection.Add(new KeyValuePair<string, string>(keyValue[0], keyValue[1]));
				} else
				{
					throw new ArgumentException("When splitting the part \"" + part + "\" by = there was " + keyValue.Length + " parts. Only 1 and 2 are supported");
				}
			}

			return DecodePairs(collection);
		}

    /// <summary>
    /// Decodes the list of key value pairs into a decoded list of key value pairs.<br/>
    /// There may be less keys in the decoded list, but then the values for the lost keys will have been appended
    /// to the new key.
    /// </summary>
    /// <param name="pairs">The pairs to decode</param>
    /// <returns>A decoded list of pairs</returns>
    private static List<KeyValuePair<string, string>> DecodePairs(List<KeyValuePair<string, string>> pairs)
    {
        if (pairs == null)
            throw new ArgumentNullException("pairs");

        List<KeyValuePair<string, string>> resultPairs = new List<KeyValuePair<string, string>>(pairs.Count);

        int pairsCount = pairs.Count;
        for (int i = 0; i < pairsCount; i++)
        {
            KeyValuePair<string, string> currentPair = pairs[i];
            string key = currentPair.Key;
            string value = Utility.RemoveQuotesIfAny(currentPair.Value);

            // Is it a continuation parameter? (encoded or not)
            if (key.EndsWith("*0", StringComparison.OrdinalIgnoreCase) || key.EndsWith("*0*", StringComparison.OrdinalIgnoreCase))
            {
                // This encoding will not be used if we get into the if which tells us
                // that the whole continuation is not encoded

                string encoding = "notEncoded - Value here is never used";

                // Now lets find out if it is encoded too.
                if (key.EndsWith("*0*", StringComparison.OrdinalIgnoreCase))
                {
                    // It is encoded.

                    // Fetch out the encoding for later use and decode the value
                    // If the value was not encoded as the email specified
                    // encoding will be set to null. This will be used later.
                    value = DecodeSingleValue(value, out encoding);

                    // Find the right key to use to store the full value
                    // Remove the start *0 which tells is it is a continuation, and the first one
                    // And remove the * afterwards which tells us it is encoded
                    key = key.Replace("*0*", "");
                }
                else
                {
                    // It is not encoded, and no parts of the continuation is encoded either

                    // Find the right key to use to store the full value
                    // Remove the start *0 which tells is it is a continuation, and the first one
                    key = key.Replace("*0", "");
                }

                // The StringBuilder will hold the full decoded value from all continuation parts
                StringBuilder builder = new StringBuilder();

                // Append the decoded value
                builder.Append(value);

                // Now go trough the next keys to see if they are part of the continuation
                for (int j = i + 1, continuationCount = 1; j < pairsCount; j++, continuationCount++)
                {
                    string jKey = pairs[j].Key;
                    string valueJKey = Utility.RemoveQuotesIfAny(pairs[j].Value);

                    if (jKey.Equals(key + "*" + continuationCount))
                    {
                        // This value part of the continuation is not encoded
                        // Therefore remove qoutes if any and add to our stringbuilder
                        builder.Append(valueJKey);

                        // Remember to increment i, as we have now treated one more KeyValuePair
                        i++;
                    }
                    else if (jKey.Equals(key + "*" + continuationCount + "*"))
                    {
                        // We will not get into this part if the first part was not encoded
                        // Therefore the encoding will only be used if and only if the
                        // first part was encoded, in which case we have remembered the encoding used

                        // Sometimes an email creator says that a string was encoded, but it really
                        // `was not. This is to catch that problem.
                        if (encoding != null)
                        {
                            // This value part of the continuation is encoded
                            // the encoding is not given in the current value,
                            // but was given in the first continuation, which we remembered for use here
                            valueJKey = DecodeSingleValue(valueJKey, encoding);
                        }
                        builder.Append(valueJKey);

                        // Remember to increment i, as we have now treated one more KeyValuePair
                        i++;
                    }
                    else
                    {
                        // No more keys for this continuation
                        break;
                    }
                }

                // Add the key and the full value as a pair
                value = builder.ToString();
                resultPairs.Add(new KeyValuePair<string, string>(key, value));
            }
            else if (key.EndsWith("*", StringComparison.OrdinalIgnoreCase))
            {
                // This parameter is only encoded - it is not part of a continuation
                // We need to change the key from "<key>*" to "<key>" and decode the value

                // To get the key we want, we remove the last * that denotes
                // that the value hold by the key was encoded
                key = key.Replace("*", "");

                // Decode the value
                string throwAway;
                value = DecodeSingleValue(value, out throwAway);

                // Now input the new value with the new key
                resultPairs.Add(new KeyValuePair<string, string>(key, value));
            }
            else
            {
                // Fully normal key - the value is not encoded
                // Therefore nothing to do, and we can simply pass the pair
                // as being decoded now
                resultPairs.Add(currentPair);
            }
        }

        return resultPairs;
    }

    /// <summary>
    /// This will decode a single value of the form: <c>ISO-8859-1'en-us'%3D%3DIamHere</c><br/>
    /// Which is basically a <see cref="EncodedWord"/> form just using % instead of =<br/>
    /// Notice that 'en-us' part is not used for anything.<br/>
    /// <br/>
    /// If the single value given is not on the correct form, it will be returned without 
    /// being decoded and <paramref name="encodingUsed"/> will be set to <see langword="null"/>.
    /// </summary>
    /// <param name="encodingUsed">
    /// The encoding used to decode with - it is given back for later use.<br/>
    /// <see langword="null"/> if input was not in the correct form.
    /// </param>
    /// <param name="toDecode">The value to decode</param>
    /// <returns>
    /// The decoded value that corresponds to <paramref name="toDecode"/> or if
    /// <paramref name="toDecode"/> is not on the correct form, it will be non-decoded.
    /// </returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
    private static string DecodeSingleValue(string toDecode, out string encodingUsed)
    {
        if (toDecode == null)
            throw new ArgumentNullException("toDecode");

        // Check if input has a part describing the encoding
        if (toDecode.IndexOf('\'') == -1)
        {
            // The input was not encoded (at least not valid) and it is returned as is
            //DefaultLogger.Log.LogDebug("Rfc2231Decoder: Someone asked me to decode a string which was not encoded - returning raw string. Input: " + toDecode);
            encodingUsed = null;
            return toDecode;
        }
        encodingUsed = toDecode.Substring(0, toDecode.IndexOf('\''));
        toDecode = toDecode.Substring(toDecode.LastIndexOf('\'') + 1);
        return DecodeSingleValue(toDecode, encodingUsed);
    }

    /// <summary>
    /// This will decode a single value of the form: %3D%3DIamHere
    /// Which is basically a <see cref="EncodedWord"/> form just using % instead of =
    /// </summary>
    /// <param name="valueToDecode">The value to decode</param>
    /// <param name="encoding">The encoding used to decode with</param>
    /// <returns>The decoded value that corresponds to <paramref name="valueToDecode"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="valueToDecode"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentNullException">If <paramref name="encoding"/> is <see langword="null"/></exception>
    private static string DecodeSingleValue(string valueToDecode, string encoding)
    {
        if (valueToDecode == null)
            throw new ArgumentNullException("valueToDecode");

        if (encoding == null)
            throw new ArgumentNullException("encoding");

        // The encoding used is the same as QuotedPrintable, we only
        // need to change % to =
        // And otherwise make it look like the correct EncodedWord encoding
        valueToDecode = "=?" + encoding + "?Q?" + valueToDecode.Replace("%", "=") + "?=";
        return EncodedWord.Decode(valueToDecode);
    }
}

/// <summary>
/// Class that can parse different fields in the header sections of a MIME message.
/// </summary>
internal static class HeaderFieldParser
{
    /// <summary>
    /// Parses the Content-Transfer-Encoding header.
    /// </summary>
    /// <param name="headerValue">The value for the header to be parsed</param>
    /// <returns>A <see cref="ContentTransferEncoding"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentException">If the <paramref name="headerValue"/> could not be parsed to a <see cref="ContentTransferEncoding"/></exception>
    public static ContentTransferEncoding ParseContentTransferEncoding(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        switch (headerValue.Trim().ToUpperInvariant())
        {
            case "7BIT":
                return ContentTransferEncoding.SevenBit;

            case "8BIT":
                return ContentTransferEncoding.EightBit;

            case "QUOTED-PRINTABLE":
                return ContentTransferEncoding.QuotedPrintable;

            case "BASE64":
                return ContentTransferEncoding.Base64;

            case "BINARY":
                return ContentTransferEncoding.Binary;

            // If a wrong argument is passed to this parser method, then we assume
            // default encoding, which is SevenBit.
            // This is to ensure that we do not throw exceptions, even if the email not MIME valid.
            default:
                //DefaultLogger.Log.LogDebug("Wrong ContentTransferEncoding was used. It was: " + headerValue);
                return ContentTransferEncoding.SevenBit;
        }
    }

    /// <summary>
    /// Parses an ImportanceType from a given Importance header value.
    /// </summary>
    /// <param name="headerValue">The value to be parsed</param>
    /// <returns>A <see cref="MailPriority"/>. If the <paramref name="headerValue"/> is not recognized, Normal is returned.</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
    public static MailPriority ParseImportance(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        switch (headerValue.ToUpperInvariant())
        {
            case "5":
            case "HIGH":
                return MailPriority.High;

            case "3":
            case "NORMAL":
                return MailPriority.Normal;

            case "1":
            case "LOW":
                return MailPriority.Low;

            default:
                //DefaultLogger.Log.LogDebug("HeaderFieldParser: Unknown importance value: \"" + headerValue + "\". Using default of normal importance.");
                return MailPriority.Normal;
        }
    }

    /// <summary>
    /// Parses a the value for the header Content-Type to 
    /// a <see cref="ContentType"/> object.
    /// </summary>
    /// <param name="headerValue">The value to be parsed</param>
    /// <returns>A <see cref="ContentType"/> object</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
    public static ContentType ParseContentType(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        // We create an empty Content-Type which we will fill in when we see the values
        ContentType contentType = new ContentType();

        // Now decode the parameters
        List<KeyValuePair<string, string>> parameters = Rfc2231Decoder.Decode(headerValue);

        foreach (KeyValuePair<string, string> keyValuePair in parameters)
        {
            string key = keyValuePair.Key.ToUpperInvariant().Trim();
            string value = Utility.RemoveQuotesIfAny(keyValuePair.Value.Trim());
            switch (key)
            {
                case "":
                    // This is the MediaType - it has no key since it is the first one mentioned in the
                    // headerValue and has no = in it.

                    // Check for illegal content-type
                    if (value.ToUpperInvariant().Equals("TEXT"))
                        value = "text/plain";

                    contentType.MediaType = value;
                    break;

                case "BOUNDARY":
                    contentType.Boundary = value;
                    break;

                case "CHARSET":
                    contentType.CharSet = value;
                    break;

                case "NAME":
                    contentType.Name = EncodedWord.Decode(value);
                    break;

                default:
                    // This is to shut up the code help that is saying that contentType.Parameters
                    // can be null - which it cant!
                    if (contentType.Parameters == null)
                        throw new Exception("The ContentType parameters property is null. This will never be thrown.");

                    // We add the unknown value to our parameters list
                    // "Known" unknown values are:
                    // - title
                    // - report-type
                    contentType.Parameters.Add(key, value);
                    break;
            }
        }

        return contentType;
    }

    /// <summary>
    /// Parses a the value for the header Content-Disposition to a <see cref="ContentDisposition"/> object.
    /// </summary>
    /// <param name="headerValue">The value to be parsed</param>
    /// <returns>A <see cref="ContentDisposition"/> object</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
    public static ContentDisposition ParseContentDisposition(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        // See http://www.ietf.org/rfc/rfc2183.txt for RFC definition

        // Create empty ContentDisposition - we will fill in details as we read them
        ContentDisposition contentDisposition = new ContentDisposition();

        // Now decode the parameters
        List<KeyValuePair<string, string>> parameters = Rfc2231Decoder.Decode(headerValue);

        foreach (KeyValuePair<string, string> keyValuePair in parameters)
        {
            string key = keyValuePair.Key.ToUpperInvariant().Trim();
            string value = keyValuePair.Value;
            switch (key)
            {
                case "":
                    // This is the DispisitionType - it has no key since it is the first one
                    // and has no = in it.
                    contentDisposition.DispositionType = value;
                    break;

                // The correct name of the parameter is filename, but some emails also contains the parameter
                // name, which also holds the name of the file. Therefore we use both names for the same field.
                case "NAME":
                case "FILENAME":
                    // The filename might be in qoutes, and it might be encoded-word encoded
                    contentDisposition.FileName = EncodedWord.Decode(Utility.RemoveQuotesIfAny(value));
                    break;

                case "CREATION-DATE":
                    // Notice that we need to create a new DateTime because of a failure in .NET 2.0.
                    // The failure is: you cannot give contentDisposition a DateTime with a Kind of UTC
                    // It will set the CreationDate correctly, but when trying to read it out it will throw an exception.
                    // It is the same with ModificationDate and ReadDate.
                    // This is fixed in 4.0 - maybe in 3.0 too.
                    // Therefore we create a new DateTime which have a DateTimeKind set to unspecified
                    DateTime creationDate = new DateTime(Rfc2822DateTime.StringToDate(Utility.RemoveQuotesIfAny(value)).Ticks);
                    contentDisposition.CreationDate = creationDate;
                    break;

                case "MODIFICATION-DATE":
                    DateTime midificationDate = new DateTime(Rfc2822DateTime.StringToDate(Utility.RemoveQuotesIfAny(value)).Ticks);
                    contentDisposition.ModificationDate = midificationDate;
                    break;

                case "READ-DATE":
                    DateTime readDate = new DateTime(Rfc2822DateTime.StringToDate(Utility.RemoveQuotesIfAny(value)).Ticks);
                    contentDisposition.ReadDate = readDate;
                    break;

                case "SIZE":
                    contentDisposition.Size = int.Parse(Utility.RemoveQuotesIfAny(value), CultureInfo.InvariantCulture);
                    break;

                default:
                    if (key.StartsWith("X-"))
                    {
                        contentDisposition.Parameters.Add(key, Utility.RemoveQuotesIfAny(value));
                        break;
                    }

                    throw new ArgumentException("Unknown parameter in Content-Disposition. Ask developer to fix! Parameter: " + key);
            }
        }

        return contentDisposition;
    }

    /// <summary>
    /// Parses an ID like Message-Id and Content-Id.<br/>
    /// Example:<br/>
    /// <c>&lt;test@test.com&gt;</c><br/>
    /// into<br/>
    /// <c>test@test.com</c>
    /// </summary>
    /// <param name="headerValue">The id to parse</param>
    /// <returns>A parsed ID</returns>
    public static string ParseId(string headerValue)
    {
        // Remove whitespace in front and behind since
        // whitespace is allowed there
        // Remove the last > and the first <
        return headerValue.Trim().TrimEnd('>').TrimStart('<');
    }

    /// <summary>
    /// Parses multiple IDs from a single string like In-Reply-To.
    /// </summary>
    /// <param name="headerValue">The value to parse</param>
    /// <returns>A list of IDs</returns>
    public static List<string> ParseMultipleIDs(string headerValue)
		{
			List<string> returner = new List<string>();

			// Split the string by >
			// We cannot use ' ' (space) here since this is a possible value:
			// <test@test.com><test2@test.com>
			string[] ids = headerValue.Trim().Split(new char[]{ '>' }, StringSplitOptions.RemoveEmptyEntries);
			foreach (string id in ids)
			{
				returner.Add(ParseId(id));
			}

			return returner;
		}
}

/// <summary>
/// Utility class for dealing with encoded word strings<br/>
/// <br/>
/// EncodedWord encoded strings are only in ASCII, but can embed information
/// about characters in other character sets.<br/>
/// <br/>
/// It is done by specifying the character set, an encoding that maps from ASCII to
/// the correct bytes and the actual encoded string.<br/>
/// <br/>
/// It is specified in a format that is best summarized by a BNF:<br/>
/// <c>"=?" character_set "?" encoding "?" encoded-text "?="</c><br/>
/// </summary>
/// <example>
/// <c>=?ISO-8859-1?Q?=2D?=</c>
/// Here <c>ISO-8859-1</c> is the character set.<br/>
/// <c>Q</c> is the encoding method (quoted-printable). <c>B</c> is also supported (Base 64).<br/>
/// The encoded text is the <c>=2D</c> part which is decoded to a space.
/// </example>
internal static class EncodedWord
{
    /// <summary>
    /// Decode text that is encoded with the <see cref="EncodedWord"/> encoding.<br/>
    ///<br/>
    /// This method will decode any encoded-word found in the string.<br/>
    /// All parts which is not encoded will not be touched.<br/>
    /// <br/>
    /// From <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>:<br/>
    /// <code>
    /// Generally, an "encoded-word" is a sequence of printable ASCII
    /// characters that begins with "=?", ends with "?=", and has two "?"s in
    /// between.  It specifies a character set and an encoding method, and
    /// also includes the original text encoded as graphic ASCII characters,
    /// according to the rules for that encoding method.
    /// </code>
    /// Example:<br/>
    /// <c>=?ISO-8859-1?q?this=20is=20some=20text?= other text here</c>
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc2047#section-2">RFC 2047 section 2</a> "Syntax of encoded-words" for more details</remarks>
    /// <param name="encodedWords">Source text. May be content which is not encoded.</param>
    /// <returns>Decoded text</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="encodedWords"/> is <see langword="null"/></exception>
    public static string Decode(string encodedWords)
    {
        if (encodedWords == null)
            throw new ArgumentNullException("encodedWords");

        // Notice that RFC2231 redefines the BNF to
        // encoded-word := "=?" charset ["*" language] "?" encoded-text "?="
        // but no usage of this BNF have been spotted yet. It is here to
        // ease debugging if such a case is discovered.

        // This is the regex that should fit the BNF
        // RFC Says that NO WHITESPACE is allowed in this encoding, but there are examples
        // where whitespace is there, and therefore this regex allows for such.
        const string encodedWordRegex = @"\=\?(?<Charset>\S+?)\?(?<Encoding>\w)\?(?<Content>.+?)\?\=";
        // \w	Matches any word character including underscore. Equivalent to "[A-Za-z0-9_]".
        // \S	Matches any nonwhite space character. Equivalent to "[^ \f\n\r\t\v]".
        // +?   non-gready equivalent to +
        // (?<NAME>REGEX) is a named group with name NAME and regular expression REGEX

        // Any amount of linear-space-white between 'encoded-word's,
        // even if it includes a CRLF followed by one or more SPACEs,
        // is ignored for the purposes of display.
        // http://tools.ietf.org/html/rfc2047#page-12
        // Define a regular expression that captures two encoded words with some whitespace between them
        const string replaceRegex = @"(?<first>" + encodedWordRegex + @")\s+(?<second>" + encodedWordRegex + ")";

        // Then, find an occourance of such an expression, but remove the whitespace inbetween when found
        encodedWords = Regex.Replace(encodedWords, replaceRegex, "${first}${second}");

        string decodedWords = encodedWords;

        MatchCollection matches = Regex.Matches(encodedWords, encodedWordRegex);
        foreach (Match match in matches)
        {
            // If this match was not a success, we should not use it
            if (!match.Success) continue;

            string fullMatchValue = match.Value;

            string encodedText = match.Groups["Content"].Value;
            string encoding = match.Groups["Encoding"].Value;
            string charset = match.Groups["Charset"].Value;

            // Get the encoding which corrosponds to the character set
            Encoding charsetEncoding = EncodingFinder.FindEncoding(charset);

            // Store decoded text here when done
            string decodedText;

            // Encoding may also be written in lowercase
            switch (encoding.ToUpperInvariant())
            {
                // RFC:
                // The "B" encoding is identical to the "BASE64" 
                // encoding defined by RFC 2045.
                // http://tools.ietf.org/html/rfc2045#section-6.8
                case "B":
                    decodedText = Base64.Decode(encodedText, charsetEncoding);
                    break;

                // RFC:
                // The "Q" encoding is similar to the "Quoted-Printable" content-
                // transfer-encoding defined in RFC 2045.
                // There are more details to this. Please check
                // http://tools.ietf.org/html/rfc2047#section-4.2
                // 
                case "Q":
                    decodedText = QuotedPrintable.DecodeEncodedWord(encodedText, charsetEncoding);
                    break;

                default:
                    throw new ArgumentException("The encoding " + encoding + " was not recognized");
            }

            // Repalce our encoded value with our decoded value
            decodedWords = decodedWords.Replace(fullMatchValue, decodedText);
        }

        return decodedWords;
    }
}

/// <summary>
/// Contains common operations needed while decoding.
/// </summary>
internal static class Utility
{
    /// <summary>
    /// Remove quotes, if found, around the string.
    /// </summary>
    /// <param name="text">Text with quotes or without quotes</param>
    /// <returns>Text without quotes</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="text"/> is <see langword="null"/></exception>
    public static string RemoveQuotesIfAny(string text)
    {
        if (text == null)
            throw new ArgumentNullException("text");

        // Check if there are qoutes at both ends
        if (text[0] == '"' && text[text.Length - 1] == '"')
        {
            // Remove quotes at both ends
            return text.Substring(1, text.Length - 2);
        }

        // If no quotes were found, the text is just returned
        return text;
    }

    /// <summary>
    /// Split a string into a list of strings using a specified character.<br/>
    /// Everything inside quotes are ignored.
    /// </summary>
    /// <param name="input">A string to split</param>
    /// <param name="toSplitAt">The character to use to split with</param>
    /// <returns>A List of strings that was delimited by the <paramref name="toSplitAt"/> character</returns>
    public static List<string> SplitStringWithCharNotInsideQuotes(string input, char toSplitAt)
    {
        List<string> elements = new List<string>();

        int lastSplitLocation = 0;
        bool insideQuote = false;

        char[] characters = input.ToCharArray();

        for (int i = 0; i < characters.Length; i++)
        {
            char character = characters[i];
            if (character == '\"')
                insideQuote = !insideQuote;

            // Only split if we are not inside quotes
            if (character == toSplitAt && !insideQuote)
            {
                // We need to split
                int length = i - lastSplitLocation;
                elements.Add(input.Substring(lastSplitLocation, length));

                // Update last split location
                // + 1 so that we do not include the character used to split with next time
                lastSplitLocation = i + 1;
            }
        }

        // Add the last part
        elements.Add(input.Substring(lastSplitLocation, input.Length - lastSplitLocation));

        return elements;
    }
}

/// <summary>
/// Class used to decode RFC 2822 Date header fields.
/// </summary>
internal static class Rfc2822DateTime
{
    /// <summary>
    /// Converts a string in RFC 2822 format into a <see cref="DateTime"/> object
    /// </summary>
    /// <param name="inputDate">The date to convert</param>
    /// <returns>
    /// A valid <see cref="DateTime"/> object, which represents the same time as the string that was converted. 
    /// If <paramref name="inputDate"/> is not a valid date representation, then <see cref="DateTime.MinValue"/> is returned.
    /// </returns>
    /// <exception cref="ArgumentNullException"><exception cref="ArgumentNullException">If <paramref name="inputDate"/> is <see langword="null"/></exception></exception>
    /// <exception cref="ArgumentException">If the <paramref name="inputDate"/> could not be parsed into a <see cref="DateTime"/> object</exception>
    public static DateTime StringToDate(string inputDate)
    {
        if (inputDate == null)
            throw new ArgumentNullException("inputDate");

        // Old date specification allows comments and a lot of whitespace
        inputDate = StripCommentsAndExcessWhitespace(inputDate);

        try
        {
            // Extract the DateTime
            DateTime dateTime = ExtractDateTime(inputDate);

            // If a day-name is specified in the inputDate string, check if it fits with the date
            ValidateDayNameIfAny(dateTime, inputDate);

            // Convert the date into UTC
            dateTime = new DateTime(dateTime.Ticks, DateTimeKind.Utc);

            // Adjust according to the time zone
            dateTime = AdjustTimezone(dateTime, inputDate);

            // Return the parsed date
            return dateTime;
        }
        catch (FormatException e)	// Convert.ToDateTime() Failure
        {
            throw new ArgumentException("Could not parse date: " + e.Message + ". Input was: \"" + inputDate + "\"", e);
        }
        catch (ArgumentException e)
        {
            throw new ArgumentException("Could not parse date: " + e.Message + ". Input was: \"" + inputDate + "\"", e);
        }
    }

    /// <summary>
    /// Adjust the <paramref name="dateTime"/> object given according to the timezone specified in the <paramref name="dateInput"/>.
    /// </summary>
    /// <param name="dateTime">The date to alter</param>
    /// <param name="dateInput">The input date, in which the timezone can be found</param>
    /// <returns>An date altered according to the timezone</returns>
    /// <exception cref="ArgumentException">If no timezone was found in <paramref name="dateInput"/></exception>
    private static DateTime AdjustTimezone(DateTime dateTime, string dateInput)
    {
        // We know that the timezones are always in the last part of the date input
        string[] parts = dateInput.Split(' ');
        string lastPart = parts[parts.Length - 1];

        // Convert timezones in older formats to [+-]dddd format.
        lastPart = Regex.Replace(lastPart, @"UT|GMT|EST|EDT|CST|CDT|MST|MDT|PST|PDT|[A-I]|[K-Y]|Z", MatchEvaluator);

        // Find the timezone specification
        // Example: Fri, 21 Nov 1997 09:55:06 -0600
        // finds -0600
        Match match = Regex.Match(lastPart, @"[\+-](?<hours>\d\d)(?<minutes>\d\d)");
        if (match.Success)
        {
            // We have found that the timezone is in +dddd or -dddd format
            // Add the number of hours and minutes to our found date
            int hours = int.Parse(match.Groups["hours"].Value);
            int minutes = int.Parse(match.Groups["minutes"].Value);

            int factor = match.Value[0] == '+' ? -1 : 1;

            dateTime = dateTime.AddHours(factor * hours);
            dateTime = dateTime.AddMinutes(factor * minutes);

            return dateTime;
        }

        //DefaultLogger.Log.LogDebug("No timezone found in date: " + dateInput + ". Using -0000 as default.");

        // A timezone of -0000 is the same as doing nothing
        return dateTime;
    }

    /// <summary>
    /// Convert timezones in older formats to [+-]dddd format.
    /// </summary>
    /// <param name="match">The match that was found</param>
    /// <returns>The string to replace the matched string with</returns>
    private static string MatchEvaluator(Match match)
    {
        if (!match.Success)
        {
            throw new ArgumentException("Match success are always true");
        }

        switch (match.Value)
        {
            // "A" through "I"
            // are equivalent to "+0100" through "+0900" respectively
            case "A": return "+0100";
            case "B": return "+0200";
            case "C": return "+0300";
            case "D": return "+0400";
            case "E": return "+0500";
            case "F": return "+0600";
            case "G": return "+0700";
            case "H": return "+0800";
            case "I": return "+0900";

            // "K", "L", and "M"
            // are equivalent to "+1000", "+1100", and "+1200" respectively
            case "K": return "+1000";
            case "L": return "+1100";
            case "M": return "+1200";

            // "N" through "Y"
            // are equivalent to "-0100" through "-1200" respectively
            case "N": return "-0100";
            case "O": return "-0200";
            case "P": return "-0300";
            case "Q": return "-0400";
            case "R": return "-0500";
            case "S": return "-0600";
            case "T": return "-0700";
            case "U": return "-0800";
            case "V": return "-0900";
            case "W": return "-1000";
            case "X": return "-1100";
            case "Y": return "-1200";

            // "Z", "UT" and "GMT"
            // is equivalent to "+0000"
            case "Z":
            case "UT":
            case "GMT":
                return "+0000";

            // US time zones
            case "EDT": return "-0400"; // EDT is semantically equivalent to -0400
            case "EST": return "-0500"; // EST is semantically equivalent to -0500
            case "CDT": return "-0500"; // CDT is semantically equivalent to -0500
            case "CST": return "-0600"; // CST is semantically equivalent to -0600
            case "MDT": return "-0600"; // MDT is semantically equivalent to -0600
            case "MST": return "-0700"; // MST is semantically equivalent to -0700
            case "PDT": return "-0700"; // PDT is semantically equivalent to -0700
            case "PST": return "-0800"; // PST is semantically equivalent to -0800

            default:
                throw new ArgumentException("Unexpected input");
        }
    }

    /// <summary>
    /// Extracts the date and time parts from the <paramref name="dateInput"/>
    /// </summary>
    /// <param name="dateInput">The date input string, from which to extract the date and time parts</param>
    /// <returns>The extracted date part or <see langword="DateTime.MinValue"/> if <paramref name="dateInput"/> is not recognized as a valid date.</returns>
    private static DateTime ExtractDateTime(string dateInput)
    {
        // Matches the date and time part of a string
        // Example: Fri, 21 Nov 1997 09:55:06 -0600
        // Finds: 21 Nov 1997 09:55:06
        // Seconds does not need to be specified
        // Even though it is illigal, sometimes hours, minutes or seconds are only specified with one digit
        Match match = Regex.Match(dateInput, @"\d\d? .+ (\d\d\d\d|\d\d) \d?\d:\d?\d(:\d?\d)?");
        if (match.Success)
        {
            return Convert.ToDateTime(match.Value, CultureInfo.InvariantCulture);
        }

        //DefaultLogger.Log.LogError("The given date does not appear to be in a valid format: " + dateInput);
        return DateTime.MinValue;
    }

    /// <summary>
    /// Validates that the given <paramref name="dateTime"/> agrees with a day-name specified
    /// in <paramref name="dateInput"/>.
    /// </summary>
    /// <param name="dateTime">The time to check</param>
    /// <param name="dateInput">The date input to extract the day-name from</param>
    /// <exception cref="ArgumentException">If <paramref name="dateTime"/> and <paramref name="dateInput"/> does not agree on the day</exception>
    private static void ValidateDayNameIfAny(DateTime dateTime, string dateInput)
    {
        // Check if there is a day name in front of the date
        // Example: Fri, 21 Nov 1997 09:55:06 -0600
        if (dateInput.Length >= 4 && dateInput[3] == ',')
        {
            string dayName = dateInput.Substring(0, 3);

            // If a dayName was specified. Check that the dateTime and the dayName
            // agrees on which day it is
            // This is just a failure-check and could be left out
            if ((dateTime.DayOfWeek == DayOfWeek.Monday && !dayName.Equals("Mon")) ||
                (dateTime.DayOfWeek == DayOfWeek.Tuesday && !dayName.Equals("Tue")) ||
                (dateTime.DayOfWeek == DayOfWeek.Wednesday && !dayName.Equals("Wed")) ||
                (dateTime.DayOfWeek == DayOfWeek.Thursday && !dayName.Equals("Thu")) ||
                (dateTime.DayOfWeek == DayOfWeek.Friday && !dayName.Equals("Fri")) ||
                (dateTime.DayOfWeek == DayOfWeek.Saturday && !dayName.Equals("Sat")) ||
                (dateTime.DayOfWeek == DayOfWeek.Sunday && !dayName.Equals("Sun")))
            {
                //DefaultLogger.Log.LogDebug("Day-name does not correspond to the weekday of the date: " + dateInput);
            }
        }

        // If no day name was found no checks can be made
    }

    /// <summary>
    /// Strips and removes all comments and excessive whitespace from the string
    /// </summary>
    /// <param name="input">The input to strip from</param>
    /// <returns>The stripped string</returns>
    private static string StripCommentsAndExcessWhitespace(string input)
    {
        // Strip out comments
        // Also strips out nested comments
        input = Regex.Replace(input, @"(\((?>\((?<C>)|\)(?<-C>)|.?)*(?(C)(?!))\))", "");

        // Reduce any whitespace character to one space only
        input = Regex.Replace(input, @"\s+", " ");

        // Remove all initial whitespace
        input = Regex.Replace(input, @"^\s+", "");

        // Remove all ending whitespace
        input = Regex.Replace(input, @"\s+$", "");

        // Remove spaces at colons
        // Example: 22: 33 : 44 => 22:33:44
        input = Regex.Replace(input, @" ?: ?", ":");

        return input;
    }
}

/// <summary>
/// Utility class for dealing with Base64 encoded strings
/// </summary>
internal static class Base64
{
    /// <summary>
    /// Decodes a base64 encoded string into the bytes it describes
    /// </summary>
    /// <param name="base64Encoded">The string to decode</param>
    /// <returns>A byte array that the base64 string described</returns>
    public static byte[] Decode(string base64Encoded)
    {
        try
        {
            return Convert.FromBase64String(base64Encoded);
        }
        catch //(FormatException e)
        {
            //DefaultLogger.Log.LogError("Base64: (FormatException) " + e.Message + "\r\nOn string: " + base64Encoded);
            throw;
        }
    }

    /// <summary>
    /// Decodes a Base64 encoded string using a specified <see cref="System.Text.Encoding"/> 
    /// </summary>
    /// <param name="base64Encoded">Source string to decode</param>
    /// <param name="encoding">The encoding to use for the decoded byte array that <paramref name="base64Encoded"/> describes</param>
    /// <returns>A decoded string</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="base64Encoded"/> or <paramref name="encoding"/> is <see langword="null"/></exception>
    /// <exception cref="FormatException">If <paramref name="base64Encoded"/> is not a valid base64 encoded string</exception>
    public static string Decode(string base64Encoded, Encoding encoding)
    {
        if (base64Encoded == null)
            throw new ArgumentNullException("base64Encoded");

        if (encoding == null)
            throw new ArgumentNullException("encoding");

        return encoding.GetString(Decode(base64Encoded));
    }
}

/// <summary>
/// Used for decoding Quoted-Printable text.<br/>
/// This is a robust implementation of a Quoted-Printable decoder defined in <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a> and <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>.<br/>
/// Every measurement has been taken to conform to the RFC.
/// </summary>
internal static class QuotedPrintable
{
    /// <summary>
    /// Decodes a Quoted-Printable string according to <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>.<br/>
    /// RFC 2047 is used for decoding Encoded-Word encoded strings.
    /// </summary>
    /// <param name="toDecode">Quoted-Printable encoded string</param>
    /// <param name="encoding">Specifies which encoding the returned string will be in</param>
    /// <returns>A decoded string in the correct encoding</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> or <paramref name="encoding"/> is <see langword="null"/></exception>
    public static string DecodeEncodedWord(string toDecode, Encoding encoding)
    {
        if (toDecode == null)
            throw new ArgumentNullException("toDecode");

        if (encoding == null)
            throw new ArgumentNullException("encoding");

        // Decode the QuotedPrintable string and return it
        return encoding.GetString(Rfc2047QuotedPrintableDecode(toDecode, true));
    }

    /// <summary>
    /// Decodes a Quoted-Printable string according to <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a>.<br/>
    /// RFC 2045 specifies the decoding of a body encoded with Content-Transfer-Encoding of quoted-printable.
    /// </summary>
    /// <param name="toDecode">Quoted-Printable encoded string</param>
    /// <returns>A decoded byte array that the Quoted-Printable encoded string described</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
    public static byte[] DecodeContentTransferEncoding(string toDecode)
    {
        if (toDecode == null)
            throw new ArgumentNullException("toDecode");

        // Decode the QuotedPrintable string and return it
        return Rfc2047QuotedPrintableDecode(toDecode, false);
    }

    /// <summary>
    /// This is the actual decoder.
    /// </summary>
    /// <param name="toDecode">The string to be decoded from Quoted-Printable</param>
    /// <param name="encodedWordVariant">
    /// If <see langword="true"/>, specifies that RFC 2047 quoted printable decoding is used.<br/>
    /// This is for quoted-printable encoded words<br/>
    /// <br/>
    /// If <see langword="false"/>, specifies that RFC 2045 quoted printable decoding is used.<br/>
    /// This is for quoted-printable Content-Transfer-Encoding
    /// </param>
    /// <returns>A decoded byte array that was described by <paramref name="toDecode"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc2047#section-4.2">RFC 2047 section 4.2</a> for RFC details</remarks>
    private static byte[] Rfc2047QuotedPrintableDecode(string toDecode, bool encodedWordVariant)
    {
        if (toDecode == null)
            throw new ArgumentNullException("toDecode");

        // Create a byte array builder which is roughly equivalent to a StringBuilder
        using (MemoryStream byteArrayBuilder = new MemoryStream())
        {
            // Remove illegal control characters
            toDecode = RemoveIllegalControlCharacters(toDecode);

            // Run through the whole string that needs to be decoded
            for (int i = 0; i < toDecode.Length; i++)
            {
                char currentChar = toDecode[i];
                if (currentChar == '=')
                {
                    // Check that there is at least two characters behind the equal sign
                    if (toDecode.Length - i < 3)
                    {
                        // We are at the end of the toDecode string, but something is missing. Handle it the way RFC 2045 states
                        WriteAllBytesToStream(byteArrayBuilder, DecodeEqualSignNotLongEnough(toDecode.Substring(i)));

                        // Since it was the last part, we should stop parsing anymore
                        break;
                    }

                    // Decode the Quoted-Printable part
                    string quotedPrintablePart = toDecode.Substring(i, 3);
                    WriteAllBytesToStream(byteArrayBuilder, DecodeEqualSign(quotedPrintablePart));

                    // We now consumed two extra characters. Go forward two extra characters
                    i += 2;
                }
                else
                {
                    // This character is not quoted printable hex encoded.

                    // Could it be the _ character, which represents space
                    // and are we using the encoded word variant of QuotedPrintable
                    if (currentChar == '_' && encodedWordVariant)
                    {
                        // The RFC specifies that the "_" always represents hexadecimal 20 even if the
                        // SPACE character occupies a different code position in the character set in use.
                        byteArrayBuilder.WriteByte(0x20);
                    }
                    else
                    {
                        // This is not encoded at all. This is a literal which should just be included into the output.
                        byteArrayBuilder.WriteByte((byte)currentChar);
                    }
                }
            }

            return byteArrayBuilder.ToArray();
        }
    }

    /// <summary>
    /// Writes all bytes in a byte array to a stream
    /// </summary>
    /// <param name="stream">The stream to write to</param>
    /// <param name="toWrite">The bytes to write to the <paramref name="stream"/></param>
    private static void WriteAllBytesToStream(Stream stream, byte[] toWrite)
    {
        stream.Write(toWrite, 0, toWrite.Length);
    }

    /// <summary>
    /// RFC 2045 states about robustness:<br/>
    /// <code>
    /// Control characters other than TAB, or CR and LF as parts of CRLF pairs,
    /// must not appear. The same is true for octets with decimal values greater
    /// than 126.  If found in incoming quoted-printable data by a decoder, a
    /// robust implementation might exclude them from the decoded data and warn
    /// the user that illegal characters were discovered.
    /// </code>
    /// Control characters are defined in RFC 2396 as<br/>
    /// <c>control = US-ASCII coded characters 00-1F and 7F hexadecimal</c>
    /// </summary>
    /// <param name="input">String to be stripped from illegal control characters</param>
    /// <returns>A string with no illegal control characters</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
    private static string RemoveIllegalControlCharacters(string input)
    {
        if (input == null)
            throw new ArgumentNullException("input");

        // First we remove any \r or \n which is not part of a \r\n pair
        input = RemoveCarriageReturnAndNewLinewIfNotInPair(input);

        // Here only legal \r\n is left over
        // We now simply keep them, and the \t which is also allowed
        // \x0A = \n
        // \x0D = \r
        // \x09 = \t)
        return Regex.Replace(input, "[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]", "");
    }

    /// <summary>
    /// This method will remove any \r and \n which is not paired as \r\n
    /// </summary>
    /// <param name="input">String to remove lonely \r and \n's from</param>
    /// <returns>A string without lonely \r and \n's</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
    private static string RemoveCarriageReturnAndNewLinewIfNotInPair(string input)
    {
        if (input == null)
            throw new ArgumentNullException("input");

        // Use this for building up the new string. This is used for performance instead
        // of altering the input string each time a illegal token is found
        StringBuilder newString = new StringBuilder(input.Length);

        for (int i = 0; i < input.Length; i++)
        {
            // There is a character after it
            // Check for lonely \r
            // There is a lonely \r if it is the last character in the input or if there
            // is no \n following it
            if (input[i] == '\r' && (i + 1 >= input.Length || input[i + 1] != '\n'))
            {
                // Illegal token \r found. Do not add it to the new string

                // Check for lonely \n
                // There is a lonely \n if \n is the first character or if there
                // is no \r in front of it
            }
            else if (input[i] == '\n' && (i - 1 < 0 || input[i - 1] != '\r'))
            {
                // Illegal token \n found. Do not add it to the new string
            }
            else
            {
                // No illegal tokens found. Simply insert the character we are at
                // in our new string
                newString.Append(input[i]);
            }
        }

        return newString.ToString();
    }

    /// <summary>
    /// RFC 2045 says that a robust implementation should handle:<br/>
    /// <code>
    /// An "=" cannot be the ultimate or penultimate character in an encoded
    /// object. This could be handled as in case (2) above.
    /// </code>
    /// Case (2) is:<br/>
    /// <code>
    /// An "=" followed by a character that is neither a
    /// hexadecimal digit (including "abcdef") nor the CR character of a CRLF pair
    /// is illegal.  This case can be the result of US-ASCII text having been
    /// included in a quoted-printable part of a message without itself having
    /// been subjected to quoted-printable encoding.  A reasonable approach by a
    /// robust implementation might be to include the "=" character and the
    /// following character in the decoded data without any transformation and, if
    /// possible, indicate to the user that proper decoding was not possible at
    /// this point in the data.
    /// </code>
    /// </summary>
    /// <param name="decode">
    /// The string to decode which cannot have length above or equal to 3
    /// and must start with an equal sign.
    /// </param>
    /// <returns>A decoded byte array</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="decode"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentException">Thrown if a the <paramref name="decode"/> parameter has length above 2 or does not start with an equal sign.</exception>
    private static byte[] DecodeEqualSignNotLongEnough(string decode)
    {
        if (decode == null)
            throw new ArgumentNullException("decode");

        // We can only decode wrong length equal signs
        if (decode.Length >= 3)
            throw new ArgumentException("decode must have length lower than 3", "decode");

        // First char must be =
        if (decode[0] != '=')
            throw new ArgumentException("First part of decode must be an equal sign", "decode");

        // We will now believe that the string sent to us, was actually not encoded
        // Therefore it must be in US-ASCII and we will return the bytes it corrosponds to
        return Encoding.ASCII.GetBytes(decode);
    }

    /// <summary>
    /// This helper method will decode a string of the form "=XX" where X is any character.<br/>
    /// This method will never fail, unless an argument of length not equal to three is passed.
    /// </summary>
    /// <param name="decode">The length 3 character that needs to be decoded</param>
    /// <returns>A decoded byte array</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="decode"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentException">Thrown if a the <paramref name="decode"/> parameter does not have length 3 or does not start with an equal sign.</exception>
    private static byte[] DecodeEqualSign(string decode)
		{
			if (decode == null)
				throw new ArgumentNullException("decode");

			// We can only decode the string if it has length 3 - other calls to this function is invalid
			if (decode.Length != 3)
				throw new ArgumentException("decode must have length 3", "decode");

			// First char must be =
			if (decode[0] != '=')
				throw new ArgumentException("decode must start with an equal sign", "decode");

			// There are two cases where an equal sign might appear
			// It might be a
			//   - hex-string like =3D, denoting the character with hex value 3D
			//   - it might be the last character on the line before a CRLF
			//     pair, denoting a soft linebreak, which simply
			//     splits the text up, because of the 76 chars per line restriction
			if (decode.Contains("\r\n"))
			{
				// Soft break detected
				// We want to return string.Empty which is equivalent to a zero-length byte array
				return new byte[0]; 
			}

			// Hex string detected. Convertion needed.
			// It might be that the string located after the equal sign is not hex characters
			// An example: =JU
			// In that case we would like to catch the FormatException and do something else
			try
			{
				// The number part of the string is the last two digits. Here we simply remove the equal sign
				string numberString = decode.Substring(1);

				// Now we create a byte array with the converted number encoded in the string as a hex value (base 16)
				// This will also handle illegal encodings like =3d where the hex digits are not uppercase,
				// which is a robustness requirement from RFC 2045.
				byte[] oneByte = { Convert.ToByte(numberString, 16) };

				// Simply return our one byte byte array
				return oneByte;
			} catch (FormatException)
			{
				// RFC 2045 says about robust implementation:
				// An "=" followed by a character that is neither a
				// hexadecimal digit (including "abcdef") nor the CR
				// character of a CRLF pair is illegal.  This case can be
				// the result of US-ASCII text having been included in a
				// quoted-printable part of a message without itself
				// having been subjected to quoted-printable encoding.  A
				// reasonable approach by a robust implementation might be
				// to include the "=" character and the following
				// character in the decoded data without any
				// transformation and, if possible, indicate to the user
				// that proper decoding was not possible at this point in
				// the data.

				// So we choose to believe this is actually an un-encoded string
				// Therefore it must be in US-ASCII and we will return the bytes it corrosponds to
				return Encoding.ASCII.GetBytes(decode);
			}
		}
}

///<summary>
/// Utility class that divides a message into a body and a header.<br/>
/// The header is then parsed to a strongly typed <see cref="MessageHeader"/> object.
///</summary>
internal static class HeaderExtractor
{
    /// <summary>
    /// Find the end of the header section in a byte array.<br/>
    /// The headers have ended when a blank line is found
    /// </summary>
    /// <param name="messageContent">The full message stored as a byte array</param>
    /// <returns>The position of the line just after the header end blank line</returns>
    private static int FindHeaderEndPosition(byte[] messageContent)
    {
        // Convert the byte array into a stream
        using (Stream stream = new MemoryStream(messageContent))
        {
            while (true)
            {
                // Read a line from the stream. We know headers are in US-ASCII
                // therefore it is not problem to read them as such
                string line = StreamUtility.ReadLineAsAscii(stream);

                // The end of headers is signaled when a blank line is found
                // or if the line is null - in which case the email is actually an email with
                // only headers but no body
                if (string.IsNullOrEmpty(line))
                    return (int)stream.Position;
            }
        }
    }

    /// <summary>
    /// Extract the header part and body part of a message.<br/>
    /// The headers are then parsed to a strongly typed <see cref="MessageHeader"/> object.
    /// </summary>
    /// <param name="fullRawMessage">The full message in bytes where header and body needs to be extracted from</param>
    /// <param name="headers">The extracted header parts of the message</param>
    /// <param name="body">The body part of the message</param>
    /// <exception cref="ArgumentNullException">If <paramref name="fullRawMessage"/> is <see langword="null"/></exception>
    public static void ExtractHeadersAndBody(byte[] fullRawMessage, out MessageHeader headers, out byte[] body)
    {
        if (fullRawMessage == null)
            throw new ArgumentNullException("fullRawMessage");

        // Find the end location of the headers
        int endOfHeaderLocation = FindHeaderEndPosition(fullRawMessage);

        // The headers are always in ASCII - therefore we can convert the header part into a string
        // using US-ASCII encoding
        string headersString = Encoding.ASCII.GetString(fullRawMessage, 0, endOfHeaderLocation);

        // Now parse the headers to a NameValueCollection
        NameValueCollection headersUnparsedCollection = ExtractHeaders(headersString);

        // Use the NameValueCollection to parse it into a strongly-typed MessageHeader header
        headers = new MessageHeader(headersUnparsedCollection);

        // Since we know where the headers end, we also know where the body is
        // Copy the body part into the body parameter
        body = new byte[fullRawMessage.Length - endOfHeaderLocation];
        Array.Copy(fullRawMessage, endOfHeaderLocation, body, 0, body.Length);
    }

    /// <summary>
    /// Method that takes a full message and extract the headers from it.
    /// </summary>
    /// <param name="messageContent">The message to extract headers from. Does not need the body part. Needs the empty headers end line.</param>
    /// <returns>A collection of Name and Value pairs of headers</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="messageContent"/> is <see langword="null"/></exception>
    private static NameValueCollection ExtractHeaders(string messageContent)
    {
        if (messageContent == null)
            throw new ArgumentNullException("messageContent");

        NameValueCollection headers = new NameValueCollection();

        using (StringReader messageReader = new StringReader(messageContent))
        {
            // Read until all headers have ended.
            // The headers ends when an empty line is encountered
            // An empty message might actually not have an empty line, in which
            // case the headers end with null value.
            string line;
            while (!string.IsNullOrEmpty(line = messageReader.ReadLine()))
            {
                // Split into name and value
                KeyValuePair<string, string> header = SeparateHeaderNameAndValue(line);

                // First index is header name
                string headerName = header.Key;

                // Second index is the header value.
                // Use a StringBuilder since the header value may be continued on the next line
                StringBuilder headerValue = new StringBuilder(header.Value);

                // Keep reading until we would hit next header
                // This if for handling multi line headers
                while (IsMoreLinesInHeaderValue(messageReader))
                {
                    // Unfolding is accomplished by simply removing any CRLF
                    // that is immediately followed by WSP
                    // This was done using ReadLine (it discards CRLF)
                    // See http://tools.ietf.org/html/rfc822#section-3.1.1 for more information
                    string moreHeaderValue = messageReader.ReadLine();

                    // If this exception is ever raised, there is an serious algorithm failure
                    // IsMoreLinesInHeaderValue does not return true if the next line does not exist
                    // This check is only included to stop the nagging "possibly null" code analysis hint
                    if (moreHeaderValue == null)
                        throw new ArgumentException("This will never happen");

                    // Simply append the line just read to the header value
                    headerValue.Append(moreHeaderValue);
                }

                // Now we have the name and full value. Add it
                headers.Add(headerName, headerValue.ToString());
            }
        }

        return headers;
    }

    /// <summary>
    /// Check if the next line is part of the current header value we are parsing by
    /// peeking on the next character of the <see cref="TextReader"/>.<br/>
    /// This should only be called while parsing headers.
    /// </summary>
    /// <param name="reader">The reader from which the header is read from</param>
    /// <returns><see langword="true"/> if multi-line header. <see langword="false"/> otherwise</returns>
    private static bool IsMoreLinesInHeaderValue(TextReader reader)
    {
        int peek = reader.Peek();
        if (peek == -1)
            return false;

        char peekChar = (char)peek;

        // A multi line header must have a whitespace character
        // on the next line if it is to be continued
        return peekChar == ' ' || peekChar == '\t';
    }

    /// <summary>
    /// Separate a full header line into a header name and a header value.
    /// </summary>
    /// <param name="rawHeader">The raw header line to be separated</param>
    /// <exception cref="ArgumentNullException">If <paramref name="rawHeader"/> is <see langword="null"/></exception>
    internal static KeyValuePair<string, string> SeparateHeaderNameAndValue(string rawHeader)
    {
        if (rawHeader == null)
            throw new ArgumentNullException("rawHeader");

        string key = string.Empty;
        string value = string.Empty;

        int indexOfColon = rawHeader.IndexOf(':');

        // Check if it is allowed to make substring calls
        if (indexOfColon >= 0 && rawHeader.Length >= indexOfColon + 1)
        {
            key = rawHeader.Substring(0, indexOfColon).Trim();
            value = rawHeader.Substring(indexOfColon + 1).Trim();
        }

        return new KeyValuePair<string, string>(key, value);
    }
}

/// <summary>
/// Utility class used by OpenPop for mapping from a characterSet to an <see cref="Encoding"/>.<br/>
/// <br/>
/// The functionality of the class can be altered by adding mappings
/// using <see cref="AddMapping"/> and by adding a <see cref="FallbackDecoder"/>.<br/>
/// <br/>
/// Given a characterSet, it will try to find the Encoding as follows:
/// <list type="number">
///     <item>
///         <description>If a mapping for the characterSet was added, use the specified Encoding from there. Mappings can be added using <see cref="AddMapping"/>.</description>
///     </item>
///     <item>
///         <description>Try to parse the characterSet and look it up using <see cref="Encoding.GetEncoding(int)"/> for codepages or <see cref="Encoding.GetEncoding(string)"/> for named encodings.</description>
///     </item>
///     <item>
///         <description>If an encoding is not found yet, use the <see cref="FallbackDecoder"/> if defined. The <see cref="FallbackDecoder"/> is user defined.</description>
///     </item>
/// </list>
/// </summary>
public static class EncodingFinder
{
    /// <summary>
    /// Delegate that is used when the EncodingFinder is unable to find an encoding by
    /// using the <see cref="EncodingFinder.EncodingMap"/> or general code.<br/>
    /// This is used as a last resort and can be used for setting a default encoding or
    /// for finding an encoding on runtime for some <paramref name="characterSet"/>.
    /// </summary>
    /// <param name="characterSet">The character set to find an encoding for.</param>
    /// <returns>An encoding for the <paramref name="characterSet"/> or <see langword="null"/> if none could be found.</returns>
    public delegate Encoding FallbackDecoderDelegate(string characterSet);

    /// <summary>
    /// Last resort decoder. <seealso cref="FallbackDecoderDelegate"/>.
    /// </summary>
    public static FallbackDecoderDelegate FallbackDecoder { private get { return _fallbackDecoder; } set { _fallbackDecoder = value; } }
    private static FallbackDecoderDelegate _fallbackDecoder;

    /// <summary>
    /// Mapping from charactersets to encodings.
    /// </summary>
    private static Dictionary<string, Encoding> EncodingMap { get { return _encodingMap; } set { _encodingMap = value; } }
    private static Dictionary<string, Encoding> _encodingMap;

    /// <summary>
    /// Initialize the EncodingFinder
    /// </summary>
    static EncodingFinder()
    {
        Reset();
    }

    /// <summary>
    /// Used to reset this static class to facilite isolated unit testing.
    /// </summary>
    internal static void Reset()
    {
        EncodingMap = new Dictionary<string, Encoding>();
        FallbackDecoder = null;

        // Some emails incorrectly specify the encoding as utf8, but it should have been utf-8.
        AddMapping("utf8", Encoding.UTF8);
    }

    /// <summary>
    /// Parses a character set into an encoding.
    /// </summary>
    /// <param name="characterSet">The character set to parse</param>
    /// <returns>An encoding which corresponds to the character set</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="characterSet"/> is <see langword="null"/></exception>
    internal static Encoding FindEncoding(string characterSet)
    {
        if (characterSet == null)
            throw new ArgumentNullException("characterSet");

        string charSetUpper = characterSet.ToUpperInvariant();

        // Check if the characterSet is explicitly mapped to an encoding
        if (EncodingMap.ContainsKey(charSetUpper))
            return EncodingMap[charSetUpper];

        // Try to find the generally find the encoding
        try
        {
            if (charSetUpper.Contains("WINDOWS") || charSetUpper.Contains("CP"))
            {
                // It seems the characterSet contains an codepage value, which we should use to parse the encoding
                charSetUpper = charSetUpper.Replace("CP", ""); // Remove cp
                charSetUpper = charSetUpper.Replace("WINDOWS", ""); // Remove windows
                charSetUpper = charSetUpper.Replace("-", ""); // Remove - which could be used as cp-1554

                // Now we hope the only thing left in the characterSet is numbers.
                int codepageNumber = int.Parse(charSetUpper, CultureInfo.InvariantCulture);

                return Encoding.GetEncoding(codepageNumber);
            }

            // It seems there is no codepage value in the characterSet. It must be a named encoding
            return Encoding.GetEncoding(characterSet);
        }
        catch (ArgumentException)
        {
            // The encoding could not be found generally. 
            // Try to use the FallbackDecoder if it is defined.

            // Check if it is defined
            if (FallbackDecoder == null)
                throw; // It was not defined - throw catched exception

            // Use the FallbackDecoder
            Encoding fallbackDecoderResult = FallbackDecoder(characterSet);

            // Check if the FallbackDecoder had a solution
            if (fallbackDecoderResult != null)
                return fallbackDecoderResult;

            // If no solution was found, throw catched exception
            throw;
        }
    }

    /// <summary>
    /// Puts a mapping from <paramref name="characterSet"/> to <paramref name="encoding"/>
    /// into the <see cref="EncodingFinder"/>'s internal mapping Dictionary.
    /// </summary>
    /// <param name="characterSet">The string that maps to the <paramref name="encoding"/></param>
    /// <param name="encoding">The <see cref="Encoding"/> that should be mapped from <paramref name="characterSet"/></param>
    /// <exception cref="ArgumentNullException">If <paramref name="characterSet"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentNullException">If <paramref name="encoding"/> is <see langword="null"/></exception>
    public static void AddMapping(string characterSet, Encoding encoding)
    {
        if (characterSet == null)
            throw new ArgumentNullException("characterSet");

        if (encoding == null)
            throw new ArgumentNullException("encoding");

        // Add the mapping using uppercase
        EncodingMap.Add(characterSet.ToUpperInvariant(), encoding);
    }
}

/// <summary>
/// A MessagePart is a part of an email message used to describe the whole email parse tree.<br/>
/// <br/>
/// <b>Email messages are tree structures</b>:<br/>
/// Email messages may contain large tree structures, and the MessagePart are the nodes of the this structure.<br/>
/// A MessagePart may either be a leaf in the structure or a internal node with links to other MessageParts.<br/>
/// The root of the message tree is the <see cref="Message"/> class.<br/>
/// <br/>
/// <b>Leafs</b>:<br/>
/// If a MessagePart is a leaf, the part is not a <see cref="IsMultiPart">MultiPart</see> message.<br/>
/// Leafs are where the contents of an email are placed.<br/>
/// This includes, but is not limited to: attachments, text or images referenced from HTML.<br/>
/// The content of an attachment can be fetched by using the <see cref="Body"/> property.<br/>
/// If you want to have the text version of a MessagePart, use the <see cref="GetBodyAsText"/> method which will<br/>
/// convert the <see cref="Body"/> into a string using the encoding the message was sent with.<br/>
/// <br/>
/// <b>Internal nodes</b>:<br/>
/// If a MessagePart is an internal node in the email tree structure, then the part is a <see cref="IsMultiPart">MultiPart</see> message.<br/>
/// The <see cref="MessageParts"/> property will then contain links to the parts it contain.<br/>
/// The <see cref="Body"/> property of the MessagePart will not be set.<br/>
/// <br/>
/// See the example for a parsing example.<br/>
/// This class cannot be instantiated from outside the library.
/// </summary>
/// <example>
/// This example illustrates how the message parse tree looks like given a specific message<br/>
/// <br/>
/// The message source in this example is:<br/>
/// <code>
/// MIME-Version: 1.0
///	Content-Type: multipart/mixed; boundary="frontier"
///	
///	This is a message with multiple parts in MIME format.
///	--frontier
/// Content-Type: text/plain
///	
///	This is the body of the message.
///	--frontier
///	Content-Type: application/octet-stream
///	Content-Transfer-Encoding: base64
///	
///	PGh0bWw+CiAgPGHLYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg
///	Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==
///	--frontier--
/// </code>
/// The tree will look as follows, where the content-type media type of the message is listed<br/>
/// <code>
/// - Message root
///   - multipart/mixed MessagePart
///     - text/plain MessagePart
///     - application/octet-stream MessagePart
/// </code>
/// It is possible to have more complex message trees like the following:<br/>
/// <code>
/// - Message root
///   - multipart/mixed MessagePart
///     - text/plain MessagePart
///     - text/plain MessagePart
///     - multipart/parallel
///       - audio/basic
///       - image/tiff
///     - text/enriched
///     - message/rfc822
/// </code>
/// But it is also possible to have very simple message trees like:<br/>
/// <code>
/// - Message root
///   - text/plain
/// </code>
/// </example>
public class MessagePart
{
    #region Public properties
    /// <summary>
    /// The Content-Type header field.<br/>
    /// <br/>
    /// If not set, the ContentType is created by the default "text/plain; charset=us-ascii" which is
    /// defined in <a href="http://tools.ietf.org/html/rfc2045#section-5.2">RFC 2045 section 5.2</a>.<br/>
    /// <br/>
    /// If set, the default is overridden.
    /// </summary>
    public ContentType ContentType { get { return _contentType; } private set { _contentType = value; } }
    private ContentType _contentType;

    /// <summary>
    /// A human readable description of the body<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-Description header was present in the message.<br/>
    /// </summary>
    public string ContentDescription { get { return _contentDescription; } private set { _contentDescription = value; } }
    private string _contentDescription;

    /// <summary>
    /// This header describes the Content encoding during transfer.<br/>
    /// <br/>
    /// If no Content-Transfer-Encoding header was present in the message, it is set
    /// to the default of <see cref="Header.ContentTransferEncoding.SevenBit">SevenBit</see> in accordance to the RFC.
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for details</remarks>
    public ContentTransferEncoding ContentTransferEncoding { get { return _contentTransferEncoding; } private set { _contentTransferEncoding = value; } }
    private ContentTransferEncoding _contentTransferEncoding;

    /// <summary>
    /// ID of the content part (like an attached image). Used with MultiPart messages.<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-ID header field was present in the message.
    /// </summary>
    public string ContentId { get { return _contentId; } private set { _contentId = value; } }
    private string _contentId;

    /// <summary>
    /// Used to describe if a <see cref="MessagePart"/> is to be displayed or to be though of as an attachment.<br/>
    /// Also contains information about filename if such was sent.<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-Disposition header field was present in the message
    /// </summary>
    public ContentDisposition ContentDisposition { get { return _contentDisposition; } private set { _contentDisposition = value; } }
    private ContentDisposition _contentDisposition;

    /// <summary>
    /// This is the encoding used to parse the message body if the <see cref="MessagePart"/><br/>
    /// is not a MultiPart message. It is derived from the <see cref="ContentType"/> character set property.
    /// </summary>
    public Encoding BodyEncoding { get { return _bodyEncoding; } private set { _bodyEncoding = value; } }
    private Encoding _bodyEncoding;

    /// <summary>
    /// This is the parsed body of this <see cref="MessagePart"/>.<br/>
    /// It is parsed in that way, if the body was ContentTransferEncoded, it has been decoded to the
    /// correct bytes.<br/>
    /// <br/>
    /// It will be <see langword="null"/> if this <see cref="MessagePart"/> is a MultiPart message.<br/>
    /// Use <see cref="IsMultiPart"/> to check if this <see cref="MessagePart"/> is a MultiPart message.
    /// </summary>
    public byte[] Body { get { return _body; } private set { _body = value; } }
    private byte[] _body;

    /// <summary>
    /// Describes if this <see cref="MessagePart"/> is a MultiPart message<br/>
    /// <br/>
    /// The <see cref="MessagePart"/> is a MultiPart message if the <see cref="ContentType"/> media type property starts with "multipart/"
    /// </summary>
    public bool IsMultiPart
    {
        get
        {
            return ContentType.MediaType.StartsWith("multipart/", StringComparison.OrdinalIgnoreCase);
        }
    }

    /// <summary>
    /// A <see cref="MessagePart"/> is considered to be holding text in it's body if the MediaType
    /// starts either "text/" or is equal to "message/rfc822"
    /// </summary>
    public bool IsText
    {
        get
        {
            string mediaType = ContentType.MediaType;
            return mediaType.StartsWith("text/", StringComparison.OrdinalIgnoreCase) || mediaType.Equals("message/rfc822", StringComparison.OrdinalIgnoreCase);
        }
    }

    /// <summary>
    /// A <see cref="MessagePart"/> is considered to be an attachment, if<br/>
    /// - it is not holding <see cref="IsText">text</see> and is not a <see cref="IsMultiPart">MultiPart</see> message<br/>
    /// or<br/>
    /// - it has a Content-Disposition header that says it is an attachment
    /// </summary>
    public bool IsAttachment
    {
        get
        {
            // Inline is the opposite of attachment
            return (!IsText && !IsMultiPart) || (ContentDisposition != null && !ContentDisposition.Inline);
        }
    }

    /// <summary>
    /// This is a convenient-property for figuring out a FileName for this <see cref="MessagePart"/>.<br/>
    /// If the <see cref="MessagePart"/> is a MultiPart message, then it makes no sense to try to find a FileName.<br/>
    /// <br/>
    /// The FileName can be specified in the <see cref="ContentDisposition"/> or in the <see cref="ContentType"/> properties.<br/>
    /// If none of these places two places tells about the FileName, a default "(no name)" is returned.
    /// </summary>
    public string FileName { get { return _fileName; } private set { _fileName = value; } }
    private string _fileName;

    /// <summary>
    /// If this <see cref="MessagePart"/> is a MultiPart message, then this property
    /// has a list of each of the Multiple parts that the message consists of.<br/>
    /// <br/>
    /// It is <see langword="null"/> if it is not a MultiPart message.<br/>
    /// Use <see cref="IsMultiPart"/> to check if this <see cref="MessagePart"/> is a MultiPart message.
    /// </summary>
    public List<MessagePart> MessageParts { get { return _messageParts; } private set { _messageParts = value; } }
    private List<MessagePart> _messageParts;
    #endregion

    #region Constructors
    /// <summary>
    /// Used to construct the topmost message part
    /// </summary>
    /// <param name="rawBody">The body that needs to be parsed</param>
    /// <param name="headers">The headers that should be used from the message</param>
    /// <exception cref="ArgumentNullException">If <paramref name="rawBody"/> or <paramref name="headers"/> is <see langword="null"/></exception>
    internal MessagePart(byte[] rawBody, MessageHeader headers)
    {
        if (rawBody == null)
            throw new ArgumentNullException("rawBody");

        if (headers == null)
            throw new ArgumentNullException("headers");

        ContentType = headers.ContentType;
        ContentDescription = headers.ContentDescription;
        ContentTransferEncoding = headers.ContentTransferEncoding;
        ContentId = headers.ContentId;
        ContentDisposition = headers.ContentDisposition;

        FileName = FindFileName(ContentType, ContentDisposition, "(no name)");
        BodyEncoding = ParseBodyEncoding(ContentType.CharSet);

        ParseBody(rawBody);
    }
    #endregion

    #region Parsing
    /// <summary>
    /// Parses a character set into an encoding
    /// </summary>
    /// <param name="characterSet">The character set that needs to be parsed. <see langword="null"/> is allowed.</param>
    /// <returns>The encoding specified by the <paramref name="characterSet"/> parameter, or ASCII if the character set was <see langword="null"/> or empty</returns>
    private static Encoding ParseBodyEncoding(string characterSet)
    {
        // Default encoding in Mime messages is US-ASCII
        Encoding encoding = Encoding.ASCII;

        // If the character set was specified, find the encoding that the character
        // set describes, and use that one instead
        if (!string.IsNullOrEmpty(characterSet))
            encoding = EncodingFinder.FindEncoding(characterSet);

        return encoding;
    }

    /// <summary>
    /// Figures out the filename of this message part from some headers.
    /// <see cref="FileName"/> property.
    /// </summary>
    /// <param name="contentType">The Content-Type header</param>
    /// <param name="contentDisposition">The Content-Disposition header</param>
    /// <param name="defaultName">The default filename to use, if no other could be found</param>
    /// <returns>The filename found, or the default one if not such filename could be found in the headers</returns>
    /// <exception cref="ArgumentNullException">if <paramref name="contentType"/> is <see langword="null"/></exception>
    private static string FindFileName(ContentType contentType, ContentDisposition contentDisposition, string defaultName)
    {
        if (contentType == null)
            throw new ArgumentNullException("contentType");

        if (contentDisposition != null && contentDisposition.FileName != null)
            return contentDisposition.FileName;

        if (contentType.Name != null)
            return contentType.Name;

        return defaultName;
    }

    /// <summary>
    /// Parses a byte array as a body of an email message.
    /// </summary>
    /// <param name="rawBody">The byte array to parse as body of an email message. This array may not contain headers.</param>
    private void ParseBody(byte[] rawBody)
    {
        if (IsMultiPart)
        {
            // Parses a MultiPart message
            ParseMultiPartBody(rawBody);
        }
        else
        {
            // Parses a non MultiPart message
            // Decode the body accodingly and set the Body property
            Body = DecodeBody(rawBody, ContentTransferEncoding);
        }
    }

    /// <summary>
    /// Parses the <paramref name="rawBody"/> byte array as a MultiPart message.<br/>
    /// It is not valid to call this method if <see cref="IsMultiPart"/> returned <see langword="false"/>.<br/>
    /// Fills the <see cref="MessageParts"/> property of this <see cref="MessagePart"/>.
    /// </summary>
    /// <param name="rawBody">The byte array which is to be parsed as a MultiPart message</param>
    private void ParseMultiPartBody(byte[] rawBody)
    {
        // Fetch out the boundary used to delimit the messages within the body
        string multipartBoundary = ContentType.Boundary;

        // Fetch the individual MultiPart message parts using the MultiPart boundary
        List<byte[]> bodyParts = GetMultiPartParts(rawBody, multipartBoundary);

        // Initialize the MessageParts property, with room to as many bodies as we have found
        MessageParts = new List<MessagePart>(bodyParts.Count);

        // Now parse each byte array as a message body and add it the the MessageParts property
        foreach (byte[] bodyPart in bodyParts)
        {
            MessagePart messagePart = GetMessagePart(bodyPart);
            MessageParts.Add(messagePart);
        }
    }

    /// <summary>
    /// Given a byte array describing a full message.<br/>
    /// Parses the byte array into a <see cref="MessagePart"/>.
    /// </summary>
    /// <param name="rawMessageContent">The byte array containing both headers and body of a message</param>
    /// <returns>A <see cref="MessagePart"/> which was described by the <paramref name="rawMessageContent"/> byte array</returns>
    private static MessagePart GetMessagePart(byte[] rawMessageContent)
    {
        // Find the headers and the body parts of the byte array
        MessageHeader headers;
        byte[] body;
        HeaderExtractor.ExtractHeadersAndBody(rawMessageContent, out headers, out body);

        // Create a new MessagePart from the headers and the body
        return new MessagePart(body, headers);
    }

    /// <summary>
    /// Gets a list of byte arrays where each entry in the list is a full message of a message part
    /// </summary>
    /// <param name="rawBody">The raw byte array describing the body of a message which is a MultiPart message</param>
    /// <param name="multipPartBoundary">The delimiter that splits the different MultiPart bodies from each other</param>
    /// <returns>A list of byte arrays, each a full message of a <see cref="MessagePart"/></returns>
    private static List<byte[]> GetMultiPartParts(byte[] rawBody, string multipPartBoundary)
    {
        // This is the list we want to return
        List<byte[]> messageBodies = new List<byte[]>();

        // Create a stream from which we can find MultiPart boundaries
        using (MemoryStream stream = new MemoryStream(rawBody))
        {
            bool lastMultipartBoundaryEncountered;

            // Find the start of the first message in this multipart
            // Since the method returns the first character on a the line containing the MultiPart boundary, we
            // need to add the MultiPart boundary with prepended "--" and appended CRLF pair to the position returned.
            int startLocation = FindPositionOfNextMultiPartBoundary(stream, multipPartBoundary, out lastMultipartBoundaryEncountered) + ("--" + multipPartBoundary + "\r\n").Length;
            while (true)
            {
                // When we have just parsed the last multipart entry, stop parsing on
                if (lastMultipartBoundaryEncountered)
                    break;

                // Find the end location of the current multipart
                // Since the method returns the first character on a the line containing the MultiPart boundary, we
                // need to go a CRLF pair back, so that we do not get that into the body of the message part
                int stopLocation = FindPositionOfNextMultiPartBoundary(stream, multipPartBoundary, out lastMultipartBoundaryEncountered) - "\r\n".Length;

                // If we could not find the next multipart boundary, but we had not yet discovered the last boundary, then
                // we will consider the rest of the bytes as contained in a last message part.
                if (stopLocation <= -1)
                {
                    // Include everything except the last CRLF.
                    stopLocation = (int)stream.Length - "\r\n".Length;

                    // We consider this as the last part
                    lastMultipartBoundaryEncountered = true;

                    // Special case: when the last multipart delimiter is not ending with "--", but is indeed the last
                    // one, then the next multipart would contain nothing, and we should not include such one.
                    if (startLocation >= stopLocation)
                        break;
                }

                // We have now found the start and end of a message part
                // Now we create a byte array with the correct length and put the message part's bytes into
                // it and add it to our list we want to return
                int length = stopLocation - startLocation;
                byte[] messageBody = new byte[length];
                Array.Copy(rawBody, startLocation, messageBody, 0, length);
                messageBodies.Add(messageBody);

                // We want to advance to the next message parts start.
                // We can find this by jumping forward the MultiPart boundary from the last
                // message parts end position
                startLocation = stopLocation + ("\r\n" + "--" + multipPartBoundary + "\r\n").Length;
            }
        }

        // We are done
        return messageBodies;
    }

    /// <summary>
    /// Method that is able to find a specific MultiPart boundary in a Stream.<br/>
    /// The Stream passed should not be used for anything else then for looking for MultiPart boundaries
    /// <param name="stream">The stream to find the next MultiPart boundary in. Do not use it for anything else then with this method.</param>
    /// <param name="multiPartBoundary">The MultiPart boundary to look for. This should be found in the <see cref="ContentType"/> header</param>
    /// <param name="lastMultipartBoundaryFound">Is set to <see langword="true"/> if the next MultiPart boundary was indicated to be the last one, by having -- appended to it. Otherwise set to <see langword="false"/></param>
    /// </summary>
    /// <returns>The position of the first character of the line that contained MultiPartBoundary or -1 if no (more) MultiPart boundaries was found</returns>
    private static int FindPositionOfNextMultiPartBoundary(Stream stream, string multiPartBoundary, out bool lastMultipartBoundaryFound)
    {
        lastMultipartBoundaryFound = false;
        while (true)
        {
            // Get the current position. This is the first position on the line - no characters of the line will
            // have been read yet
            int currentPos = (int)stream.Position;

            // Read the line
            string line = StreamUtility.ReadLineAsAscii(stream);

            // If we kept reading until there was no more lines, we did not meet
            // the MultiPart boundary. -1 is then returned to describe this.
            if (line == null)
                return -1;

            // The MultiPart boundary is the MultiPartBoundary with "--" in front of it
            // which is to be at the very start of a line
            if (line.StartsWith("--" + multiPartBoundary, StringComparison.Ordinal))
            {
                // Check if the found boundary was also the last one
                lastMultipartBoundaryFound = line.StartsWith("--" + multiPartBoundary + "--", StringComparison.OrdinalIgnoreCase);
                return currentPos;
            }
        }
    }

    /// <summary>
    /// Decodes a byte array into another byte array based upon the Content Transfer encoding
    /// </summary>
    /// <param name="messageBody">The byte array to decode into another byte array</param>
    /// <param name="contentTransferEncoding">The <see cref="ContentTransferEncoding"/> of the byte array</param>
    /// <returns>A byte array which comes from the <paramref name="contentTransferEncoding"/> being used on the <paramref name="messageBody"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="messageBody"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentOutOfRangeException">Thrown if the <paramref name="contentTransferEncoding"/> is unsupported</exception>
    private static byte[] DecodeBody(byte[] messageBody, ContentTransferEncoding contentTransferEncoding)
    {
        if (messageBody == null)
            throw new ArgumentNullException("messageBody");

        switch (contentTransferEncoding)
        {
            case ContentTransferEncoding.QuotedPrintable:
                // If encoded in QuotedPrintable, everything in the body is in US-ASCII
                return QuotedPrintable.DecodeContentTransferEncoding(Encoding.ASCII.GetString(messageBody));

            case ContentTransferEncoding.Base64:
                // If encoded in Base64, everything in the body is in US-ASCII
                return Base64.Decode(Encoding.ASCII.GetString(messageBody));

            case ContentTransferEncoding.SevenBit:
            case ContentTransferEncoding.Binary:
            case ContentTransferEncoding.EightBit:
                // We do not have to do anything
                return messageBody;

            default:
                throw new ArgumentOutOfRangeException("contentTransferEncoding");
        }
    }
    #endregion

    #region Public methods
    /// <summary>
    /// Gets this MessagePart's <see cref="Body"/> as text.<br/>
    /// This is simply the <see cref="BodyEncoding"/> being used on the raw bytes of the <see cref="Body"/> property.<br/>
    /// This method is only valid to call if it is not a MultiPart message and therefore contains a body.<br/>
    /// </summary>
    /// <returns>The <see cref="Body"/> property as a string</returns>
    public string GetBodyAsText()
    {
        return BodyEncoding.GetString(Body);
    }

    /// <summary>
    /// Save this <see cref="MessagePart"/>'s contents to a file.<br/>
    /// There are no methods to reload the file.
    /// </summary>
    /// <param name="file">The File location to save the <see cref="MessagePart"/> to. Existent files will be overwritten.</param>
    /// <exception cref="ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to using a <see cref="FileStream"/> might be thrown as well</exception>
    public void Save(FileInfo file)
    {
        if (file == null)
            throw new ArgumentNullException("file");

        using (FileStream stream = new FileStream(file.FullName, FileMode.OpenOrCreate))
        {
            Save(stream);
        }
    }

    /// <summary>
    /// Save this <see cref="MessagePart"/>'s contents to a stream.<br/>
    /// </summary>
    /// <param name="messageStream">The stream to write to</param>
    /// <exception cref="ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to <see cref="Stream.Write"/> might be thrown as well</exception>
    public void Save(Stream messageStream)
    {
        if (messageStream == null)
            throw new ArgumentNullException("messageStream");

        messageStream.Write(Body, 0, Body.Length);
    }
    #endregion
}

/// <summary>
/// <see cref="Enum"/> that describes the ContentTransferEncoding header field
/// </summary>
/// <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for more details</remarks>
public enum ContentTransferEncoding
{
    /// <summary>
    /// 7 bit Encoding
    /// </summary>
    SevenBit,

    /// <summary>
    /// 8 bit Encoding
    /// </summary>
    EightBit,

    /// <summary>
    /// Quoted Printable Encoding
    /// </summary>
    QuotedPrintable,

    /// <summary>
    /// Base64 Encoding
    /// </summary>
    Base64,

    /// <summary>
    /// Binary Encoding
    /// </summary>
    Binary
}

/// <summary>
/// Class that hold information about one "Received:" header line.
/// 
/// Visit these RFCs for more information:
/// <see href="http://tools.ietf.org/html/rfc5321#section-4.4">RFC 5321 section 4.4</see>
/// <see href="http://tools.ietf.org/html/rfc4021#section-3.6.7">RFC 4021 section 3.6.7</see>
/// <see href="http://tools.ietf.org/html/rfc2822#section-3.6.7">RFC 2822 section 3.6.7</see>
/// <see href="http://tools.ietf.org/html/rfc2821#section-4.4">RFC 2821 section 4.4</see>
/// </summary>
public class Received
{
    /// <summary>
    /// The date of this received line.
    /// Is <see cref="DateTime.MinValue"/> if not present in the received header line.
    /// </summary>
    public DateTime Date { get { return _date; } private set { _date = value; } }
    private DateTime _date;

    /// <summary>
    /// A dictionary that contains the names and values of the
    /// received header line.
    /// If the received header is invalid and contained one name
    /// multiple times, the first one is used and the rest is ignored.
    /// </summary>
    /// <example>
    /// If the header lines looks like:
    /// <code>
    /// from sending.com (localMachine [127.0.0.1]) by test.net (Postfix)
    /// </code>
    /// then the dictionary will contain two keys: "from" and "by" with the values
    /// "sending.com (localMachine [127.0.0.1])" and "test.net (Postfix)".
    /// </example>
    public Dictionary<string, string> Names { get { return _names; } private set { _names = value; } }
    private Dictionary<string, string> _names; 

    /// <summary>
    /// The raw input string that was parsed into this class.
    /// </summary>
    public string Raw { get { return _raw; } private set { _raw = value; } }
    private string _raw;

    /// <summary>
    /// Parses a Received header value.
    /// </summary>
    /// <param name="headerValue">The value for the header to be parsed</param>
    /// <exception cref="ArgumentNullException"><exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception></exception>
    public Received(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        // Remember the raw input if someone whishes to use it
        Raw = headerValue;

        // Default Date value
        Date = DateTime.MinValue;

        // The date part is the last part of the string, and is preceeded by a semicolon
        // Some emails forgets to specify the date, therefore we need to check if it is there
        if (headerValue.Contains(";"))
        {
            string datePart = headerValue.Substring(headerValue.LastIndexOf(";") + 1);
            Date = Rfc2822DateTime.StringToDate(datePart);
        }

        Names = ParseDictionary(headerValue);
    }

    /// <summary>
    /// Parses the Received header name-value-list into a dictionary.
    /// </summary>
    /// <param name="headerValue">The full header value for the Received header</param>
    /// <returns>A dictionary where the name-value-list has been parsed into</returns>
    private static Dictionary<string, string> ParseDictionary(string headerValue)
    {
        Dictionary<string, string> dictionary = new Dictionary<string, string>();

        // Remove the date part from the full headerValue if it is present
        string headerValueWithoutDate = headerValue;
        if (headerValue.Contains(";"))
        {
            headerValueWithoutDate = headerValue.Substring(0, headerValue.LastIndexOf(";"));
        }

        // Reduce any whitespace character to one space only
        headerValueWithoutDate = Regex.Replace(headerValueWithoutDate, @"\s+", " ");

        // The regex below should capture the following:
        // The name consists of non-whitespace characters followed by a whitespace and then the value follows.
        // There are multiple cases for the value part:
        //   1: Value is just some characters not including any whitespace
        //   2: Value is some characters, a whitespace followed by an unlimited number of
        //      parenthesized values which can contain whitespaces, each delimited by whitespace
        //
        // Cheat sheet for regex:
        // \s means every whitespace character
        // [^\s] means every character except whitespace characters
        // +? is a non-greedy equivalent of +
        const string pattern = @"(?<name>[^\s]+)\s(?<value>[^\s]+(\s\(.+?\))*)";

        // Find each match in the string
        MatchCollection matches = Regex.Matches(headerValueWithoutDate, pattern);
        foreach (Match match in matches)
        {
            // Add the name and value part found in the matched result to the dictionary
            string name = match.Groups["name"].Value;
            string value = match.Groups["value"].Value;

            // Check if the name is really a comment.
            // In this case, the first entry in the header value
            // is a comment
            if (name.StartsWith("("))
            {
                continue;
            }

            // Only add the first name pair
            // All subsequent pairs are ignored, as they are invalid anyway
            if (!dictionary.ContainsKey(name))
                dictionary.Add(name, value);
        }

        return dictionary;
    }
}

/// <summary>
/// This class is used for RFC compliant email addresses.<br/>
/// <br/>
/// The class cannot be instantiated from outside the library.
/// </summary>
/// <remarks>
/// The <seealso cref="MailAddress"/> does not cover all the possible formats 
/// for <a href="http://tools.ietf.org/html/rfc5322#section-3.4">RFC 5322 section 3.4</a> compliant email addresses.
/// This class is used as an address wrapper to account for that deficiency.
/// </remarks>
public class RfcMailAddress
{
    #region Properties
    ///<summary>
    /// The email address of this <see cref="RfcMailAddress"/><br/>
    /// It is possibly string.Empty since RFC mail addresses does not require an email address specified.
    ///</summary>
    ///<example>
    /// Example header with email address:<br/>
    /// To: <c>Test test@mail.com</c><br/>
    /// Address will be <c>test@mail.com</c><br/>
    ///</example>
    ///<example>
    /// Example header without email address:<br/>
    /// To: <c>Test</c><br/>
    /// Address will be <see cref="string.Empty"/>.
    ///</example>
    public string Address { get { return _address; } private set { _address = value; } }
    private string _address;

    ///<summary>
    /// The display name of this <see cref="RfcMailAddress"/><br/>
    /// It is possibly <see cref="string.Empty"/> since RFC mail addresses does not require a display name to be specified.
    ///</summary>
    ///<example>
    /// Example header with display name:<br/>
    /// To: <c>Test test@mail.com</c><br/>
    /// DisplayName will be <c>Test</c>
    ///</example>
    ///<example>
    /// Example header without display name:<br/>
    /// To: <c>test@test.com</c><br/>
    /// DisplayName will be <see cref="string.Empty"/>
    ///</example>
    public string DisplayName { get { return _displayName; } private set { _displayName = value; } }
    private string _displayName;

    /// <summary>
    /// This is the Raw string used to describe the <see cref="RfcMailAddress"/>.
    /// </summary>
    public string Raw { get { return _raw; } private set { _raw = value; } }
    private string _raw;

    /// <summary>
    /// The <see cref="MailAddress"/> associated with the <see cref="RfcMailAddress"/>. 
    /// </summary>
    /// <remarks>
    /// The value of this property can be <see lanword="null"/> in instances where the <see cref="MailAddress"/> cannot represent the address properly.<br/>
    /// Use <see cref="HasValidMailAddress"/> property to see if this property is valid.
    /// </remarks>
    public MailAddress MailAddress { get { return _mailAddress; } private set { _mailAddress = value; } }
    private MailAddress _mailAddress;

    /// <summary>
    /// Specifies if the object contains a valid <see cref="MailAddress"/> reference.
    /// </summary>
    public bool HasValidMailAddress
    {
        get { return MailAddress != null; }
    }
    #endregion

    #region Constructors
    /// <summary>
    /// Constructs an <see cref="RfcMailAddress"/> object from a <see cref="MailAddress"/> object.<br/>
    /// This constructor is used when we were able to construct a <see cref="MailAddress"/> from a string.
    /// </summary>
    /// <param name="mailAddress">The address that <paramref name="raw"/> was parsed into</param>
    /// <param name="raw">The raw unparsed input which was parsed into the <paramref name="mailAddress"/></param>
    /// <exception cref="ArgumentNullException">If <paramref name="mailAddress"/> or <paramref name="raw"/> is <see langword="null"/></exception>
    private RfcMailAddress(MailAddress mailAddress, string raw)
    {
        if (mailAddress == null)
            throw new ArgumentNullException("mailAddress");

        if (raw == null)
            throw new ArgumentNullException("raw");

        MailAddress = mailAddress;
        Address = mailAddress.Address;
        DisplayName = mailAddress.DisplayName;
        Raw = raw;
    }

    /// <summary>
    /// When we were unable to parse a string into a <see cref="MailAddress"/>, this constructor can be
    /// used. The Raw string is then used as the <see cref="DisplayName"/>.
    /// </summary>
    /// <param name="raw">The raw unparsed input which could not be parsed</param>
    /// <exception cref="ArgumentNullException">If <paramref name="raw"/> is <see langword="null"/></exception>
    private RfcMailAddress(string raw)
    {
        if (raw == null)
            throw new ArgumentNullException("raw");

        MailAddress = null;
        Address = string.Empty;
        DisplayName = raw;
        Raw = raw;
    }
    #endregion

    /// <summary>
    /// A string representation of the <see cref="RfcMailAddress"/> object
    /// </summary>
    /// <returns>Returns the string representation for the object</returns>
    public override string ToString()
    {
        if (HasValidMailAddress)
            return MailAddress.ToString();

        return Raw;
    }

    #region Parsing
    /// <summary>
    /// Parses an email address from a MIME header<br/>
    /// <br/>
    /// Examples of input:
    /// <c>Eksperten mailrobot &lt;noreply@mail.eksperten.dk&gt;</c><br/>
    /// <c>"Eksperten mailrobot" &lt;noreply@mail.eksperten.dk&gt;</c><br/>
    /// <c>&lt;noreply@mail.eksperten.dk&gt;</c><br/>
    /// <c>noreply@mail.eksperten.dk</c><br/>
    /// <br/>
    /// It might also contain encoded text, which will then be decoded.
    /// </summary>
    /// <param name="input">The value to parse out and email and/or a username</param>
    /// <returns>A <see cref="RfcMailAddress"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
    /// <remarks>
    /// <see href="http://tools.ietf.org/html/rfc5322#section-3.4">RFC 5322 section 3.4</see> for more details on email syntax.<br/>
    /// <see cref="EncodedWord.Decode">For more information about encoded text</see>.
    /// </remarks>
    internal static RfcMailAddress ParseMailAddress(string input)
    {
        if (input == null)
            throw new ArgumentNullException("input");

        // Decode the value, if it was encoded
        input = EncodedWord.Decode(input.Trim());

        // Find the location of the email address
        int indexStartEmail = input.LastIndexOf('<');
        int indexEndEmail = input.LastIndexOf('>');

        try
        {
            if (indexStartEmail >= 0 && indexEndEmail >= 0)
            {
                string username;
                // Check if there is a username in front of the email address
                if (indexStartEmail > 0)
                {
                    // Parse out the user
                    username = input.Substring(0, indexStartEmail).Trim();
                }
                else
                {
                    // There was no user
                    username = string.Empty;
                }

                // Parse out the email address without the "<"  and ">"
                indexStartEmail = indexStartEmail + 1;
                int emailLength = indexEndEmail - indexStartEmail;
                string emailAddress = input.Substring(indexStartEmail, emailLength).Trim();

                // There has been cases where there was no emailaddress between the < and >
                if (!string.IsNullOrEmpty(emailAddress))
                {
                    // If the username is quoted, MailAddress' constructor will remove them for us
                    return new RfcMailAddress(new MailAddress(emailAddress, username), input);
                }
            }

            // This might be on the form noreply@mail.eksperten.dk
            // Check if there is an email, if notm there is no need to try
            if (input.Contains("@"))
                return new RfcMailAddress(new MailAddress(input), input);
        }
        catch (FormatException)
        {
            // Sometimes invalid emails are sent, like sqlmap-user@sourceforge.net. (last period is illigal)
            //DefaultLogger.Log.LogError("RfcMailAddress: Improper mail address: \"" + input + "\"");
        }

        // It could be that the format used was simply a name
        // which is indeed valid according to the RFC
        // Example:
        // Eksperten mailrobot
        return new RfcMailAddress(input);
    }

    /// <summary>
    /// Parses input of the form<br/>
    /// <c>Eksperten mailrobot &lt;noreply@mail.eksperten.dk&gt;, ...</c><br/>
    /// to a list of RFCMailAddresses
    /// </summary>
    /// <param name="input">The input that is a comma-separated list of EmailAddresses to parse</param>
    /// <returns>A List of <seealso cref="RfcMailAddress"/> objects extracted from the <paramref name="input"/> parameter.</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
    internal static List<RfcMailAddress> ParseMailAddresses(string input)
    {
        if (input == null)
            throw new ArgumentNullException("input");

        List<RfcMailAddress> returner = new List<RfcMailAddress>();

        // MailAddresses are split by commas
        IEnumerable<string> mailAddresses = Utility.SplitStringWithCharNotInsideQuotes(input, ',');

        // Parse each of these
        foreach (string mailAddress in mailAddresses)
        {
            returner.Add(ParseMailAddress(mailAddress));
        }

        return returner;
    }
    #endregion
}

/// <summary>
/// Class that holds all headers for a message<br/>
/// Headers which are unknown the the parser will be held in the <see cref="UnknownHeaders"/> collection.<br/>
/// <br/>
/// This class cannot be instantiated from outside the library.
/// </summary>
/// <remarks>
/// See <a href="http://tools.ietf.org/html/rfc4021">RFC 4021</a> for a large list of headers.<br/>
/// </remarks>
public sealed class MessageHeader
{
    #region Properties
    /// <summary>
    /// All headers which were not recognized and explicitly dealt with.<br/>
    /// This should mostly be custom headers, which are marked as X-[name].<br/>
    /// <br/>
    /// This list will be empty if all headers were recognized and parsed.
    /// </summary>
    /// <remarks>
    /// If you as a user, feels that a header in this collection should
    /// be parsed, feel free to notify the developers.
    /// </remarks>
    public NameValueCollection UnknownHeaders { get { return _unknownHeaders; } private set { _unknownHeaders = value; } }
    private NameValueCollection _unknownHeaders;

    /// <summary>
    /// A human readable description of the body<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-Description header was present in the message.
    /// </summary>
    public string ContentDescription { get { return _contentDescription; } private set { _contentDescription = value; } }
    private string _contentDescription;

    /// <summary>
    /// ID of the content part (like an attached image). Used with MultiPart messages.<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-ID header field was present in the message.
    /// </summary>
    /// <see cref="MessageId">For an ID of the message</see>
    public string ContentId { get { return _contentId; } private set { _contentId = value; } }
    private string _contentId;

    /// <summary>
    /// Message keywords<br/>
    /// <br/>
    /// The list will be empty if no Keywords header was present in the message
    /// </summary>
    public List<string> Keywords { get { return _keywords; } private set { _keywords = value; } }
    private List<string> _keywords;

    /// <summary>
    /// A List of emails to people who wishes to be notified when some event happens.<br/>
    /// These events could be email:
    /// <list type="bullet">
    ///   <item>deletion</item>
    ///   <item>printing</item>
    ///   <item>received</item>
    ///   <item>...</item>
    /// </list>
    /// The list will be empty if no Disposition-Notification-To header was present in the message
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc3798">RFC 3798</a> for details</remarks>
    public List<RfcMailAddress> DispositionNotificationTo { get { return _dispositionNotificationTo; } private set { _dispositionNotificationTo = value; } }
    private List<RfcMailAddress> _dispositionNotificationTo;

    /// <summary>
    /// This is the Received headers. This tells the path that the email went.<br/>
    /// <br/>
    /// The list will be empty if no Received header was present in the message
    /// </summary>
    public List<Received> Received { get { return _recieved; } private set { _recieved = value; } }
    private List<Received> _recieved;

    /// <summary>
    /// Importance of this email.<br/>
    /// <br/>
    /// The importance level is set to normal, if no Importance header field was mentioned or it contained
    /// unknown information. This is the expected behavior according to the RFC.
    /// </summary>
    public MailPriority Importance { get { return _importance; } private set { _importance = value; } }
    private MailPriority _importance; 

    /// <summary>
    /// This header describes the Content encoding during transfer.<br/>
    /// <br/>
    /// If no Content-Transfer-Encoding header was present in the message, it is set
    /// to the default of <see cref="Header.ContentTransferEncoding.SevenBit">SevenBit</see> in accordance to the RFC.
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for details</remarks>
    public ContentTransferEncoding ContentTransferEncoding { get { return _contentTransferEncoding; } private set { _contentTransferEncoding = value; } }
    private ContentTransferEncoding _contentTransferEncoding;

    /// <summary>
    /// Carbon Copy. This specifies who got a copy of the message.<br/>
    /// <br/>
    /// The list will be empty if no Cc header was present in the message
    /// </summary>
    public List<RfcMailAddress> Cc { get { return _cc; } private set { _cc = value; } }
    private List<RfcMailAddress> _cc;

    /// <summary>
    /// Blind Carbon Copy. This specifies who got a copy of the message, but others
    /// cannot see who these persons are.<br/>
    /// <br/>
    /// The list will be empty if no Received Bcc was present in the message
    /// </summary>
    public List<RfcMailAddress> Bcc { get { return _bcc; } private set { _bcc = value; } }
    private List<RfcMailAddress> _bcc;

    /// <summary>
    /// Specifies who this mail was for<br/>
    /// <br/>
    /// The list will be empty if no To header was present in the message
    /// </summary>
    public List<RfcMailAddress> To { get { return _to; } private set { _to = value; } }
    private List<RfcMailAddress> _to;

    /// <summary>
    /// Specifies who sent the email<br/>
    /// <br/>
    /// <see langword="null"/> if no From header field was present in the message
    /// </summary>
    public RfcMailAddress From { get { return _from; } private set { _from = value; } }
    private RfcMailAddress _from;

    /// <summary>
    /// Specifies who a reply to the message should be sent to<br/>
    /// <br/>
    /// <see langword="null"/> if no Reply-To header field was present in the message
    /// </summary>
    public RfcMailAddress ReplyTo { get { return _replyTo; } private set { _replyTo = value; } }
    private RfcMailAddress _replyTo;

    /// <summary>
    /// The message identifier(s) of the original message(s) to which the
    /// current message is a reply.<br/>
    /// <br/>
    /// The list will be empty if no In-Reply-To header was present in the message
    /// </summary>
    public List<string> InReplyTo { get { return _inReplyTo; } private set { _inReplyTo = value; } }
    private List<string> _inReplyTo;

    /// <summary>
    /// The message identifier(s) of other message(s) to which the current
    /// message is related to.<br/>
    /// <br/>
    /// The list will be empty if no References header was present in the message
    /// </summary>
    public List<string> References { get { return _references; } private set { _references = value; } }
    private List<string> _references;

    /// <summary>
    /// This is the sender of the email address.<br/>
    /// <br/>
    /// <see langword="null"/> if no Sender header field was present in the message
    /// </summary>
    /// <remarks>
    /// The RFC states that this field can be used if a secretary
    /// is sending an email for someone she is working for.
    /// The email here will then be the secretary's email, and
    /// the Reply-To field would hold the address of the person she works for.<br/>
    /// RFC states that if the Sender is the same as the From field,
    /// sender should not be included in the message.
    /// </remarks>
    public RfcMailAddress Sender { get { return _sender; } private set { _sender = value; } }
    private RfcMailAddress _sender;

    /// <summary>
    /// The Content-Type header field.<br/>
    /// <br/>
    /// If not set, the ContentType is created by the default "text/plain; charset=us-ascii" which is
    /// defined in <a href="http://tools.ietf.org/html/rfc2045#section-5.2">RFC 2045 section 5.2</a>.<br/>
    /// If set, the default is overridden.
    /// </summary>
    public ContentType ContentType { get { return _contentType; } private set { _contentType = value; } }
    private ContentType _contentType;

    /// <summary>
    /// Used to describe if a <see cref="MessagePart"/> is to be displayed or to be though of as an attachment.<br/>
    /// Also contains information about filename if such was sent.<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-Disposition header field was present in the message
    /// </summary>
    public ContentDisposition ContentDisposition { get { return _contentDispisition; } private set { _contentDispisition = value; } }
    private ContentDisposition _contentDispisition;

    /// <summary>
    /// The Date when the email was sent.<br/>
    /// This is the raw value. <see cref="DateSent"/> for a parsed up <see cref="DateTime"/> value of this field.<br/>
    /// <br/>
    /// <see langword="DateTime.MinValue"/> if no Date header field was present in the message or if the date could not be parsed.
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc5322#section-3.6.1">RFC 5322 section 3.6.1</a> for more details</remarks>
    public string Date { get { return _date; } private set { _date = value; } }
    private string _date;

    /// <summary>
    /// The Date when the email was sent.<br/>
    /// This is the parsed equivalent of <see cref="Date"/>.<br/>
    /// Notice that the <see cref="TimeZone"/> of the <see cref="DateTime"/> object is in UTC and has NOT been converted
    /// to local <see cref="TimeZone"/>.
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc5322#section-3.6.1">RFC 5322 section 3.6.1</a> for more details</remarks>
    public DateTime DateSent { get { return _dateSent; } private set { _dateSent = value; } }
    private DateTime _dateSent;

    /// <summary>
    /// An ID of the message that is SUPPOSED to be in every message according to the RFC.<br/>
    /// The ID is unique.<br/>
    /// <br/>
    /// <see langword="null"/> if no Message-ID header field was present in the message
    /// </summary>
    public string MessageId { get { return _messageId; } private set { _messageId = value; } }
    private string _messageId;

    /// <summary>
    /// The Mime Version.<br/>
    /// This field will almost always show 1.0<br/>
    /// <br/>
    /// <see langword="null"/> if no Mime-Version header field was present in the message
    /// </summary>
    public string MimeVersion { get { return _mimeVersion; } private set { _mimeVersion = value; } }
    private string _mimeVersion;

    /// <summary>
    /// A single <see cref="RfcMailAddress"/> with no username inside.<br/>
    /// This is a trace header field, that should be in all messages.<br/>
    /// Replies should be sent to this address.<br/>
    /// <br/>
    /// <see langword="null"/> if no Return-Path header field was present in the message
    /// </summary>
    public RfcMailAddress ReturnPath { get { return _returnPath; } private set { _returnPath = value; } }
    public RfcMailAddress _returnPath;

    /// <summary>
    /// The subject line of the message in decoded, one line state.<br/>
    /// This should be in all messages.<br/>
    /// <br/>
    /// <see langword="null"/> if no Subject header field was present in the message
    /// </summary>
    public string Subject { get { return _subject; } private set { _subject = value; } }
    private string _subject;
    #endregion

    /// <summary>
    /// Parses a <see cref="NameValueCollection"/> to a MessageHeader
    /// </summary>
    /// <param name="headers">The collection that should be traversed and parsed</param>
    /// <returns>A valid MessageHeader object</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headers"/> is <see langword="null"/></exception>
    internal MessageHeader(NameValueCollection headers)
    {
        if (headers == null)
            throw new ArgumentNullException("headers");

        // Create empty lists as defaults. We do not like null values
        // List with an initial capacity set to zero will be replaced
        // when a corrosponding header is found
        To = new List<RfcMailAddress>(0);
        Cc = new List<RfcMailAddress>(0);
        Bcc = new List<RfcMailAddress>(0);
        Received = new List<Received>();
        Keywords = new List<string>();
        InReplyTo = new List<string>(0);
        References = new List<string>(0);
        DispositionNotificationTo = new List<RfcMailAddress>();
        UnknownHeaders = new NameValueCollection();

        // Default importancetype is Normal (assumed if not set)
        Importance = MailPriority.Normal;

        // 7BIT is the default ContentTransferEncoding (assumed if not set)
        ContentTransferEncoding = ContentTransferEncoding.SevenBit;

        // text/plain; charset=us-ascii is the default ContentType
        ContentType = new ContentType("text/plain; charset=us-ascii");

        // Now parse the actual headers
        ParseHeaders(headers);
    }

    /// <summary>
    /// Parses a <see cref="NameValueCollection"/> to a <see cref="MessageHeader"/>
    /// </summary>
    /// <param name="headers">The collection that should be traversed and parsed</param>
    /// <returns>A valid <see cref="MessageHeader"/> object</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headers"/> is <see langword="null"/></exception>
    private void ParseHeaders(NameValueCollection headers)
    {
        if (headers == null)
            throw new ArgumentNullException("headers");

        // Now begin to parse the header values
        foreach (string headerName in headers.Keys)
        {
            string[] headerValues = headers.GetValues(headerName);
            if (headerValues != null)
            {
                foreach (string headerValue in headerValues)
                {
                    ParseHeader(headerName, headerValue);
                }
            }
        }
    }

    #region Header fields parsing
    /// <summary>
    /// Parses a single header and sets member variables according to it.
    /// </summary>
    /// <param name="headerName">The name of the header</param>
    /// <param name="headerValue">The value of the header in unfolded state (only one line)</param>
    /// <exception cref="ArgumentNullException">If <paramref name="headerName"/> or <paramref name="headerValue"/> is <see langword="null"/></exception>
    private void ParseHeader(string headerName, string headerValue)
    {
        if (headerName == null)
            throw new ArgumentNullException("headerName");

        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        switch (headerName.ToUpperInvariant())
        {
            // See http://tools.ietf.org/html/rfc5322#section-3.6.3
            case "TO":
                To = RfcMailAddress.ParseMailAddresses(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.3
            case "CC":
                Cc = RfcMailAddress.ParseMailAddresses(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.3
            case "BCC":
                Bcc = RfcMailAddress.ParseMailAddresses(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.2
            case "FROM":
                // There is only one MailAddress in the from field
                From = RfcMailAddress.ParseMailAddress(headerValue);
                break;

            // http://tools.ietf.org/html/rfc5322#section-3.6.2
            // The implementation here might be wrong
            case "REPLY-TO":
                // This field may actually be a list of addresses, but no
                // such case has been encountered
                ReplyTo = RfcMailAddress.ParseMailAddress(headerValue);
                break;

            // http://tools.ietf.org/html/rfc5322#section-3.6.2
            case "SENDER":
                Sender = RfcMailAddress.ParseMailAddress(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.5
            // RFC 5322:
            // The "Keywords:" field contains a comma-separated list of one or more
            // words or quoted-strings.
            // The field are intended to have only human-readable content
            // with information about the message
            case "KEYWORDS":
                string[] keywordsTemp = headerValue.Split(',');
                foreach (string keyword in keywordsTemp)
                {
                    // Remove the quotes if there is any
                    Keywords.Add(Utility.RemoveQuotesIfAny(keyword.Trim()));
                }
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.7
            case "RECEIVED":
                // Simply add the value to the list
                Received.Add(new Received(headerValue.Trim()));
                break;

            case "IMPORTANCE":
                Importance = HeaderFieldParser.ParseImportance(headerValue.Trim());
                break;

            // See http://tools.ietf.org/html/rfc3798#section-2.1
            case "DISPOSITION-NOTIFICATION-TO":
                DispositionNotificationTo = RfcMailAddress.ParseMailAddresses(headerValue);
                break;

            case "MIME-VERSION":
                MimeVersion = headerValue.Trim();
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.5
            case "SUBJECT":
                Subject = EncodedWord.Decode(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.7
            case "RETURN-PATH":
                // Return-paths does not include a username, but we 
                // may still use the address parser 
                ReturnPath = RfcMailAddress.ParseMailAddress(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.4
            // Example Message-ID
            // <33cdd74d6b89ab2250ecd75b40a41405@nfs.eksperten.dk>
            case "MESSAGE-ID":
                MessageId = HeaderFieldParser.ParseId(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.4
            case "IN-REPLY-TO":
                InReplyTo = HeaderFieldParser.ParseMultipleIDs(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.4
            case "REFERENCES":
                References = HeaderFieldParser.ParseMultipleIDs(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.1))
            case "DATE":
                Date = headerValue.Trim();
                DateSent = Rfc2822DateTime.StringToDate(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc2045#section-6
            // See ContentTransferEncoding class for more details
            case "CONTENT-TRANSFER-ENCODING":
                ContentTransferEncoding = HeaderFieldParser.ParseContentTransferEncoding(headerValue.Trim());
                break;

            // See http://tools.ietf.org/html/rfc2045#section-8
            case "CONTENT-DESCRIPTION":
                // Human description of for example a file. Can be encoded
                ContentDescription = EncodedWord.Decode(headerValue.Trim());
                break;

            // See http://tools.ietf.org/html/rfc2045#section-5.1
            // Example: Content-type: text/plain; charset="us-ascii"
            case "CONTENT-TYPE":
                ContentType = HeaderFieldParser.ParseContentType(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc2183
            case "CONTENT-DISPOSITION":
                ContentDisposition = HeaderFieldParser.ParseContentDisposition(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc2045#section-7
            // Example: <foo4*foo1@bar.net>
            case "CONTENT-ID":
                ContentId = HeaderFieldParser.ParseId(headerValue);
                break;

            default:
                // This is an unknown header

                // Custom headers are allowed. That means headers
                // that are not mentionen in the RFC.
                // Such headers start with the letter "X"
                // We do not have any special parsing of such

                // Add it to unknown headers
                UnknownHeaders.Add(headerName, headerValue);
                break;
        }
    }
    #endregion
}

/// <summary>
/// This is the root of the email tree structure.<br/>
/// <see cref="Mime.MessagePart"/> for a description about the structure.<br/>
/// <br/>
/// A Message (this class) contains the headers of an email message such as:
/// <code>
///  - To
///  - From
///  - Subject
///  - Content-Type
///  - Message-ID
/// </code>
/// which are located in the <see cref="Headers"/> property.<br/>
/// <br/>
/// Use the <see cref="Message.MessagePart"/> property to find the actual content of the email message.
/// </summary>
/// <example>
/// Examples are available on the <a href="http://hpop.sourceforge.net/">project homepage</a>.
/// </example>
public class Message
{
    #region Public properties
    /// <summary>
    /// Headers of the Message.
    /// </summary>
    public MessageHeader Headers { get { return _headers; } private set { _headers = value; } }
    private MessageHeader _headers;

    /// <summary>
    /// This is the body of the email Message.<br/>
    /// <br/>
    /// If the body was parsed for this Message, this property will never be <see langword="null"/>.
    /// </summary>
    public MessagePart MessagePart { get { return _messagePart; } private set { _messagePart = value; } }
    private MessagePart _messagePart;

    /// <summary>
    /// The raw content from which this message has been constructed.<br/>
    /// These bytes can be persisted and later used to recreate the Message.
    /// </summary>
    public byte[] RawMessage { get { return _rawMessage; } private set { _rawMessage = value; } }
    private byte[] _rawMessage;
    #endregion

    #region Constructors
    /// <summary>
    /// Convenience constructor for <see cref="Mime.Message(byte[], bool)"/>.<br/>
    /// <br/>
    /// Creates a message from a byte array. The full message including its body is parsed.
    /// </summary>
    /// <param name="rawMessageContent">The byte array which is the message contents to parse</param>
    public Message(byte[] rawMessageContent)
        : this(rawMessageContent, true)
    {
    }

    /// <summary>
    /// Constructs a message from a byte array.<br/>
    /// <br/>
    /// The headers are always parsed, but if <paramref name="parseBody"/> is <see langword="false"/>, the body is not parsed.
    /// </summary>
    /// <param name="rawMessageContent">The byte array which is the message contents to parse</param>
    /// <param name="parseBody">
    /// <see langword="true"/> if the body should be parsed,
    /// <see langword="false"/> if only headers should be parsed out of the <paramref name="rawMessageContent"/> byte array
    /// </param>
    public Message(byte[] rawMessageContent, bool parseBody)
    {
        RawMessage = rawMessageContent;

        // Find the headers and the body parts of the byte array
        MessageHeader headersTemp;
        byte[] body;
        HeaderExtractor.ExtractHeadersAndBody(rawMessageContent, out headersTemp, out body);

        // Set the Headers property
        Headers = headersTemp;

        // Should we also parse the body?
        if (parseBody)
        {
            // Parse the body into a MessagePart
            MessagePart = new MessagePart(body, Headers);
        }
    }
    #endregion

    /// <summary>
    /// This method will convert this <see cref="Message"/> into a <see cref="MailMessage"/> equivalent.<br/>
    /// The returned <see cref="MailMessage"/> can be used with <see cref="System.Net.Mail.SmtpClient"/> to forward the email.<br/>
    /// <br/>
    /// You should be aware of the following about this method:
    /// <list type="bullet">
    /// <item>
    ///    All sender and receiver mail addresses are set.
    ///    If you send this email using a <see cref="System.Net.Mail.SmtpClient"/> then all
    ///    receivers in To, From, Cc and Bcc will receive the email once again.
    /// </item>
    /// <item>
    ///    If you view the source code of this Message and looks at the source code of the forwarded
    ///    <see cref="MailMessage"/> returned by this method, you will notice that the source codes are not the same.
    ///    The content that is presented by a mail client reading the forwarded <see cref="MailMessage"/> should be the
    ///    same as the original, though.
    /// </item>
    /// <item>
    ///    Content-Disposition headers will not be copied to the <see cref="MailMessage"/>.
    ///    It is simply not possible to set these on Attachments.
    /// </item>
    /// <item>
    ///    HTML content will be treated as the preferred view for the <see cref="MailMessage.Body"/>. Plain text content will be used for the
    ///    <see cref="MailMessage.Body"/> when HTML is not available.
    /// </item>
    /// </list>
    /// </summary>
    /// <returns>A <see cref="MailMessage"/> object that contains the same information that this Message does</returns>
    public MailMessage ToMailMessage()
    {
        // Construct an empty MailMessage to which we will gradually build up to look like the current Message object (this)
        MailMessage message = new MailMessage();

        message.Subject = Headers.Subject;

        // We here set the encoding to be UTF-8
        // We cannot determine what the encoding of the subject was at this point.
        // But since we know that strings in .NET is stored in UTF, we can
        // use UTF-8 to decode the subject into bytes
        message.SubjectEncoding = Encoding.UTF8;

        // The HTML version should take precedent over the plain text if it is available
        MessagePart preferredVersion = FindFirstHtmlVersion();
        if (preferredVersion != null)
        {
            // Make sure that the IsBodyHtml property is being set correctly for our content
            message.IsBodyHtml = true;
        }
        else
        {
            // otherwise use the first plain text version as the body, if it exists
            preferredVersion = FindFirstPlainTextVersion();
        }

        if (preferredVersion != null)
        {
            message.Body = preferredVersion.GetBodyAsText();
            message.BodyEncoding = preferredVersion.BodyEncoding;
        }

        // Add body and alternative views (html and such) to the message
        IEnumerable<MessagePart> textVersions = FindAllTextVersions();
        foreach (MessagePart textVersion in textVersions)
        {
            // The textVersions also contain the preferred version, therefore
            // we should skip that one
            if (textVersion == preferredVersion)
                continue;

            MemoryStream stream = new MemoryStream(textVersion.Body);
            AlternateView alternative = new AlternateView(stream);
            alternative.ContentId = textVersion.ContentId;
            alternative.ContentType = textVersion.ContentType;
            message.AlternateViews.Add(alternative);
        }

        // Add attachments to the message
        IEnumerable<MessagePart> attachments = FindAllAttachments();
        foreach (MessagePart attachmentMessagePart in attachments)
        {
            MemoryStream stream = new MemoryStream(attachmentMessagePart.Body);
            Attachment attachment = new Attachment(stream, attachmentMessagePart.ContentType);
            attachment.ContentId = attachmentMessagePart.ContentId;
            message.Attachments.Add(attachment);
        }

        if (Headers.From != null && Headers.From.HasValidMailAddress)
            message.From = Headers.From.MailAddress;

        if (Headers.ReplyTo != null && Headers.ReplyTo.HasValidMailAddress)
            message.ReplyTo = Headers.ReplyTo.MailAddress;

        if (Headers.Sender != null && Headers.Sender.HasValidMailAddress)
            message.Sender = Headers.Sender.MailAddress;

        foreach (RfcMailAddress to in Headers.To)
        {
            if (to.HasValidMailAddress)
                message.To.Add(to.MailAddress);
        }

        foreach (RfcMailAddress cc in Headers.Cc)
        {
            if (cc.HasValidMailAddress)
                message.CC.Add(cc.MailAddress);
        }

        foreach (RfcMailAddress bcc in Headers.Bcc)
        {
            if (bcc.HasValidMailAddress)
                message.Bcc.Add(bcc.MailAddress);
        }

        return message;
    }

    #region MessagePart Searching Methods

    /// <summary>
    /// Finds the first text/plain <see cref="MessagePart"/> in this message.<br/>
    /// This is a convenience method - it simply propagates the call to <see cref="FindFirstMessagePartWithMediaType"/>.<br/>
    /// <br/>
    /// If no text/plain version is found, <see langword="null"/> is returned.
    /// </summary>
    /// <returns>
    /// <see cref="MessagePart"/> which has a MediaType of text/plain or <see langword="null"/>
    /// if such <see cref="MessagePart"/> could not be found.
    /// </returns>
    public MessagePart FindFirstPlainTextVersion()
    {
        return FindFirstMessagePartWithMediaType("text/plain");
    }

    /// <summary>
    /// Finds the first text/html <see cref="MessagePart"/> in this message.<br/>
    /// This is a convenience method - it simply propagates the call to <see cref="FindFirstMessagePartWithMediaType"/>.<br/>
    /// <br/>
    /// If no text/html version is found, <see langword="null"/> is returned.
    /// </summary>
    /// <returns>
    /// <see cref="MessagePart"/> which has a MediaType of text/html or <see langword="null"/>
    /// if such <see cref="MessagePart"/> could not be found.
    /// </returns>
    public MessagePart FindFirstHtmlVersion()
    {
        return FindFirstMessagePartWithMediaType("text/html");
    }

    /// <summary>
    /// Finds all the <see cref="MessagePart"/>'s which contains a text version.<br/>
    /// <br/>
    /// <see cref="Mime.MessagePart.IsText"/> for MessageParts which are considered to be text versions.<br/>
    /// <br/>
    /// Examples of MessageParts media types are:
    /// <list type="bullet">
    ///    <item>text/plain</item>
    ///    <item>text/html</item>
    ///    <item>text/xml</item>
    /// </list>
    /// </summary>
    /// <returns>A List of MessageParts where each part is a text version</returns>
    public List<MessagePart> FindAllTextVersions()
    {
        return new TextVersionFinder().VisitMessage(this);
    }

    /// <summary>
    /// Finds all the <see cref="MessagePart"/>'s which are attachments to this message.<br/>
    /// <br/>
    /// <see cref="Mime.MessagePart.IsAttachment"/> for MessageParts which are considered to be attachments.
    /// </summary>
    /// <returns>A List of MessageParts where each is considered an attachment</returns>
    public List<MessagePart> FindAllAttachments()
    {
        return new AttachmentFinder().VisitMessage(this);
    }

    /// <summary>
    /// Finds the first <see cref="MessagePart"/> in the <see cref="Message"/> hierarchy with the given MediaType.<br/>
    /// <br/>
    /// The search in the hierarchy is a depth-first traversal.
    /// </summary>
    /// <param name="mediaType">The MediaType to search for. Case is ignored.</param>
    /// <returns>
    /// A <see cref="MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="MessagePart"/> was found
    /// </returns>
    public MessagePart FindFirstMessagePartWithMediaType(string mediaType)
    {
        return new FindFirstMessagePartWithMediaType().VisitMessage(this, mediaType);
    }

    /// <summary>
    /// Finds all the <see cref="MessagePart"/>s in the <see cref="Message"/> hierarchy with the given MediaType.
    /// </summary>
    /// <param name="mediaType">The MediaType to search for. Case is ignored.</param>
    /// <returns>
    /// A List of <see cref="MessagePart"/>s with the given MediaType.<br/>
    /// The List might be empty if no such <see cref="MessagePart"/>s were found.<br/>
    /// The order of the elements in the list is the order which they are found using
    /// a depth first traversal of the <see cref="Message"/> hierarchy.
    /// </returns>
    public List<MessagePart> FindAllMessagePartsWithMediaType(string mediaType)
    {
        return new FindAllMessagePartsWithMediaType().VisitMessage(this, mediaType);
    }

    #endregion

    #region Message Persistence

    /// <summary>
    /// Save this <see cref="Message"/> to a file.<br/>
    /// <br/>
    /// Can be loaded at a later time using the <see cref="Load(FileInfo)"/> method.
    /// </summary>
    /// <param name="file">The File location to save the <see cref="Message"/> to. Existent files will be overwritten.</param>
    /// <exception cref="ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to using a <see cref="FileStream"/> might be thrown as well</exception>
    public void Save(FileInfo file)
    {
        if (file == null)
            throw new ArgumentNullException("file");

        using (FileStream stream = new FileStream(file.FullName, FileMode.OpenOrCreate))
        {
            Save(stream);
        }
    }

    /// <summary>
    /// Save this <see cref="Message"/> to a stream.<br/>
    /// </summary>
    /// <param name="messageStream">The stream to write to</param>
    /// <exception cref="ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to <see cref="Stream.Write"/> might be thrown as well</exception>
    public void Save(Stream messageStream)
    {
        if (messageStream == null)
            throw new ArgumentNullException("messageStream");

        messageStream.Write(RawMessage, 0, RawMessage.Length);
    }

    /// <summary>
    /// Loads a <see cref="Message"/> from a file containing a raw email.
    /// </summary>
    /// <param name="file">The File location to load the <see cref="Message"/> from. The file must exist.</param>
    /// <exception cref="ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
    /// <exception cref="FileNotFoundException">If <paramref name="file"/> does not exist</exception>
    /// <exception>Other exceptions relevant to a <see cref="FileStream"/> might be thrown as well</exception>
    /// <returns>A <see cref="Message"/> with the content loaded from the <paramref name="file"/></returns>
    public static Message Load(FileInfo file)
    {
        if (file == null)
            throw new ArgumentNullException("file");

        if (!file.Exists)
            throw new FileNotFoundException("Cannot load message from non-existent file", file.FullName);

        using (FileStream stream = new FileStream(file.FullName, FileMode.Open))
        {
            return Load(stream);
        }
    }


    /// <summary>
    /// Loads a <see cref="Message"/> from a <see cref="Stream"/> containing a raw email.
    /// </summary>
    /// <param name="messageStream">The <see cref="Stream"/> from which to load the raw <see cref="Message"/></param>
    /// <exception cref="ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to <see cref="Stream.Read"/> might be thrown as well</exception>
    /// <returns>A <see cref="Message"/> with the content loaded from the <paramref name="messageStream"/></returns>
    public static Message Load(Stream messageStream)
    {
        if (messageStream == null)
            throw new ArgumentNullException("messageStream");

        using (MemoryStream outStream = new MemoryStream())
        {
#if DOTNET4
				// TODO: Enable using native v4 framework methods when support is formally added.
				messageStream.CopyTo(outStream);
#else
            int bytesRead;
            byte[] buffer = new byte[4096];

            while ((bytesRead = messageStream.Read(buffer, 0, 4096)) > 0)
            {
                outStream.Write(buffer, 0, bytesRead);
            }
#endif
            byte[] content = outStream.ToArray();

            return new Message(content);
        }
    }
    #endregion
}

/// <summary>
/// Implements the CRAM-MD5 algorithm as specified in <a href="http://tools.ietf.org/html/rfc2195">RFC 2195</a>.
/// </summary>
internal static class CramMd5
{
    /// <summary>
    /// Defined by <a href="http://tools.ietf.org/html/rfc2104#section-2">RFC 2104</a>
    /// Is a 64 byte array with all entries set to 0x36.
    /// </summary>
    private static readonly byte[] ipad;

    /// <summary>
    /// Defined by <a href="http://tools.ietf.org/html/rfc2104#section-2">RFC 2104</a>
    /// Is a 64 byte array with all entries set to 0x5C.
    /// </summary>
    private static readonly byte[] opad;

    /// <summary>
    /// Initializes the static fields
    /// </summary>
    static CramMd5()
    {
        ipad = new byte[64];
        opad = new byte[64];
        for (int i = 0; i < ipad.Length; i++)
        {
            ipad[i] = 0x36;
            opad[i] = 0x5C;
        }
    }

    /// <summary>
    /// Computes the digest needed to login to a server using CRAM-MD5.<br/>
    /// <br/>
    /// This computes:<br/>
    /// MD5((password XOR opad), MD5((password XOR ipad), challenge))
    /// </summary>
    /// <param name="username">The username of the user who wants to log in</param>
    /// <param name="password">The password for the <paramref name="username"/></param>
    /// <param name="challenge">
    /// The challenge received from the server when telling it CRAM-MD5 authenticated is wanted.
    /// Is a base64 encoded string.
    /// </param>
    /// <returns>The response to the challenge, which the server can validate and log in the user if correct</returns>
    /// <exception cref="ArgumentNullException">
    /// If <paramref name="username"/>, 
    /// <paramref name="password"/> or 
    /// <paramref name="challenge"/> is <see langword="null"/>
    /// </exception>
    internal static string ComputeDigest(string username, string password, string challenge)
    {
        if (username == null)
            throw new ArgumentNullException("username");

        if (password == null)
            throw new ArgumentNullException("password");

        if (challenge == null)
            throw new ArgumentNullException("challenge");

        // Get the password bytes
        byte[] passwordBytes = GetSharedSecretInBytes(password);

        // The challenge is encoded in base64
        byte[] challengeBytes = Convert.FromBase64String(challenge);

        // Now XOR the password with the opad and ipad magic bytes
        byte[] passwordOpad = Xor(passwordBytes, opad);
        byte[] passwordIpad = Xor(passwordBytes, ipad);

        // Now do the computation: MD5((password XOR opad), MD5((password XOR ipad), challenge))
        byte[] digestValue = Hash(Concatenate(passwordOpad, Hash(Concatenate(passwordIpad, challengeBytes))));

        // Convert the bytes to a hex string
        // BitConverter writes the output as AF-B3-...
        // We need lower-case output without "-"
        string hex = BitConverter.ToString(digestValue).Replace("-", "").ToLowerInvariant();

        // Include the username in the resulting base64 encoded response
        return Convert.ToBase64String(Encoding.ASCII.GetBytes(username + " " + hex));
    }

    /// <summary>
    /// Hashes a byte array using the MD5 algorithm.
    /// </summary>
    /// <param name="toHash">The byte array to hash</param>
    /// <returns>The result of hashing the <paramref name="toHash"/> bytes with the MD5 algorithm</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toHash"/> is <see langword="null"/></exception>
    private static byte[] Hash(byte[] toHash)
    {
        if (toHash == null)
            throw new ArgumentNullException("toHash");

        using (MD5 md5 = new MD5CryptoServiceProvider())
        {
            return md5.ComputeHash(toHash);
        }
    }

    /// <summary>
    /// Concatenates two byte arrays into one
    /// </summary>
    /// <param name="one">The first byte array</param>
    /// <param name="two">The second byte array</param>
    /// <returns>A concatenated byte array</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="one"/> or <paramref name="two"/> is <see langword="null"/></exception>
    private static byte[] Concatenate(byte[] one, byte[] two)
    {
        if (one == null)
            throw new ArgumentNullException("one");

        if (two == null)
            throw new ArgumentNullException("two");

        // Create space for both byte arrays in one
        byte[] concatenated = new byte[one.Length + two.Length];

        // Copy the first one over
        Buffer.BlockCopy(one, 0, concatenated, 0, one.Length);

        // Copy the second one over
        Buffer.BlockCopy(two, 0, concatenated, one.Length, two.Length);

        // Return result
        return concatenated;
    }

    /// <summary>
    /// XORs a byte array with another.<br/>
    /// Each byte in <paramref name="toXor"/> is XORed with the corresponding byte
    /// in <paramref name="toXorWith"/> until the end of <paramref name="toXor"/> is encountered.
    /// </summary>
    /// <param name="toXor">The byte array to XOR</param>
    /// <param name="toXorWith">The byte array to XOR with</param>
    /// <returns>A new byte array with the XORed results</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toXor"/> or <paramref name="toXorWith"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentException">If the lengths of the arrays are not equal</exception>
    private static byte[] Xor(byte[] toXor, byte[] toXorWith)
    {
        if (toXor == null)
            throw new ArgumentNullException("toXor");

        if (toXorWith == null)
            throw new ArgumentNullException("toXorWith");

        if (toXor.Length != toXorWith.Length)
            throw new ArgumentException("The lengths of the arrays must be equal");

        // Create a new array to store results in
        byte[] xored = new byte[toXor.Length];

        // XOR each individual byte.
        for (int i = 0; i < toXor.Length; i++)
        {
            xored[i] = toXor[i];
            xored[i] ^= toXorWith[i];
        }

        // Return result
        return xored;
    }
    /// <summary>
    /// This method is responsible to generate the byte array needed
    /// from the shared secret - the password.<br/>
    /// 
    /// RFC 2195 says:<br/>
    /// The shared secret is null-padded to a length of 64 bytes. If the
    /// shared secret is longer than 64 bytes, the MD5 digest of the
    /// shared secret is used as a 16 byte input to the keyed MD5
    /// calculation.
    /// </summary>
    /// <param name="password">This is the shared secret</param>
    /// <returns>The 64 bytes that is to be used from the shared secret</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="password"/> is <see langword="null"/></exception>
    private static byte[] GetSharedSecretInBytes(string password)
    {
        if (password == null)
            throw new ArgumentNullException("password");

        // Get the password in bytes
        byte[] passwordBytes = Encoding.ASCII.GetBytes(password);

        // If the length is larger than 64, we need to
        if (passwordBytes.Length > 64)
        {
            passwordBytes = new MD5CryptoServiceProvider().ComputeHash(passwordBytes);
        }

        if (passwordBytes.Length != 64)
        {
            byte[] returner = new byte[64];
            for (int i = 0; i < passwordBytes.Length; i++)
            {
                returner[i] = passwordBytes[i];
            }
            return returner;
        }

        return passwordBytes;
    }
}

/// <summary>
/// Class for computing the digest needed when issuing the APOP command to a POP3 server.
/// </summary>
internal static class Apop
{
    /// <summary>
    /// Create the digest for the APOP command so that the server can validate
    /// we know the password for some user.
    /// </summary>
    /// <param name="password">The password for the user</param>
    /// <param name="serverTimestamp">The timestamp advertised in the server greeting to the POP3 client</param>
    /// <returns>The password and timestamp hashed with the MD5 algorithm outputted as a HEX string</returns>
    public static string ComputeDigest(string password, string serverTimestamp)
    {
        if (password == null)
            throw new ArgumentNullException("password");

        if (serverTimestamp == null)
            throw new ArgumentNullException("serverTimestamp");

        // The APOP command authorizes itself by using the password together
        // with the server timestamp. This way the password is not transmitted
        // in clear text, and the server can still verify we have the password.
        byte[] digestToHash = Encoding.ASCII.GetBytes(serverTimestamp + password);

        using (MD5 md5 = new MD5CryptoServiceProvider())
        {
            // MD5 hash the digest
            byte[] result = md5.ComputeHash(digestToHash);

            // Convert the bytes to a hex string
            // BitConverter writes the output as AF-B3-...
            // We need lower-case output without "-"
            return BitConverter.ToString(result).Replace("-", "").ToLowerInvariant();
        }
    }
}

internal static class StreamUtility
{
    /// <summary>
    /// Read a line from the stream.
    /// A line is interpreted as all the bytes read until a CRLF or LF is encountered.<br/>
    /// CRLF pair or LF is not included in the string.
    /// </summary>
    /// <param name="stream">The stream from which the line is to be read</param>
    /// <returns>A line read from the stream returned as a byte array or <see langword="null"/> if no bytes were readable from the stream</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
    public static byte[] ReadLineAsBytes(Stream stream)
    {
        if (stream == null)
            throw new ArgumentNullException("stream");

        using (MemoryStream memoryStream = new MemoryStream())
        {
            while (true)
            {
                int justRead = stream.ReadByte();
                if (justRead == -1 && memoryStream.Length > 0)
                    break;

                // Check if we started at the end of the stream we read from
                // and we have not read anything from it yet
                if (justRead == -1 && memoryStream.Length == 0)
                    return null;

                char readChar = (char)justRead;

                // Do not write \r or \n
                if (readChar != '\r' && readChar != '\n')
                    memoryStream.WriteByte((byte)justRead);

                // Last point in CRLF pair
                if (readChar == '\n')
                    break;
            }

            return memoryStream.ToArray();
        }
    }

    /// <summary>
    /// Read a line from the stream. <see cref="ReadLineAsBytes"/> for more documentation.
    /// </summary>
    /// <param name="stream">The stream to read from</param>
    /// <returns>A line read from the stream or <see langword="null"/> if nothing could be read from the stream</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
    public static string ReadLineAsAscii(Stream stream)
    {
        byte[] readFromStream = ReadLineAsBytes(stream);
        return readFromStream != null ? Encoding.ASCII.GetString(readFromStream) : null;
    }
}

/// <summary>
/// Some of these states are defined by <a href="http://tools.ietf.org/html/rfc1939">RFC 1939</a>.<br/>
/// Which commands that are allowed in which state can be seen in the same RFC.<br/>
/// <br/>
/// Used to keep track of which state the <see cref="Pop3Client"/> is in.
/// </summary>
internal enum ConnectionState
{
    /// <summary>
    /// This is when the Pop3Client is not even connected to the server
    /// </summary>
    Disconnected,

    /// <summary>
    /// This is when the server is awaiting user credentials
    /// </summary>
    Authorization,

    /// <summary>
    /// This is when the server has been given the user credentials, and we are allowed
    /// to use commands specific to this users mail drop
    /// </summary>
    Transaction
}

/// <summary>
/// Describes the authentication method to use when authenticating towards a POP3 server.
/// </summary>
public enum AuthenticationMethod
{
    /// <summary>
    /// Authenticate using the UsernameAndPassword method.<br/>
    /// This will pass the username and password to the server in cleartext.<br/>
    /// <see cref="Apop"/> is more secure but might not be supported on a server.<br/>
    /// This method is not recommended. Use <see cref="Auto"/> instead.
    /// <br/>
    /// If SSL is used, there is no loss of security by using this authentication method.
    /// </summary>
    UsernameAndPassword,

    /// <summary>
    /// Authenticate using the Authenticated Post Office Protocol method, which is more secure then
    /// <see cref="UsernameAndPassword"/> since it is a request-response protocol where server checks if the
    ///  client knows a shared secret, which is the password, without the password itself being transmitted.<br/>
    /// This authentication method uses MD5 under its hood.<br/>
    /// <br/>
    /// This authentication method is not supported by many servers.<br/>
    /// Choose this option if you want maximum security.
    /// </summary>
    Apop,

    /// <summary>
    /// This is the recomended method to authenticate with.<br/>
    /// If <see cref="Apop"/> is supported by the server, <see cref="Apop"/> is used for authentication.<br/>
    /// If <see cref="Apop"/> is not supported, Auto will fall back to <see cref="UsernameAndPassword"/> authentication.
    /// </summary>
    Auto,

    /// <summary>
    /// Logs in the the POP3 server using CRAM-MD5 authentication scheme.<br/>
    /// This in essence uses the MD5 hashing algorithm on the user password and a server challenge.
    /// </summary>
    CramMd5
}

/// <summary>
/// POP3 compliant POP Client<br/>
/// <br/>	
/// If you want to override where logging is sent, look at <see cref="DefaultLogger"/>
/// </summary>
/// <example>
/// Examples are available on the <a href="http://hpop.sourceforge.net/">project homepage</a>.
/// </example>
public class Pop3Client : IDisposable
{
    #region Private member properties
    /// <summary>
    /// The stream used to communicate with the server
    /// </summary>
    private Stream Stream { get { return _stream; } set { _stream = value; } }
    private Stream _stream;

    /// <summary>
    /// This is the last response the server sent back when a command was issued to it
    /// </summary>
    private string LastServerResponse { get { return _lastServerResponse; } set { _lastServerResponse = value; } }
    private string _lastServerResponse;

    /// <summary>
    /// The APOP time stamp sent by the server in it's welcome message if APOP is supported.
    /// </summary>
    private string ApopTimeStamp { get { return _apopTimeStamp; } set { _apopTimeStamp = value; } }
    private string _apopTimeStamp;

    /// <summary>
    /// Describes what state the <see cref="Pop3Client"/> is in
    /// </summary>
    private ConnectionState State { get { return _state; } set { _state = value; } }
    private ConnectionState _state;
    #endregion

    #region Public member properties
    /// <summary>
    /// Tells whether the <see cref="Pop3Client"/> is connected to a POP server or not
    /// </summary>
    public bool Connected { get { return _connected; } private set { _connected = value; } }
    private bool _connected;

    /// <summary>
    /// Allows you to check if the server supports
    /// the <see cref="AuthenticationMethod.Apop"/> authentication method.<br/>
    /// <br/>
    /// This value is filled when the connect method has returned,
    /// as the server tells in its welcome message if APOP is supported.
    /// </summary>
    public bool ApopSupported { get { return _apopSupported; } private set { _apopSupported = value; } }
    private bool _apopSupported;
    #endregion

    #region Constructors
    /// <summary>
    /// Constructs a new Pop3Client for you to use.
    /// </summary>
    public Pop3Client()
    {
        SetInitialValues();
    }
    #endregion

    #region IDisposable implementation
    
    public void Dispose()
    {
        if (!_isDisposed)
        {
            try
            {
                Dispose(true);
            }
            finally
            {
                _isDisposed = true;
                GC.SuppressFinalize(this);
            }
        }
    }
    private bool _isDisposed=false;

    /// <summary>
    /// Disposes the <see cref="Pop3Client"/>.<br/>
    /// This is the implementation of the <see cref="IDisposable"/> interface.<br/>
    /// Sends the QUIT command to the server before closing the streams.
    /// </summary>
    /// <param name="disposing"><see langword="true"/> if managed and unmanaged code should be disposed, <see langword="false"/> if only managed code should be disposed</param>
    protected  void Dispose(bool disposing)
    {
        if (disposing && !_isDisposed)
        {
            if (Connected)
            {
                Disconnect();
            }
        }
    }
    
    protected void AssertDisposed()
    {
        if (_isDisposed)
        {
            string typeName = GetType().FullName;
            throw new ObjectDisposedException(typeName, String.Format(System.Globalization.CultureInfo.InvariantCulture, "Cannot access a disposed {0}.", typeName));
        }
    }

    #endregion

    #region Connection managing methods
    /// <summary>
    /// Connect to the server using user supplied stream
    /// </summary>
    /// <param name="stream">The stream used to communicate with the server</param>
    /// <exception cref="ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
    public void Connect(Stream stream)
    {
        AssertDisposed();

        if (State != ConnectionState.Disconnected)
            throw new Exception("You cannot ask to connect to a POP3 server, when we are already connected to one. Disconnect first.");

        if (stream == null)
            throw new ArgumentNullException("stream");

        Stream = stream;

        // Fetch the server one-line welcome greeting
        string response = StreamUtility.ReadLineAsAscii(Stream);

        // Check if the response was an OK response
        try
        {
            // Assume we now need the user to supply credentials
            // If we do not connect correctly, Disconnect will set the
            // state to Disconnected
            // If this is not set, Disconnect will throw an exception
            State = ConnectionState.Authorization;

            IsOkResponse(response);
            ExtractApopTimestamp(response);
            Connected = true;
        }
        catch (Exception e)
        {
            // If not close down the connection and abort
            DisconnectStreams();

            //DefaultLogger.Log.LogError("Connect(): " + "Error with connection, maybe POP3 server not exist");
            //DefaultLogger.Log.LogDebug("Last response from server was: " + LastServerResponse);
            throw new Exception("Server is not available", e);
        }
    }

    /// <summary>
    /// Connects to a remote POP3 server using default timeouts of 60.000 milliseconds
    /// </summary>
    /// <param name="hostname">The <paramref name="hostname"/> of the POP3 server</param>
    /// <param name="port">The port of the POP3 server</param>
    /// <param name="useSsl"><see langword="true"/> if SSL should be used. <see langword="false"/> if plain TCP should be used.</param>
    /// <exception cref="PopServerNotAvailableException">If the server did not send an OK message when a connection was established</exception>
    /// <exception cref="PopServerNotFoundException">If it was not possible to connect to the server</exception>
    /// <exception cref="ArgumentNullException">If <paramref name="hostname"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentOutOfRangeException">If port is not in the range [<see cref="IPEndPoint.MinPort"/>, <see cref="IPEndPoint.MaxPort"/></exception>
    public void Connect(string hostname, int port, bool useSsl)
    {
        const int defaultTimeOut = 60000;
        Connect(hostname, port, useSsl, defaultTimeOut, defaultTimeOut, null);
    }

    /// <summary>
    /// Connects to a remote POP3 server
    /// </summary>
    /// <param name="hostname">The <paramref name="hostname"/> of the POP3 server</param>
    /// <param name="port">The port of the POP3 server</param>
    /// <param name="useSsl"><see langword="true"/> if SSL should be used. <see langword="false"/> if plain TCP should be used.</param>
    /// <param name="receiveTimeout">Timeout in milliseconds before a socket should time out from reading. Set to 0 or -1 to specify infinite timeout.</param>
    /// <param name="sendTimeout">Timeout in milliseconds before a socket should time out from sending. Set to 0 or -1 to specify infinite timeout.</param>
    /// <param name="certificateValidator">If you want to validate the certificate in a SSL connection, pass a reference to your validator. Supply <see langword="null"/> if default should be used.</param>
    /// <exception cref="PopServerNotAvailableException">If the server did not send an OK message when a connection was established</exception>
    /// <exception cref="PopServerNotFoundException">If it was not possible to connect to the server</exception>
    /// <exception cref="ArgumentNullException">If <paramref name="hostname"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentOutOfRangeException">If port is not in the range [<see cref="IPEndPoint.MinPort"/>, <see cref="IPEndPoint.MaxPort"/> or if any of the timeouts is less than -1.</exception>
    public void Connect(string hostname, int port, bool useSsl, int receiveTimeout, int sendTimeout, RemoteCertificateValidationCallback certificateValidator)
    {
        AssertDisposed();

        if (hostname == null)
            throw new ArgumentNullException("hostname");

        if (hostname.Length == 0)
            throw new ArgumentException("hostname cannot be empty", "hostname");

        if (port > IPEndPoint.MaxPort || port < IPEndPoint.MinPort)
            throw new ArgumentOutOfRangeException("port");

        if (receiveTimeout < -1)
            throw new ArgumentOutOfRangeException("receiveTimeout");

        if (sendTimeout < -1)
            throw new ArgumentOutOfRangeException("sendTimeout");

        if (State != ConnectionState.Disconnected)
            throw new Exception("You cannot ask to connect to a POP3 server, when we are already connected to one. Disconnect first.");

        TcpClient clientSocket = new TcpClient();
        clientSocket.ReceiveTimeout = receiveTimeout;
        clientSocket.SendTimeout = sendTimeout;

        try
        {
            clientSocket.Connect(hostname, port);
        }
        catch (SocketException e)
        {
            // Close the socket - we are not connected, so no need to close stream underneath
            clientSocket.Close();

            //DefaultLogger.Log.LogError("Connect(): " + e.Message);
            throw new Exception("Server not found", e);
        }

        Stream stream;
        if (useSsl)
        {
            // If we want to use SSL, open a new SSLStream on top of the open TCP stream.
            // We also want to close the TCP stream when the SSL stream is closed
            // If a validator was passed to us, use it.
            SslStream sslStream;
            if (certificateValidator == null)
            {
                sslStream = new SslStream(clientSocket.GetStream(), false);
            }
            else
            {
                sslStream = new SslStream(clientSocket.GetStream(), false, certificateValidator);
            }
            sslStream.ReadTimeout = receiveTimeout;
            sslStream.WriteTimeout = sendTimeout;

            // Authenticate the server
            sslStream.AuthenticateAsClient(hostname);

            stream = sslStream;
        }
        else
        {
            // If we do not want to use SSL, use plain TCP
            stream = clientSocket.GetStream();
        }

        // Now do the connect with the same stream being used to read and write to
        Connect(stream);
    }

    /// <summary>
    /// Disconnects from POP3 server.
    /// Sends the QUIT command before closing the connection, which deletes all the messages that was marked as such.
    /// </summary>
    public void Disconnect()
    {
        AssertDisposed();

        if (State == ConnectionState.Disconnected)
            throw new Exception("You cannot disconnect a connection which is already disconnected");

        try
        {
            SendCommand("QUIT");
        }
        finally
        {
            DisconnectStreams();
        }
    }
    #endregion

    #region Authentication methods
    /// <summary>
    /// Authenticates a user towards the POP server using <see cref="AuthenticationMethod.Auto"/>.<br/>
    /// If this authentication fails but you are sure that the username and password is correct, it might
    /// be that that the POP3 server is wrongly telling the client it supports <see cref="AuthenticationMethod.Apop"/>.
    /// You should try using <see cref="Authenticate(string, string, AuthenticationMethod)"/> while passing <see cref="AuthenticationMethod.UsernameAndPassword"/> to the method.
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <exception cref="InvalidLoginException">If the user credentials was not accepted</exception>
    /// <exception cref="PopServerLockedException">If the server said the the mailbox was locked</exception>
    /// <exception cref="ArgumentNullException">If <paramref name="username"/> or <paramref name="password"/> is <see langword="null"/></exception>
    /// <exception cref="LoginDelayException">If the server rejects the login because of too recent logins</exception>
    public void Authenticate(string username, string password)
    {
        AssertDisposed();
        Authenticate(username, password, AuthenticationMethod.Auto);
    }

    /// <summary>
    /// Authenticates a user towards the POP server using some <see cref="AuthenticationMethod"/>.
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <param name="authenticationMethod">The way that the client should authenticate towards the server</param>
    /// <exception cref="NotSupportedException">If <see cref="AuthenticationMethod.Apop"/> is used, but not supported by the server</exception>
    /// <exception cref="InvalidLoginException">If the user credentials was not accepted</exception>
    /// <exception cref="PopServerLockedException">If the server said the the mailbox was locked</exception>
    /// <exception cref="ArgumentNullException">If <paramref name="username"/> or <paramref name="password"/> is <see langword="null"/></exception>
    /// <exception cref="LoginDelayException">If the server rejects the login because of too recent logins</exception>
    public void Authenticate(string username, string password, AuthenticationMethod authenticationMethod)
    {
        AssertDisposed();

        if (username == null)
            throw new ArgumentNullException("username");

        if (password == null)
            throw new ArgumentNullException("password");

        if (State != ConnectionState.Authorization)
            throw new Exception("You have to be connected and not authorized when trying to authorize yourself");

        try
        {
            switch (authenticationMethod)
            {
                case AuthenticationMethod.UsernameAndPassword:
                    AuthenticateUsingUserAndPassword(username, password);
                    break;

                case AuthenticationMethod.Apop:
                    AuthenticateUsingApop(username, password);
                    break;

                case AuthenticationMethod.Auto:
                    if (ApopSupported)
                        AuthenticateUsingApop(username, password);
                    else
                        AuthenticateUsingUserAndPassword(username, password);
                    break;

                case AuthenticationMethod.CramMd5:
                    AuthenticateUsingCramMd5(username, password);
                    break;
            }
        }
        catch (Exception e)
        {
            //DefaultLogger.Log.LogError("Problem logging in using method " + authenticationMethod + ". Server response was: " + LastServerResponse);

            // Throw a more specific exception if special cases of failure is detected
            // using the response the server generated when the last command was sent
            CheckFailedLoginServerResponse(LastServerResponse, e);

            // If no special failure is detected, tell that the login credentials were wrong
            throw e;
        }

        // We are now authenticated and therefore we enter the transaction state
        State = ConnectionState.Transaction;
    }

    /// <summary>
    /// Authenticates a user towards the POP server using the USER and PASSWORD commands
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <exception cref="PopServerException">If the server responded with -ERR</exception>
    private void AuthenticateUsingUserAndPassword(string username, string password)
    {
        SendCommand("USER " + username);
        SendCommand("PASS " + password);

        // Authentication was successful if no exceptions thrown before getting here
    }

    /// <summary>
    /// Authenticates a user towards the POP server using APOP
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <exception cref="NotSupportedException">Thrown when the server does not support APOP</exception>
    /// <exception cref="PopServerException">If the server responded with -ERR</exception>
    private void AuthenticateUsingApop(string username, string password)
    {
        if (!ApopSupported)
            throw new NotSupportedException("APOP is not supported on this server");

        SendCommand("APOP " + username + " " + Apop.ComputeDigest(password, ApopTimeStamp));

        // Authentication was successful if no exceptions thrown before getting here
    }

    /// <summary>
    /// Authenticates using the CRAM-MD5 authentication method
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <exception cref="NotSupportedException">Thrown when the server does not support AUTH CRAM-MD5</exception>
    /// <exception cref="InvalidLoginException">If the user credentials was not accepted</exception>
    /// <exception cref="PopServerLockedException">If the server said the the mailbox was locked</exception>
    /// <exception cref="LoginDelayException">If the server rejects the login because of too recent logins</exception>
    private void AuthenticateUsingCramMd5(string username, string password)
    {
        // Example of communication:
        // C: AUTH CRAM-MD5
        // S: + PDE4OTYuNjk3MTcwOTUyQHBvc3RvZmZpY2UucmVzdG9uLm1jaS5uZXQ+
        // C: dGltIGI5MTNhNjAyYzdlZGE3YTQ5NWI0ZTZlNzMzNGQzODkw
        // S: +OK CRAM authentication successful

        // Other example, where AUTH CRAM-MD5 is not supported
        // C: AUTH CRAM-MD5
        // S: -ERR Authentication method CRAM-MD5 not supported

        try
        {
            SendCommand("AUTH CRAM-MD5");
        }
        catch (Exception e)
        {
            // A PopServerException will be thrown if the server responds with a -ERR not supported
            throw new NotSupportedException("CRAM-MD5 authentication not supported", e);
        }

        // Fetch out the challenge from the server response
        string challenge = LastServerResponse.Substring(2);

        // Compute the challenge response
        string response = CramMd5.ComputeDigest(username, password, challenge);

        // Send the response to the server
        SendCommand(response);

        // Authentication was successful if no exceptions thrown before getting here
    }
    #endregion

    #region Public POP3 commands
    /// <summary>
    /// Get the number of messages on the server using a STAT command
    /// </summary>
    /// <returns>The message count on the server</returns>
    /// <exception cref="PopServerException">If the server did not accept the STAT command</exception>
    public int GetMessageCount()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("You cannot get the message count without authenticating yourself towards the server first");

        return SendCommandIntResponse("STAT", 1);
    }

    /// <summary>
    /// Marks the message with the given message number as deleted.<br/>
    /// <br/>
    /// The message will not be deleted until a QUIT command is sent to the server.<br/>
    /// This is done when you call <see cref="Disconnect()"/> or when the Pop3Client is <see cref="Dispose">Disposed</see>.
    /// </summary>
    /// <param name="messageNumber">
    /// The number of the message to be deleted. This message may not already have been deleted.<br/>
    /// The <paramref name="messageNumber"/> must be inside the range [1, messageCount]
    /// </param>
    /// <exception cref="PopServerException">If the server did not accept the delete command</exception>
    public void DeleteMessage(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("You cannot delete any messages without authenticating yourself towards the server first");

        SendCommand("DELE " + messageNumber);
    }

    /// <summary>
    /// Marks all messages as deleted.<br/>
    /// <br/>
    /// The messages will not be deleted until a QUIT command is sent to the server.<br/>
    /// This is done when you call <see cref="Disconnect()"/> or when the Pop3Client is <see cref="Dispose">Disposed</see>.<br/>
    /// The method assumes that no prior message has been marked as deleted, and is not valid to call if this is wrong.
    /// </summary>
    /// <exception cref="PopServerException">If the server did not accept one of the delete commands. All prior marked messages will still be marked.</exception>
    public void DeleteAllMessages()
    {
        AssertDisposed();

        int messageCount = GetMessageCount();

        for (int messageItem = messageCount; messageItem > 0; messageItem--)
        {
            DeleteMessage(messageItem);
        }
    }

    /// <summary>
    /// Keep server active by sending a NOOP command.<br/>
    /// This might keep the server from closing the connection due to inactivity.<br/>
    /// <br/>
    /// RFC:<br/>
    /// The POP3 server does nothing, it merely replies with a positive response.
    /// </summary>
    /// <exception cref="PopServerException">If the server did not accept the NOOP command</exception>
    public void NoOperation()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("You cannot use the NOOP command unless you are authenticated to the server");

        SendCommand("NOOP");
    }

    /// <summary>
    /// Send a reset command to the server.<br/>
    /// <br/>
    /// RFC:<br/>
    /// If any messages have been marked as deleted by the POP3
    /// server, they are unmarked. The POP3 server then replies
    /// with a positive response.
    /// </summary>
    /// <exception cref="PopServerException">If the server did not accept the RSET command</exception>
    public void Reset()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("You cannot use the RSET command unless you are authenticated to the server");

        SendCommand("RSET");
    }

    /// <summary>
    /// Get a unique ID for a single message.<br/>
    /// </summary>
    /// <param name="messageNumber">
    /// Message number, which may not be marked as deleted.<br/>
    /// The <paramref name="messageNumber"/> must be inside the range [1, messageCount]
    /// </param>
    /// <returns>The unique ID for the message</returns>
    /// <exception cref="PopServerException">If the server did not accept the UIDL command. This could happen if the <paramref name="messageNumber"/> does not exist</exception>
    public string GetMessageUid(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot get message ID, when the user has not been authenticated yet");

        // Example from RFC:
        //C: UIDL 2
        //S: +OK 2 QhdPYR:00WBw1Ph7x7

        SendCommand("UIDL " + messageNumber);

        // Parse out the unique ID
        return LastServerResponse.Split(' ')[2];
    }

    /// <summary>
    /// Gets a list of unique IDs for all messages.<br/>
    /// Messages marked as deleted are not listed.
    /// </summary>
    /// <returns>
    /// A list containing the unique IDs in sorted order from message number 1 and upwards.
    /// </returns>
    /// <exception cref="PopServerException">If the server did not accept the UIDL command</exception>
    public List<string> GetMessageUids()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot get message IDs, when the user has not been authenticated yet");

        // RFC Example:
        // C: UIDL
        // S: +OK
        // S: 1 whqtswO00WBw418f9t5JxYwZ
        // S: 2 QhdPYR:00WBw1Ph7x7
        // S: .      // this is the end

        SendCommand("UIDL");

        List<string> uids = new List<string>();

        string response;
        // Keep reading until multi-line ends with a "."
        while (!IsLastLineInMultiLineResponse(response = StreamUtility.ReadLineAsAscii(Stream)))
        {
            // Add the unique ID to the list
            uids.Add(response.Split(' ')[1]);
        }

        return uids;
    }

    /// <summary>
    /// Gets the size in bytes of a single message
    /// </summary>
    /// <param name="messageNumber">
    /// The number of a message which may not be a message marked as deleted.<br/>
    /// The <paramref name="messageNumber"/> must be inside the range [1, messageCount]
    /// </param>
    /// <returns>Size of the message</returns>
    /// <exception cref="PopServerException">If the server did not accept the LIST command</exception>
    public int GetMessageSize(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot get message size, when the user has not been authenticated yet");

        // RFC Example:
        // C: LIST 2
        // S: +OK 2 200
        return SendCommandIntResponse("LIST " + messageNumber, 2);
    }

    /// <summary>
    /// Get the sizes in bytes of all the messages.<br/>
    /// Messages marked as deleted are not listed.
    /// </summary>
    /// <returns>Size of each message excluding deleted ones</returns>
    /// <exception cref="PopServerException">If the server did not accept the LIST command</exception>
    public List<int> GetMessageSizes()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot get message sizes, when the user has not been authenticated yet");

        // RFC Example:
        // C: LIST
        // S: +OK 2 messages (320 octets)
        // S: 1 120
        // S: 2 200
        // S: .       // End of multi-line

        SendCommand("LIST");

        List<int> sizes = new List<int>();

        string response;
        // Read until end of multi-line
        while (!".".Equals(response = StreamUtility.ReadLineAsAscii(Stream)))
        {
            sizes.Add(int.Parse(response.Split(' ')[1], CultureInfo.InvariantCulture));
        }

        return sizes;
    }

    /// <summary>
    /// Fetches a message from the server and parses it
    /// </summary>
    /// <param name="messageNumber">
    /// Message number on server, which may not be marked as deleted.<br/>
    /// Must be inside the range [1, messageCount]
    /// </param>
    /// <returns>The message, containing the email message</returns>
    /// <exception cref="PopServerException">If the server did not accept the command sent to fetch the message</exception>
    public Message GetMessage(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot fetch a message, when the user has not been authenticated yet");

        byte[] messageContent = GetMessageAsBytes(messageNumber);

        return new Message(messageContent);
    }

    /// <summary>
    /// Fetches a message in raw form from the server
    /// </summary>
    /// <param name="messageNumber">
    /// Message number on server, which may not be marked as deleted.<br/>
    /// Must be inside the range [1, messageCount]
    /// </param>
    /// <returns>The raw bytes of the message</returns>
    /// <exception cref="PopServerException">If the server did not accept the command sent to fetch the message</exception>
    public byte[] GetMessageAsBytes(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot fetch a message, when the user has not been authenticated yet");

        // Get the full message
        return GetMessageAsBytes(messageNumber, false);
    }

    /// <summary>
    /// Get all the headers for a message.<br/>
    /// The server will not need to send the body of the message.
    /// </summary>
    /// <param name="messageNumber">
    /// Message number, which may not be marked as deleted.<br/>
    /// Must be inside the range [1, messageCount]
    /// </param>
    /// <returns>MessageHeaders object</returns>
    /// <exception cref="PopServerException">If the server did not accept the command sent to fetch the message</exception>
    public MessageHeader GetMessageHeaders(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot fetch a message, when the user has not been authenticated yet");

        // Only fetch the header part of the message
        byte[] messageContent = GetMessageAsBytes(messageNumber, true);

        // Do not parse the body - as it is not in the byte array
        return new Message(messageContent, false).Headers;
    }

    /// <summary>
    /// Asks the server to return it's capability listing.<br/>
    /// This is an optional command, which a server is not enforced to accept.
    /// </summary>
    /// <returns>
    /// The returned Dictionary keys are the capability names.<br/>
    /// The Lists pointed to are the capability parameters fitting that certain capability name.
    /// See <a href="http://tools.ietf.org/html/rfc2449#section-6">RFC section 6</a> for explanation for some of the capabilities.
    /// </returns>
    /// <remarks>
    /// Capabilities are case-insensitive.<br/>
    /// The dictionary uses case-insensitive searching, but the Lists inside
    /// does not. Therefore you will have to use something like the code below
    /// to search for a capability parameter.<br/>
    /// foo is the capability name and bar is the capability parameter.
    /// <code>
    /// List&lt;string&gt; arguments = capabilities["foo"];
    ///	bool contains = null != arguments.Find(delegate(string str)
    ///				{
    ///					return String.Compare(str, "bar", true) == 0;
    ///				});
    /// </code>
    /// If we were running on .NET framework >= 3.5, a HashSet could have been used.
    /// </remarks>
    /// <exception cref="PopServerException">If the server did not accept the capability command</exception>
    public Dictionary<string, List<string>> Capabilities()
    {
        AssertDisposed();

        if (State != ConnectionState.Authorization && State != ConnectionState.Transaction)
            throw new Exception("Capability command only available while connected or authenticated");

        // RFC Example
        // Examples:
        // C: CAPA
        // S: +OK Capability list follows
        // S: TOP
        // S: USER
        // S: SASL CRAM-MD5 KERBEROS_V4
        // S: RESP-CODES
        // S: LOGIN-DELAY 900
        // S: PIPELINING
        // S: EXPIRE 60
        // S: UIDL
        // S: IMPLEMENTATION Shlemazle-Plotz-v302
        // S: .
        SendCommand("CAPA");

        // Capablities are case-insensitive
        Dictionary<string, List<string>> capabilities = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);

        string lineRead;
        // Keep reading until we are at the end of the multi line response
        while (!IsLastLineInMultiLineResponse(lineRead = StreamUtility.ReadLineAsAscii(Stream)))
        {
            // Example of read line
            // SASL CRAM-MD5 KERBEROS_V4
            // SASL is the name of the capability while
            // CRAM-MD5 and KERBEROS_V4 are arguments to SASL
            string[] splitted = lineRead.Split(' ');

            // There should always be a capability name
            string capabilityName = splitted[0];

            // Find all the arguments
            List<string> capabilityArguments = new List<string>();
            for (int i = 1; i < splitted.Length; i++)
            {
                capabilityArguments.Add(splitted[i]);
            }

            // Add the capability found to the dictionary
            capabilities.Add(capabilityName, capabilityArguments);
        }

        return capabilities;
    }
    #endregion

    #region Private helper methods
    /// <summary>
    /// Examines string to see if it contains a time stamp to use with the APOP command.<br/>
    /// If it does, sets the <see cref="ApopTimeStamp"/> property to this value.
    /// </summary>
    /// <param name="response">The string to examine</param>
    private void ExtractApopTimestamp(string response)
    {
        // RFC Example:
        // +OK POP3 server ready <1896.697170952@dbc.mtview.ca.us>
        Match match = Regex.Match(response, "<.+>");
        if (match.Success)
        {
            ApopTimeStamp = match.Value;
            ApopSupported = true;
        }
    }

    /// <summary>
    /// Tests a string to see if it is a "+" string.<br/>
    /// An "+" string should be returned by a compliant POP3
    /// server if the request could be served.<br/>
    /// <br/>
    /// The method does only check if it starts with "+".
    /// </summary>
    /// <param name="response">The string to examine</param>
    /// <exception cref="PopServerException">Thrown if server did not respond with "+" message</exception>
    private static void IsOkResponse(string response)
    {
        if (response == null)
            throw new Exception("The stream used to retrieve responses from was closed");

        if (response.StartsWith("+", StringComparison.OrdinalIgnoreCase))
            return;

        throw new Exception("The server did not respond with a + response. The response was: \"" + response + "\"");
    }

    /// <summary>
    /// Sends a command to the POP server.<br/>
    /// If this fails, an exception is thrown.
    /// </summary>
    /// <param name="command">The command to send to server</param>
    /// <exception cref="PopServerException">If the server did not send an OK message to the command</exception>
    private void SendCommand(string command)
    {
        // Convert the command with CRLF afterwards as per RFC to a byte array which we can write
        byte[] commandBytes = Encoding.ASCII.GetBytes(command + "\r\n");

        // Write the command to the server
        Stream.Write(commandBytes, 0, commandBytes.Length);
        Stream.Flush(); // Flush the content as we now wait for a response

        // Read the response from the server. The response should be in ASCII
        LastServerResponse = StreamUtility.ReadLineAsAscii(Stream);

        IsOkResponse(LastServerResponse);
    }

    /// <summary>
    /// Sends a command to the POP server, expects an integer reply in the response
    /// </summary>
    /// <param name="command">command to send to server</param>
    /// <param name="location">
    /// The location of the int to return.<br/>
    /// Example:<br/>
    /// <c>S: +OK 2 200</c><br/>
    /// Set <paramref name="location"/>=1 to get 2<br/>
    /// Set <paramref name="location"/>=2 to get 200<br/>
    /// </param>
    /// <returns>Integer value in the reply</returns>
    /// <exception cref="PopServerException">If the server did not accept the command</exception>
    private int SendCommandIntResponse(string command, int location)
    {
        SendCommand(command);

        return int.Parse(LastServerResponse.Split(' ')[location], CultureInfo.InvariantCulture);
    }

    /// <summary>
    /// Asks the server for a message and returns the message response as a byte array.
    /// </summary>
    /// <param name="messageNumber">
    /// Message number on server, which may not be marked as deleted.<br/>
    /// Must be inside the range [1, messageCount]
    /// </param>
    /// <param name="askOnlyForHeaders">If <see langword="true"/> only the header part of the message is requested from the server. If <see langword="false"/> the full message is requested</param>
    /// <returns>A byte array that the message requested consists of</returns>
    /// <exception cref="PopServerException">If the server did not accept the command sent to fetch the message</exception>
    private byte[] GetMessageAsBytes(int messageNumber, bool askOnlyForHeaders)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot fetch a message, when the user has not been authenticated yet");

        if (askOnlyForHeaders)
        {
            // 0 is the number of lines of the message body to fetch, therefore it is set to zero to fetch only headers
            SendCommand("TOP " + messageNumber + " 0");
        }
        else
        {
            // Ask for the full message
            SendCommand("RETR " + messageNumber);
        }

        // RFC 1939 Example
        // C: RETR 1
        // S: +OK 120 octets
        // S: <the POP3 server sends the entire message here>
        // S: .

        // Create a byte array builder which we use to write the bytes too
        // When done, we can get the byte array out
        using (MemoryStream byteArrayBuilder = new MemoryStream())
        {
            bool first = true;
            byte[] lineRead;

            // Keep reading until we are at the end of the multi line response
            while (!IsLastLineInMultiLineResponse(lineRead = StreamUtility.ReadLineAsBytes(Stream)))
            {
                // We should not write CRLF on the very last line, therefore we do this
                if (!first)
                {
                    // Write CRLF which was not included in the lineRead bytes of last line
                    byte[] crlfPair = Encoding.ASCII.GetBytes("\r\n");
                    byteArrayBuilder.Write(crlfPair, 0, crlfPair.Length);
                }
                else
                {
                    // We are now not the first anymore
                    first = false;
                }

                // This is a multi-line. See http://tools.ietf.org/html/rfc1939#section-3
                // It says that a line starting with "." and not having CRLF after it
                // is a multi line, and the "." should be stripped
                if (lineRead.Length > 0 && lineRead[0] == '.')
                {
                    // Do not write the first period
                    byteArrayBuilder.Write(lineRead, 1, lineRead.Length - 1);
                }
                else
                {
                    // Write everything
                    byteArrayBuilder.Write(lineRead, 0, lineRead.Length);
                }
            }

            // If we are fetching a header - add an extra line to denote the headers ended
            if (askOnlyForHeaders)
            {
                byte[] crlfPair = Encoding.ASCII.GetBytes("\r\n");
                byteArrayBuilder.Write(crlfPair, 0, crlfPair.Length);
            }

            // Get out the bytes we have written to byteArrayBuilder
            byte[] receivedBytes = byteArrayBuilder.ToArray();

            return receivedBytes;
        }
    }

    /// <summary>
    /// Check if the bytes received is the last line in a multi line response
    /// from the pop3 server. It is the last line if the line contains only a "."
    /// </summary>
    /// <param name="bytesReceived">The last line received from the server, which could be the last response line</param>
    /// <returns><see langword="true"/> if last line in a multi line response, <see langword="false"/> otherwise</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="bytesReceived"/> is <see langword="null"/></exception>
    private static bool IsLastLineInMultiLineResponse(byte[] bytesReceived)
    {
        if (bytesReceived == null)
            throw new ArgumentNullException("bytesReceived");

        return bytesReceived.Length == 1 && bytesReceived[0] == '.';
    }

    /// <see cref="IsLastLineInMultiLineResponse(byte[])"> for documentation</see>
    private static bool IsLastLineInMultiLineResponse(string lineReceived)
    {
        if (lineReceived == null)
            throw new ArgumentNullException("lineReceived");

        // If the string is indeed the last line, then it is okay to do ASCII encoding
        // on it. For performance reasons we check if the length is equal to 1
        // so that we do not need to decode a long message string just to see if
        // it is the last line
        return lineReceived.Length == 1 && IsLastLineInMultiLineResponse(Encoding.ASCII.GetBytes(lineReceived));
    }

    /// <summary>
    /// Method for checking that a <paramref name="messageNumber"/> argument given to some method
    /// is indeed valid. If not, <see cref="InvalidUseException"/> will be thrown.
    /// </summary>
    /// <param name="messageNumber">The message number to validate</param>
    private static void ValidateMessageNumber(int messageNumber)
    {
        if (messageNumber <= 0)
            throw new Exception("The messageNumber argument cannot have a value of zero or less. Valid messageNumber is in the range [1, messageCount]");
    }

    /// <summary>
    /// Closes down the streams and sets the Pop3Client into the initial configuration
    /// </summary>
    private void DisconnectStreams()
    {
        try
        {
            Stream.Close();
        }
        finally
        {
            // Reset values to initial state
            SetInitialValues();
        }
    }

    /// <summary>
    /// Sets the initial values on the public properties of this Pop3Client.
    /// </summary>
    private void SetInitialValues()
    {
        // We have not seen the APOPTimestamp yet
        ApopTimeStamp = null;

        // We are not connected
        Connected = false;
        State = ConnectionState.Disconnected;

        // APOP is not supported before we check on login
        ApopSupported = false;
    }

    /// <summary>
    /// Checks for extra response codes when an authentication has failed and throws
    /// the correct exception.
    /// If no such response codes is found, nothing happens.
    /// </summary>
    /// <param name="serverErrorResponse">The server response string</param>
    /// <param name="e">The exception thrown because the server responded with -ERR</param>
    /// <exception cref="PopServerLockedException">If the account is locked or in use</exception>
    /// <exception cref="LoginDelayException">If the server rejects the login because of too recent logins</exception>
    private static void CheckFailedLoginServerResponse(string serverErrorResponse, Exception e)
    {
        string upper = serverErrorResponse.ToUpperInvariant();

        // Bracketed strings are extra response codes addded
        // in RFC http://tools.ietf.org/html/rfc2449
        // together with the CAPA command.

        // Specifies the account is in use
        if (upper.Contains("[IN-USE]") || upper.Contains("LOCK"))
        {
            //DefaultLogger.Log.LogError("Authentication: maildrop is locked or in-use");
            throw e;
        }

        // Specifies that there must go some time between logins
        if (upper.Contains("[LOGIN-DELAY]"))
        {
            throw e;
        }
    }
    #endregion
}
]]></code></stage><stage stageid="e74c516a-5c0f-4539-88d1-4af07d49b311" name="Clean Up" type="SubSheetInfo"><subsheetid>ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="453e6ca1-71dc-4ce2-8a1c-d6512bd6b502" name="Start" type="Start"><subsheetid>ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>98566d14-9c68-423f-a446-0c63a9d56369</onsuccess></stage><stage stageid="98566d14-9c68-423f-a446-0c63a9d56369" name="End" type="End"><subsheetid>ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d</subsheetid><loginhibit /><display x="15" y="90" /></stage><stage stageid="dfd23e65-5e00-48c2-9222-b028de2d5425" name="new" type="Note"><subsheetid>ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="9ffa7f6a-6f1a-4b3a-800b-c5b3d02f1053" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="3d27a452-2516-48ee-a57b-363989e0a677" name="Delete Message" type="SubSheetInfo"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><narrative>Deletes a message from the POP3 server.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="7120f051-794a-428f-b0ca-ada23ab0da34" name="Start" type="Start"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="-135" /><inputs><input type="text" name="MessageID" narrative="The ID of the message to delete." stage="MessageID" /></inputs><onsuccess>fdb5293f-358f-4a67-b88b-4caa37a0f16f</onsuccess></stage><stage stageid="10c06eb3-10d6-4759-9f38-22fdb99f5635" name="MessageID" type="Data"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><display x="90" y="-135" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f7d6db43-bdda-4cf0-bee9-37c1bfaadd6c" name="Configure" type="SubSheetInfo"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><narrative>Configures POP3 and SMTP settings for the Business Object</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="26f68cd5-5a95-4e00-863e-0e3393c2e05c" name="End" type="End"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><loginhibit /><display x="15" y="-15" /></stage><stage stageid="0c9b2a5e-a669-43e8-94ce-0a93ac299716" name="Start" type="Start"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="Username" narrative="The POP3 and SMTP Username" stage="Username" /><input type="password" name="Password" narrative="The POP3 and SMTP Password" stage="Password" /><input type="text" name="POP3 Server" narrative="The POP3 Server address e.g. pop.domain.com" stage="POP3 Server" /><input type="text" name="SMTP Server" narrative="The SMTP Server address e.g. smtp.domain.com" stage="SMTP Server" /><input type="number" name="POP3 Port" narrative="The POP3 Port, e.g. 110 or 995" stage="POP3 Port" /><input type="number" name="SMTP Port" narrative="The SMTP Port, e.g 25 or 465" stage="SMTP Port" /><input type="flag" name="POP3 UseSSL" narrative="Whether to use SSL for POP3" stage="POP3 UseSSL" /><input type="flag" name="SMTP UseSSL" narrative="Whether to use SSL for SMTP" stage="SMTP UseSSL" /></inputs><onsuccess>5fc137ae-22ff-4a9a-8e93-7c3923a7775f</onsuccess></stage><stage stageid="6200a401-764c-40bb-9c01-710765a7198a" name="Username" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="165" y="-150" /><datatype>text</datatype><initialvalue /><alwaysinit /></stage><stage stageid="949b007a-73ec-49c8-bf67-97989d93b9d2" name="Password" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="240" y="-150" /><datatype>password</datatype><initialvalueenc></initialvalueenc><alwaysinit /></stage><stage stageid="c92379ab-616d-4e9f-bbdf-76d8f4a464de" name="Disconnect POP3" type="SubSheetInfo"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="68269076-5ba4-49b3-bb2b-e89927d49df3" name="Start" type="Start"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>d4140c57-5f78-45ff-8e59-d720e57c6bb2</onsuccess></stage><stage stageid="f304774e-9251-4092-b2a7-32424accffdb" name="End" type="End"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><loginhibit /><display x="15" y="30" /></stage><stage stageid="d4140c57-5f78-45ff-8e59-d720e57c6bb2" name="Disconnect" type="Code"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><loginhibit /><display x="15" y="-60" /><onsuccess>367756ad-7a12-4c98-95ef-e1c9324c9ffa</onsuccess><code><![CDATA[_rclient.Disconnect();]]></code></stage><stage stageid="d85d6404-ed67-4802-b251-3c6e4f553bc3" name="Delete Message" type="Code"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="0" /><inputs><input type="number" name="MessageNumber" expr="[Message Number]" /></inputs><onsuccess>1027af62-c9e7-443b-a361-2b2fa991aed1</onsuccess><code><![CDATA[_rclient.DeleteMessage((int)MessageNumber);]]></code></stage><stage stageid="64b00b6b-bad6-4e81-bdc2-72fcaaf69961" name="End" type="End"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="90" /></stage><stage stageid="5fc137ae-22ff-4a9a-8e93-7c3923a7775f" name="Set Configured" type="Calculation"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><loginhibit /><display x="15" y="-60" /><onsuccess>26f68cd5-5a95-4e00-863e-0e3393c2e05c</onsuccess><calculation expression="True" stage="Configured" /></stage><stage stageid="e691cdbf-68a7-46c5-9469-911182bc8475" name="Connect POP3" type="SubSheetInfo"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="15b67dac-088d-4cf3-a6a7-2feca9d5c99d" name="Start" type="Start"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="-180" /><inputs><input type="text" name="Action" stage="Action" /></inputs><onsuccess>3ca489aa-ab27-465b-b189-8875b7dd615d</onsuccess></stage><stage stageid="710abe98-0572-4ea2-adab-5ac1226ed5ac" name="End" type="End"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="120" /></stage><stage stageid="73bf49d5-81cc-4f1a-b89d-ed0c90a05a86" name="Configured" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><loginhibit /><display x="90" y="-60" /><datatype>flag</datatype><initialvalue>False</initialvalue><alwaysinit /></stage><stage stageid="bcb58d07-9f70-40cf-9df3-eeff2d3a75b6" name="Configured" type="Decision"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="-60" /><decision expression="[Configured]" /><ontrue>6a90465e-93b4-4c91-95c2-cfc40b74d63c</ontrue><onfalse>2f2d374d-c22d-470e-99e5-d1ca2fce2c95</onfalse></stage><stage stageid="6a90465e-93b4-4c91-95c2-cfc40b74d63c" name="Connect and Authenticate" type="Code"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="0" /><inputs><input type="text" name="Username" expr="[Username]" /><input type="text" name="Password" expr="[Password]" /><input type="text" name="Server" expr="[POP3 Server]" /><input type="number" name="Port" expr="[POP3 Port]" /><input type="flag" name="Use SSL" expr="[POP3 UseSSL]" /></inputs><onsuccess>5827b973-4390-423c-b457-4a225cd63717</onsuccess><code><![CDATA[_rclient = new Pop3Client();
_rclient.Connect(Server,(int)Port,Use_SSL);
_rclient.Authenticate(Username,Password);]]></code></stage><stage stageid="2f2d374d-c22d-470e-99e5-d1ca2fce2c95" name="Exception1" type="Exception"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><display x="90" y="-60" /><exception type="" detail="&quot;Cannot connect to Server you must use Configure first&quot; " /></stage><stage stageid="7d982653-252b-40ea-aa32-027aa81ece7c" name="Action" type="Data"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><display x="90" y="-120" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5827b973-4390-423c-b457-4a225cd63717" name="Set Connected" type="Calculation"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="60" /><onsuccess>710abe98-0572-4ea2-adab-5ac1226ed5ac</onsuccess><calculation expression="True" stage="POP3 Connected" /></stage><stage stageid="aee3539f-93d1-4661-8e48-e207e7fda381" name="POP3 Connected" type="Data"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><display x="90" y="60" /><datatype>flag</datatype><initialvalue>False</initialvalue></stage><stage stageid="3ca489aa-ab27-465b-b189-8875b7dd615d" name="Connected" type="Decision"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="-120" /><decision expression="[POP3 Connected]" /><ontrue>d99cd226-dd16-4417-af86-11e756edfb93</ontrue><onfalse>bcb58d07-9f70-40cf-9df3-eeff2d3a75b6</onfalse></stage><stage stageid="d99cd226-dd16-4417-af86-11e756edfb93" name="End" type="End"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="-75" y="-120" /></stage><stage stageid="1fa82664-ea42-4255-84ab-50b61958fe56" name="POP3 Server" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="165" y="-105" /><datatype>text</datatype><initialvalue /><alwaysinit /></stage><stage stageid="23794a48-9b7c-4d9c-b4ea-93c47ab545fe" name="SMTP Server" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="240" y="-105" /><datatype>text</datatype><initialvalue /><alwaysinit /></stage><stage stageid="bb607f8e-6326-4b20-9d1c-be2061af1a0a" name="SMTP Port" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="240" y="-60" /><datatype>number</datatype><initialvalue /><alwaysinit /></stage><stage stageid="8d588294-9205-4d6f-abb1-bdc102beac7e" name="POP3 Port" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="165" y="-60" /><datatype>number</datatype><initialvalue /><alwaysinit /></stage><stage stageid="4b819ad9-214e-4499-b11b-73d0fd122070" name="SMTP UseSSL" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="240" y="-15" /><datatype>flag</datatype><initialvalue /><alwaysinit /></stage><stage stageid="47441526-8d37-4599-921c-9e4103ac87aa" name="POP3 UseSSL" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="165" y="-15" /><datatype>flag</datatype><initialvalue /><alwaysinit /></stage><stage stageid="367756ad-7a12-4c98-95ef-e1c9324c9ffa" name="Set Connected" type="Calculation"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><loginhibit /><display x="15" y="-15" /><onsuccess>f304774e-9251-4092-b2a7-32424accffdb</onsuccess><calculation expression="False" stage="POP3 Connected" /></stage><stage stageid="1027af62-c9e7-443b-a361-2b2fa991aed1" name="Disconnect POP3" type="SubSheet"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="45" /><onsuccess>64b00b6b-bad6-4e81-bdc2-72fcaaf69961</onsuccess><processid>c8b9e601-7444-4385-b2aa-6709658ad472</processid></stage><stage stageid="943a7e4b-9dbd-427b-a3a1-4f2810050f82" name="Send Message" type="SubSheetInfo"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><narrative>Sends a message using the SMTP protocol.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="eb463c09-de32-4dde-94c3-cf0507ee79e3" name="Start" type="Start"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><loginhibit /><display x="-45" y="-135" /><inputs><input type="text" name="From" narrative="The email address of the sender." stage="From" /><input type="text" name="To" narrative="The email address of the recipient. To address multiple recipients use the format &quot;john.smith@example.com, henry.jones@example.com&quot; OR &quot;John Smith &lt;john.smith@example.com&gt;, Henry Jones &lt;henry.jones@example.com&gt;&quot;." stage="To" /><input type="text" name="Subject" narrative="The subject of the email." stage="Subject" /><input type="text" name="Body" narrative="The body of the email." stage="Body" /><input type="collection" name="Attachments" narrative="A Collection containing a list of files to add to the email as attachments." stage="Attachments" /><input type="flag" name="BodyIsHTML" narrative="Indicates if the body should be sent as HTML" stage="BodyIsHTML" /></inputs><onsuccess>8e55392e-ae1e-443f-9d5b-37fbeb948c47</onsuccess></stage><stage stageid="7e86926f-9f8a-4e11-aff3-b0ea75a9e350" name="End" type="End"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><loginhibit /><display x="-45" y="0" /></stage><stage stageid="18563c9d-55d4-4aea-9713-58595b565208" name="From" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-225" y="-30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7e3eba6a-938c-4747-91fb-f065fd8e1ecd" name="To" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-165" y="-30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6cbf338c-56d6-45b9-bfa6-40dcc60f55f4" name="Subject" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-225" y="15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="364ba15a-711a-471f-a468-2fe38c091107" name="Body" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-165" y="15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a212d081-53fb-4398-bda0-462ce18c07c2" name="Send Message" type="Code"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><loginhibit /><display x="-45" y="-45" /><inputs><input type="text" name="Server" expr="[SMTP Server]" /><input type="number" name="Port" expr="[SMTP Port]" /><input type="text" name="Username" expr="[Username]" /><input type="password" name="Password" expr="[Password]" /><input type="flag" name="UseSSL" expr="[SMTP UseSSL]" /><input type="text" name="From" expr="[From]" /><input type="text" name="To" expr="[To]" /><input type="text" name="Subject" expr="[Subject]" /><input type="text" name="Body" expr="[Body]" /><input type="collection" name="Attachments" expr="[Attachments]" /><input type="flag" name="BodyIsHTML" expr="[BodyIsHTML]" /></inputs><onsuccess>7e86926f-9f8a-4e11-aff3-b0ea75a9e350</onsuccess><code><![CDATA[SmtpClient client = new SmtpClient();
try
{
	client.Host = Server;
	client.Port = (int)Port;
	if (Username != "")
		client.Credentials = new NetworkCredential(Username,Password);
	client.EnableSsl = UseSSL;

	using(MailMessage mail = new MailMessage())
	{
		mail.From = new MailAddress(From);
		mail.To.Add(To);
		mail.Subject = Subject;
		mail.IsBodyHtml = BodyIsHTML;
		mail.Body = Body;

		foreach(DataRow dr in Attachments.Rows)
		{
			string file = dr["Path"].ToString();
			Attachment data = new Attachment(file, MediaTypeNames.Application.Octet);
			ContentDisposition dis = data.ContentDisposition;
			dis.CreationDate = File.GetCreationTime(file);
			dis.ModificationDate = File.GetLastWriteTime(file);
			dis.ReadDate = File.GetLastAccessTime(file);
			mail.Attachments.Add(data);
		}

		client.Send(mail);
	}
}
catch(Exception ex)
{
	string msg = ex.Message;
	if(ex.InnerException != null) {
		msg += " - " + ex.InnerException.Message;
	}
	throw new Exception(msg);
}
finally
{
	IDisposable disposableClient = client as IDisposable;
	if (disposableClient!=null)
		disposableClient.Dispose();
}]]></code></stage><stage stageid="fdb5293f-358f-4a67-b88b-4caa37a0f16f" name="Connect POP3" type="SubSheet"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="-90" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>7bb623a1-88ca-4162-8eba-a0d384df4aec</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="5c4dcdf6-a371-4878-9c4c-3fd08aa568f4" name="List Messages" type="SubSheetInfo"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="f8e7202a-f413-4d68-b38e-4b6d789318f1" name="Start" type="Start"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>c47a1fa4-9fa6-4b4c-b35c-5d03d65fad46</onsuccess></stage><stage stageid="76845230-717a-4efe-954c-b10309c6cc6c" name="End" type="End"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="165" y="60" /><outputs><output type="collection" name="Emails" stage="Emails" /></outputs></stage><stage stageid="797b45e9-3197-454c-9068-7baefc351f75" name="MessageCount" type="Data"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><display x="90" y="0" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="b94061e0-c242-4e91-8bc6-ed1cc12cd5e9" name="Messages Left?" type="Decision"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="60" /><decision expression="[MessageCount] &gt;0" /><ontrue>0f6d2f90-451c-4d3b-89cf-517bddb760d8</ontrue><onfalse>76845230-717a-4efe-954c-b10309c6cc6c</onfalse></stage><stage stageid="cecc8228-7a4a-4e96-b398-8757b6db702d" name="Decrement" type="Calculation"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="255" /><onsuccess>aafa7d4a-dfb0-4446-9323-8afa0b721cf0</onsuccess><calculation expression="[MessageCount]-1" stage="MessageCount" /></stage><stage stageid="002f58e7-8123-4b0a-bcca-2319263c33d1" name="Get Message Headers1" type="Code"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="180" /><inputs><input type="number" name="MessageNumber" expr="[MessageCount]" /></inputs><outputs><output type="text" name="Subject" stage="Emails.Subject" /><output type="text" name="From Name" stage="Emails.From Name" /><output type="text" name="From Email" stage="Emails.From Address" /><output type="datetime" name="Date Sent" stage="Emails.Date Sent" /><output type="text" name="MessageID" stage="Emails.MessageID" /></outputs><onsuccess>cecc8228-7a4a-4e96-b398-8757b6db702d</onsuccess><code><![CDATA[MessageHeader result =_rclient.GetMessageHeaders((int)MessageNumber);
Subject = result.Subject;
From_Name = result.From.DisplayName;
From_Email = result.From.Address;
Date_Sent = result.DateSent;
MessageID = result.MessageId;]]></code></stage><stage stageid="aafa7d4a-dfb0-4446-9323-8afa0b721cf0" name="anchor1" type="Anchor"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="-75" y="255" w="10" h="10" /><onsuccess>6a475ba3-f7b4-4ead-8691-921b64e9e896</onsuccess></stage><stage stageid="6a475ba3-f7b4-4ead-8691-921b64e9e896" name="anchor2" type="Anchor"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="-75" y="60" w="10" h="10" /><onsuccess>b94061e0-c242-4e91-8bc6-ed1cc12cd5e9</onsuccess></stage><stage stageid="0f6d2f90-451c-4d3b-89cf-517bddb760d8" name="Add Row" type="Action"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="120" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Emails&quot;" /></inputs><onsuccess>002f58e7-8123-4b0a-bcca-2319263c33d1</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="38f14f0c-f87e-4c96-8836-8f5b8faced14" name="Emails" type="Collection"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="165" y="105" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Subject" type="text" description="The subject of the email." /><field name="From Name" type="text" description="The name of the sender." /><field name="From Address" type="text" description="The email address of the sender." /><field name="Date Sent" type="datetime" description="The date and time at which the email was sent." /><field name="MessageID" type="text" description="The ID of the email message." /></collectioninfo></stage><stage stageid="0bf982d4-8f0e-4d69-aa12-0ac3996f3d84" name="Get Message Count2" type="Code"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="0" /><outputs><output type="number" name="MessageCount" stage="MessageCount" /></outputs><onsuccess>b94061e0-c242-4e91-8bc6-ed1cc12cd5e9</onsuccess><code><![CDATA[MessageCount=_rclient.GetMessageCount();]]></code></stage><stage stageid="c47a1fa4-9fa6-4b4c-b35c-5d03d65fad46" name="Connect POP3" type="SubSheet"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>0bf982d4-8f0e-4d69-aa12-0ac3996f3d84</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="9879be0d-2188-4595-91b6-ac07d1e348dc" name="Get Message" type="SubSheetInfo"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><narrative>Gets a message using the POP3 protocol. By default, for multipart messages the plain text part is returned in preference to HTML (with the Content-Type output parameter indicating what was actually returned), however the HTMLPreferred flag can be used to reverse this logic. If the message contains no plain text or HTML parts then an empty string is returned.</narrative><display x="-195" y="-60" w="150" h="180" /></stage><stage stageid="6a181147-fc29-471a-8902-d9fffbb71d86" name="Start" type="Start"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="MessageID" narrative="The ID of the message to retrieve." stage="MessageID" /><input type="flag" name="HTMLPreferred" narrative="Return HTML content in preference to plain text (multipart messages only)" stage="HTMLPreferred" /></inputs><onsuccess>b218b56f-ef0d-4199-91ee-f1ccb4eec209</onsuccess></stage><stage stageid="f44ba718-e5c7-48fd-8233-0e9bfbf2048d" name="MessageID" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="90" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="39a05d5d-741a-4c0a-a59c-f5952b55bb44" name="End" type="End"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="75" /><outputs><output type="text" name="Body" narrative="The email body" stage="Body" /><output type="text" name="Content-Type" narrative="The content type of the returned body (e.g. text/plain)" stage="Content-Type" /></outputs></stage><stage stageid="b218b56f-ef0d-4199-91ee-f1ccb4eec209" name="Connect POP3" type="SubSheet"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>fb2ca3a4-1e9e-4b39-b820-40e7c035d7d8</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="e0ceae00-8c9e-4201-8a4b-2e3b1a6b5293" name="Get Message" type="Code"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="30" /><inputs><input type="number" name="MessageNumber" expr="[Message Number]" /><input type="flag" name="HTMLPreferred" expr="[HTMLPreferred]" /></inputs><outputs><output type="text" name="Body" stage="Body" /><output type="text" name="Content-Type" stage="Content-Type" /></outputs><onsuccess>39a05d5d-741a-4c0a-a59c-f5952b55bb44</onsuccess><code><![CDATA[Message m =_rclient.GetMessage((int)MessageNumber);
MessagePart p;
if (HTMLPreferred) {
	p = m.FindFirstHtmlVersion();
	if (p == null) p = m.FindFirstPlainTextVersion();
} else {
	p = m.FindFirstPlainTextVersion();
	if (p == null) p = m.FindFirstHtmlVersion();
}
if (p != null) {
	Body = p.GetBodyAsText();
	Content_Type = p.ContentType.ToString();
} else {
	Body = "";
	Content_Type = "";
}]]></code></stage><stage stageid="aa902ce3-629f-4d73-87a8-5e04f070405f" name="Body" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="90" y="75" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d64e2310-ca59-4f22-8594-a0cd08d3d78f" name="Number From ID" type="SubSheetInfo"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="63a1c937-63b0-4a26-aba7-716654c5da18" name="Start" type="Start"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="MessageID" stage="MessageID" /></inputs><onsuccess>f6de7ad3-6964-449c-bdc0-135401e01d62</onsuccess></stage><stage stageid="9e58393f-f316-40c2-bf5b-7aaa994e24ec" name="MessageID" type="Data"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><display x="90" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="40f3248b-d376-4904-aef8-505a14c96731" name="End" type="End"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="165" y="15" /><outputs><output type="number" name="Message Number" stage="MessageCount" /></outputs></stage><stage stageid="f6de7ad3-6964-449c-bdc0-135401e01d62" name="Get Message Count" type="Code"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="-45" /><outputs><output type="number" name="MessageCount" stage="MessageCount" /></outputs><onsuccess>0623c4e8-9fd1-40c7-8d57-d9b00ad7f140</onsuccess><code><![CDATA[MessageCount = _rclient.GetMessageCount();]]></code></stage><stage stageid="f1f6e86c-668e-46ae-8fad-4da426311236" name="MessageCount" type="Data"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><display x="90" y="-45" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0623c4e8-9fd1-40c7-8d57-d9b00ad7f140" name="Messages Left?" type="Decision"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="15" /><decision expression="[MessageCount] &gt;0" /><ontrue>c9e08180-d230-4857-a8c5-361f80b97a8c</ontrue><onfalse>40f3248b-d376-4904-aef8-505a14c96731</onfalse></stage><stage stageid="dbf5258e-83cb-432e-b51e-596ef2ccbb01" name="Decrement" type="Calculation"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="195" /><onsuccess>a21a95f1-5257-48c7-bf2b-db274edbc70f</onsuccess><calculation expression="[MessageCount]-1" stage="MessageCount" /></stage><stage stageid="c9e08180-d230-4857-a8c5-361f80b97a8c" name="Get Message Headers" type="Code"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="75" /><inputs><input type="number" name="MessageNumber" expr="[MessageCount]" /></inputs><outputs><output type="text" name="MessageID" stage="FoundMessageID" /></outputs><onsuccess>20b52376-80d0-49b8-8b7f-12e300c62410</onsuccess><code><![CDATA[MessageHeader result =_rclient.GetMessageHeaders((int)MessageNumber);
MessageID = result.MessageId;]]></code></stage><stage stageid="a21a95f1-5257-48c7-bf2b-db274edbc70f" name="anchor1" type="Anchor"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="-75" y="195" w="10" h="10" /><onsuccess>37af2a50-a79d-4d9c-913e-cb970afaa33f</onsuccess></stage><stage stageid="37af2a50-a79d-4d9c-913e-cb970afaa33f" name="anchor2" type="Anchor"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="-75" y="15" w="10" h="10" /><onsuccess>0623c4e8-9fd1-40c7-8d57-d9b00ad7f140</onsuccess></stage><stage stageid="ddcb6ae8-4ccf-4a15-a377-97a5535a287b" name="FoundMessageID" type="Data"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><display x="90" y="75" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20b52376-80d0-49b8-8b7f-12e300c62410" name="Message Match" type="Decision"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="120" /><decision expression="[MessageID]=[FoundMessageID]" /><ontrue>73b0921c-7ac9-4ede-ac69-891397d2cd3b</ontrue><onfalse>dbf5258e-83cb-432e-b51e-596ef2ccbb01</onfalse></stage><stage stageid="73b0921c-7ac9-4ede-ac69-891397d2cd3b" name="End" type="End"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="165" y="120" /><outputs><output type="number" name="Message Number" stage="MessageCount" /></outputs></stage><stage stageid="7bb623a1-88ca-4162-8eba-a0d384df4aec" name="Number From ID" type="SubSheet"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="-45" /><inputs><input type="text" name="MessageID" expr="[MessageID]" /></inputs><outputs><output type="number" name="Message Number" stage="Message Number" /></outputs><onsuccess>d85d6404-ed67-4802-b251-3c6e4f553bc3</onsuccess><processid>4688b112-6575-4f8a-980c-713566729518</processid></stage><stage stageid="356a7e1e-cf63-4cde-a441-7f6889494278" name="Message Number" type="Data"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><display x="90" y="-45" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fb2ca3a4-1e9e-4b39-b820-40e7c035d7d8" name="Number From ID" type="SubSheet"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="MessageID" expr="[MessageID]" /></inputs><outputs><output type="number" name="Message Number" stage="Message Number" /></outputs><onsuccess>e0ceae00-8c9e-4201-8a4b-2e3b1a6b5293</onsuccess><processid>4688b112-6575-4f8a-980c-713566729518</processid></stage><stage stageid="8fabc428-4d6b-46b9-90d6-27513ef82084" name="Message Number" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="90" y="-15" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f06ff7dc-dee1-4319-8fb8-e7324bbeda46" name="Delete Messages" type="SubSheetInfo"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><narrative>Deletes a collection identifying messages from the POP3 server.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="d878691d-ebbf-449b-b3e9-1a4dbc780391" name="Start" type="Start"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="collection" name="MessageIDs" narrative="A collection containing the IDs of the messages to delete." stage="MessageIDs" /></inputs><onsuccess>12f5806c-a210-4e38-8f15-5d8cbaa6fc9b</onsuccess></stage><stage stageid="b2f67ca9-9e76-4ae8-ab11-bbeb3991f9f1" name="Delete Message1" type="Code"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="210" /><inputs><input type="number" name="MessageNumber" expr="[MessageNumbers.MessageNumber]" /></inputs><onsuccess>5acbc759-910b-43a4-aad3-277348fe735e</onsuccess><code><![CDATA[_rclient.DeleteMessage((int)MessageNumber);]]></code></stage><stage stageid="592900a1-6fa2-4aae-8df6-4aceeb59cd3c" name="End" type="End"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="345" /></stage><stage stageid="b5f506e0-8569-45f6-bc34-f11ca13a180f" name="Disconnect POP3" type="SubSheet"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="300" /><onsuccess>592900a1-6fa2-4aae-8df6-4aceeb59cd3c</onsuccess><processid>c8b9e601-7444-4385-b2aa-6709658ad472</processid></stage><stage stageid="12f5806c-a210-4e38-8f15-5d8cbaa6fc9b" name="Connect POP3" type="SubSheet"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>b542fa7b-76a0-4ac7-bef8-b7523eed14dc</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="d1c8749a-8674-4230-980f-d75287257eb7" name="Number From ID" type="SubSheet"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="75" /><inputs><input type="text" name="MessageID" expr="[MessageIDs.MessageID]" /></inputs><outputs><output type="number" name="Message Number" stage="MessageNumbers.MessageNumber" /></outputs><onsuccess>37fa1082-1d8f-4a93-a6bf-ebfa986abde1</onsuccess><processid>4688b112-6575-4f8a-980c-713566729518</processid></stage><stage stageid="b542fa7b-76a0-4ac7-bef8-b7523eed14dc" name="For Each MessageID" type="LoopStart"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="-15" /><onsuccess>05f7d6d8-79ad-4aa7-823f-6d114dfdff84</onsuccess><groupid>d1ff5376-69c7-47a4-a5a5-71e609d81702</groupid><looptype>ForEach</looptype><loopdata>MessageIDs</loopdata></stage><stage stageid="37fa1082-1d8f-4a93-a6bf-ebfa986abde1" name="Next" type="LoopEnd"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="120" /><onsuccess>227fbd4a-9ce9-42be-b920-b00ae83b5705</onsuccess><groupid>d1ff5376-69c7-47a4-a5a5-71e609d81702</groupid></stage><stage stageid="05f7d6d8-79ad-4aa7-823f-6d114dfdff84" name="Add Row" type="Action"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="30" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;MessageNumbers&quot;" /></inputs><onsuccess>d1c8749a-8674-4230-980f-d75287257eb7</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="26d19bda-3d6e-41ad-817e-cbec74832a0f" name="MessageNumbers" type="Collection"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><display x="90" y="75" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="MessageNumber" type="number" /></collectioninfo></stage><stage stageid="227fbd4a-9ce9-42be-b920-b00ae83b5705" name="For Each Message Number" type="LoopStart"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="165" /><onsuccess>b2f67ca9-9e76-4ae8-ab11-bbeb3991f9f1</onsuccess><groupid>0faefc94-574d-4561-8432-32eb13a0c75d</groupid><looptype>ForEach</looptype><loopdata>MessageNumbers</loopdata></stage><stage stageid="5acbc759-910b-43a4-aad3-277348fe735e" name="Next" type="LoopEnd"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="255" /><onsuccess>b5f506e0-8569-45f6-bc34-f11ca13a180f</onsuccess><groupid>0faefc94-574d-4561-8432-32eb13a0c75d</groupid></stage><stage stageid="4c85d0ab-d738-40a4-b0b2-d59986be4091" name="Save Attachments" type="SubSheetInfo"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><narrative>Gets a message attachment and saves it to a given folder.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="795b56fc-9b21-4bfe-9766-bb07f4b1280a" name="End" type="End"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="90" /></stage><stage stageid="1bb24baa-c27d-4ab7-9081-fc6414148434" name="Start" type="Start"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="MessageID" narrative="The ID of the email message." stage="MessageID" /><input type="text" name="Folder" narrative="A Folder in which to save all the attachments." stage="Folder" /></inputs><onsuccess>61363752-629c-4ad8-b3fb-c6de4554c3f9</onsuccess></stage><stage stageid="c0b68cab-c88f-45cd-9b05-9fafa3790fd2" name="MessageID" type="Data"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><display x="90" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="61363752-629c-4ad8-b3fb-c6de4554c3f9" name="Connect POP3" type="SubSheet"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>2f95ac8b-e89b-4ca2-9c6f-877551c2bd64</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="2f95ac8b-e89b-4ca2-9c6f-877551c2bd64" name="Number From ID" type="SubSheet"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="MessageID" expr="[MessageID]" /></inputs><outputs><output type="number" name="Message Number" stage="Message Number" /></outputs><onsuccess>03fcd315-a8c0-4853-ad26-2b4808074ab9</onsuccess><processid>4688b112-6575-4f8a-980c-713566729518</processid></stage><stage stageid="5e21321e-a465-46f7-83f0-8d7e2912c93f" name="Message Number" type="Data"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><display x="90" y="-15" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9c9a7a0d-e77a-4368-b7f9-269d1feadbe2" name="Folder" type="Data"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><display x="165" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="03fcd315-a8c0-4853-ad26-2b4808074ab9" name="Save Attachments" type="Code"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="45" w="90" h="30" /><inputs><input type="number" name="MessageNumber" expr="[Message Number]" /><input type="text" name="Folder" expr="[Folder]" /></inputs><onsuccess>795b56fc-9b21-4bfe-9766-bb07f4b1280a</onsuccess><code><![CDATA[Message m = _rclient.GetMessage((int)MessageNumber);
foreach(MessagePart a in m.FindAllAttachments())
{
	string path=System.IO.Path.Combine(Folder,a.FileName);
    a.Save(new FileInfo(path));
}]]></code></stage><stage stageid="fb9ba538-acf2-42b4-879b-a26cc69aa7e9" name="Attachments" type="Collection"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-195" y="60" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Path" type="text" description="The path to a file to include as an attachment in the email." /></collectioninfo></stage><stage stageid="c57bad69-0560-4732-b2cd-ecdac5946b2b" name="MessageIDs" type="Collection"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="105" y="-105" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Subject" type="text" description="The subject of the email." /><field name="From Name" type="text" description="The name of the sender." /><field name="From Address" type="text" description="The email address of the sender." /><field name="Date Sent" type="datetime" description="The date and time at which the email was sent." /><field name="MessageID" type="text" description="The ID of the email message." /></collectioninfo></stage><stage stageid="8e55392e-ae1e-443f-9d5b-37fbeb948c47" name="Configured" type="Decision"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><loginhibit /><display x="-45" y="-90" /><decision expression="[Configured]" /><ontrue>a212d081-53fb-4398-bda0-462ce18c07c2</ontrue><onfalse>7b2c9cad-ad8c-4892-8a7e-a77fceda0298</onfalse></stage><stage stageid="7b2c9cad-ad8c-4892-8a7e-a77fceda0298" name="FAIL" type="Exception"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="30" y="-90" w="30" h="30" /><exception type="ConfigurationException" detail="&quot;Cannot connect to Server you must use Configure first&quot; " /></stage><stage stageid="8166f9b5-deea-4781-8584-e8777525856c" name="BodyIsHTML" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-210" y="105" w="90" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="106bc5d9-ced2-4091-a8b6-05f0774acd71" name="HTMLPreferred" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="-60" y="-105" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f085c445-853e-460a-b673-4b230f5cc2bb" name="Content-Type" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="165" y="75" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="51e0035f-9692-4335-93bd-e591a4a19ffb" name="Note2" type="Note"><narrative>‘The MIT License’

© 2020 Blue Prism Limited

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
</narrative><display x="225" y="-15" w="300" h="270" /><font family="Segoe UI" size="10" style="Regular" color="0000FF" /></stage></process></object>
        <object id="3feba356-3bae-4dbb-a887-cae9b90a7922" name="GPM - DasTelefonbuch.de" xmlns="http://www.blueprism.co.uk/product/process"><process name="GPM - DasTelefonbuch.de" version="1.0" bpversion="6.10.1.35171" narrative="" byrefcollection="true" type="object" runmode="Exclusive"><appdef><element name="GPM - DasTelefonbuch.de"><id>bd67d54d-0836-470c-af41-9d802204a5ac</id><element name="Startseite"><id>2be2e083-ce19-48f3-a002-7b6f0563770b</id><element name="Branche"><id>56ac67db-ef24-477e-8e1f-590b1465e80a</id><type>WebTextEdit</type><basetype>WebTextEdit</basetype><datatype>text</datatype><diagnose>False</diagnose><description>Suchfeld Firma/Person</description><attributes><attribute name="wX"><ProcessValue datatype="number" value="26" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="298" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="385" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="53" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="385" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="53" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="385" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="53" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="385" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="53" /></attribute><attribute name="wId" inuse="True"><ProcessValue datatype="text" value="form_kw" /></attribute><attribute name="wName" inuse="True"><ProcessValue datatype="text" value="kw" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="INPUT" /></attribute><attribute name="wXPath" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[1]/MAIN[1]/SECTION[1]/FORM[1]/DIV[1]/SPAN[1]/INPUT[1]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress" inuse="True"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="tt-input" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;0&quot;:&quot;position&quot;,&quot;1&quot;:&quot;vertical-align&quot;,&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;relative&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="text" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="Firma/Person" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="PLZ"><id>e66ff2bd-b845-4a01-9e75-301a3da65d32</id><type>WebTextEdit</type><basetype>WebTextEdit</basetype><datatype>text</datatype><diagnose>False</diagnose><description>Suchfeld Ort/Plz</description><attributes><attribute name="wX"><ProcessValue datatype="number" value="721" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="298" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="499" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="53" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="499" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="53" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="500" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="53" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="499" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="53" /></attribute><attribute name="wId" inuse="True"><ProcessValue datatype="text" value="form_ci" /></attribute><attribute name="wName" inuse="True"><ProcessValue datatype="text" value="ci" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="INPUT" /></attribute><attribute name="wXPath" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[1]/MAIN[1]/SECTION[1]/FORM[1]/DIV[2]/SPAN[1]/INPUT[1]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress" inuse="True"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="tt-input" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;0&quot;:&quot;position&quot;,&quot;1&quot;:&quot;vertical-align&quot;,&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;relative&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="text" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="Wo" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="Finden"><id>761eec95-c4de-405f-921b-9ad254db1838</id><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><description>Bestätigen der Suche</description><attributes><attribute name="wX"><ProcessValue datatype="number" value="797" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="293" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="120" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="63" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="120" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="63" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="797" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="293" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="120" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="63" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="120" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="63" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="BUTTON" /></attribute><attribute name="wXPath" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[1]/MAIN[1]/SECTION[1]/FORM[1]/BUTTON[1]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress" inuse="True"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="submit" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="FINDEN" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><type>Window</type><basetype>Window</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="WindowText" inuse="True"><ProcessValue datatype="text" value="Chrome Legacy Window" /></attribute><attribute name="ClassName" inuse="True"><ProcessValue datatype="text" value="Chrome_RenderWidgetHostHWND" /></attribute><attribute name="CtrlID"><ProcessValue datatype="number" value="0" /></attribute><attribute name="X"><ProcessValue datatype="number" value="0" /></attribute><attribute name="Y"><ProcessValue datatype="number" value="79" /></attribute><attribute name="Width"><ProcessValue datatype="number" value="1921" /></attribute><attribute name="Height"><ProcessValue datatype="number" value="970" /></attribute><attribute name="Visible" inuse="True"><ProcessValue datatype="flag" value="True" /></attribute><attribute name="ScreenVisible" inuse="True"><ProcessValue datatype="flag" value="True" /></attribute><attribute name="Enabled" inuse="True"><ProcessValue datatype="flag" value="True" /></attribute><attribute name="Active"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="Ordinal"><ProcessValue datatype="number" value="1" /></attribute><attribute name="ChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="AncestorsText"><ProcessValue datatype="text" value="Das Telefonbuch &gt;&gt; Mehr als Adressen und Telefonnummern! - Google Chrome &lt;UNKNOWN&gt; " /></attribute><attribute name="AncestorCount"><ProcessValue datatype="number" value="2" /></attribute><attribute name="TypeName"><ProcessValue datatype="text" value="" /></attribute><attribute name="ScreenBounds"><ProcessValue datatype="text" value="RECT:6,-1009,-40,1926" /></attribute><attribute name="Style"><ProcessValue datatype="number" value="1445986304" /></attribute><attribute name="pWindowText"><ProcessValue datatype="text" value="Das Telefonbuch &gt;&gt; Mehr als Adressen und Telefonnummern! - Google Chrome" /></attribute><attribute name="pClassName"><ProcessValue datatype="text" value="Chrome_WidgetWin_1" /></attribute><attribute name="pCtrlID"><ProcessValue datatype="number" value="0" /></attribute><attribute name="pX"><ProcessValue datatype="number" value="-2" /></attribute><attribute name="pY"><ProcessValue datatype="number" value="-1088" /></attribute><attribute name="pWidth"><ProcessValue datatype="number" value="1937" /></attribute><attribute name="pHeight"><ProcessValue datatype="number" value="1057" /></attribute><attribute name="pVisible"><ProcessValue datatype="flag" value="True" /></attribute><attribute name="pScreenVisible"><ProcessValue datatype="flag" value="True" /></attribute><attribute name="pEnabled"><ProcessValue datatype="flag" value="True" /></attribute><attribute name="pActive"><ProcessValue datatype="flag" value="True" /></attribute><attribute name="pOrdinal"><ProcessValue datatype="number" value="2" /></attribute><attribute name="pChildCount"><ProcessValue datatype="number" value="2" /></attribute><attribute name="pStyle"><ProcessValue datatype="number" value="1445986304" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute><attribute name="MatchReverse"><ProcessValue datatype="flag" value="True" /></attribute></attributes></element><element name="Results"><id>89aec379-39c1-484f-a3a0-8a1294252bd3</id><element name="Entry"><id>45676594-a422-415e-b049-53a2ef92058f</id><element name="Name"><id>25e99127-bff8-42fa-ac05-23e38b8f9e76</id><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="293" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="312" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="392" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="23" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="279" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="312" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="392" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="23" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="SPAN" /></attribute><attribute name="wXPath" comparisontype="dynamic" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[2]/DIV[2]/DIV[3]/DIV[3]/DIV[1]/DIV[1]/A[1]/SPAN[1]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Branchen/Friseur/Leipzig?s=eyJwYyI6IjA0MzE4In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="-1" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="Ann Haarstudio Damen- und Herrenfriseur" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="Street"><id>d2320397-ad65-448b-a721-d60bcafbbd6a</id><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="37" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="339" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="107" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="16" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="37" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="339" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="107" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="16" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wElementType"><ProcessValue datatype="text" value="SPAN" /></attribute><attribute name="wXPath" comparisontype="dynamic" inuse="True"><ProcessValue datatype="text" value="//DIV[@id=&quot;entry_4&quot;]//*/SPAN[@itemprop=&quot;streetAddress&quot;]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Branchen/Friseur/Leipzig?s=eyJwYyI6IjA0MzE4In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="-1" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="Plaußiger Str. 23" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="PLZ"><id>88fcc0b4-e3bf-44a8-beac-d280f9442ec1</id><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="152" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="339" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="44" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="16" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="152" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="339" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="44" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="16" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="SPAN" /></attribute><attribute name="wXPath" comparisontype="dynamic" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[2]/DIV[2]/DIV[3]/DIV[3]/DIV[1]/DIV[2]/DIV[1]/ADDRESS[1]/A[1]/SPAN[2]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Branchen/Friseur/Leipzig?s=eyJwYyI6IjA0MzE4In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="-1" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="04318 " /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="Ort"><id>a5d8e321-fbd8-4230-b442-d9f5506e3b95</id><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="196" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="339" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="45" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="16" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="196" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="339" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="46" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="16" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="SPAN" /></attribute><attribute name="wXPath" comparisontype="dynamic" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[2]/DIV[2]/DIV[3]/DIV[3]/DIV[1]/DIV[2]/DIV[1]/ADDRESS[1]/A[1]/SPAN[3]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Branchen/Friseur/Leipzig?s=eyJwYyI6IjA0MzE4In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="-1" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="Leipzig" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="Stadtteil"><id>37a83eea-9f04-4f55-befe-cd615d746587</id><type>WebLink</type><basetype>WebLink</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="37" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="497" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="309" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="16" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="36" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="5529" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="309" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="16" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="A" /></attribute><attribute name="wXPath" comparisontype="dynamic" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[2]/DIV[3]/DIV[3]/DIV[3]/DIV[8]/DIV[5]/DIV[3]/DIV[1]/ADDRESS[1]/A[1]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Suche/Zahn%C3%A4rzte/Leipzig?s=eyJwYyI6IjA0MTA5In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="addr" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="3" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;additiveSymbols&quot;:&quot;&quot;,&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fallback&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;negative&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;pad&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;prefix&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;range&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;speakAs&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;suffix&quot;:&quot;&quot;,&quot;symbols&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;system&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="Schongauerstr. 29-31, 04328 Leipzig, Paunsdorf" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="#" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="279" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="543" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="1276" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="222" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="1274" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="220" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="263" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="543" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="1276" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="222" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="1274" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="236" /></attribute><attribute name="wId"><ProcessValue datatype="text" value="entry_2" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="DIV" /></attribute><attribute name="wXPath" comparisontype="dynamic" inuse="True"><ProcessValue datatype="text" value="//div[@id=&quot;entry_3&quot;]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Branchen/Friseur/Leipzig?s=eyJwYyI6IjA0MzE4In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="entry hitlistitem clearfix big wideslogan  " /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="7" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="-1" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="Friseurstübchen Hermann Inh. Cornelia Böhland&#xA;Tulpenweg 1, 04318 Leipzig, Sellerhausen-Stünz&#xA;JETZT BEWERTEN!&#xA;Tel. 0341 2 33 14 51&#xA;Haarstyling, Kämme, Friseurprodukte&#xA;KONTAKTIEREN&#xA;Branche: Friseure" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="Total Results"><id>26233483-b6c4-496b-928b-7ab64c6194f5</id><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="515" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="235" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="51" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="27" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="51" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="27" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="447" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="5" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="51" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="27" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="51" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="27" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="SPAN" /></attribute><attribute name="wXPath" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[2]/DIV[1]/DIV[1]/DIV[2]/UL[1]/LI[2]/SPAN[1]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Branchen/Friseur/Leipzig?s=eyJwYyI6IjA0MzE4In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="-1" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="4 Treffer" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="Footer"><id>cbda4d43-d983-4dc3-a908-ca06e021078c</id><type>WebMenu</type><basetype>WebMenu</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="58" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="530" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="788" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="59" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="788" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="59" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="1859" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="788" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="59" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="788" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="59" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="NAV" /></attribute><attribute name="wXPath" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[2]/NAV[1]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Branchen/Friseure/Leipzig?s=eyJwYyI6IjA0MzE4In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="breadcrumb" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="2" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="-1" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="Sie befinden sich hier: &#xA;Telefonbuch&#xA; Branchen&#xA; Leipzig&#xA; Friseure" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="Weitere Treffer Button"><id>f384e351-f1ed-4ce1-b22d-d7ce7a26787d</id><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="301" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="464" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="302" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="36" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="300" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="34" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="243" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="9282" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="302" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="36" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="300" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="34" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="BUTTON" /></attribute><attribute name="wXPath" inuse="True"><ProcessValue datatype="text" value="//DIV[@class=&quot;loadbutton&quot;]/BUTTON" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Suche/Friseure/Leipzig" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="btn" /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="257 WEITERE TREFFER ANZEIGEN" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><element name="Keine Treffer Nachricht"><id>725a2b6d-77bb-463d-a91b-7a701b698af9</id><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="26" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="291" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="748" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="82" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="746" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="80" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="20" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="15" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="748" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="82" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="746" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="80" /></attribute><attribute name="wId"><ProcessValue datatype="text" value="msg0" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="DIV" /></attribute><attribute name="wXPath" inuse="True"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[2]/DIV[2]/DIV[3]/DIV[1]/DIV[2]/DIV[1]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Suche/Maler%20Lackierer/Leipzig?s=eyJwYyI6IjA0MzE4In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="msg-caution " /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="2" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;additiveSymbols&quot;:&quot;&quot;,&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fallback&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;negative&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;pad&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;prefix&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;range&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;speakAs&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;suffix&quot;:&quot;&quot;,&quot;symbols&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;system&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="-1" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey" inuse="True"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText" inuse="True"><ProcessValue datatype="text" value="Hinweis:&#xA;Wir konnten zu Ihrer Eingabe keine Einträge finden, daher wurde Ihre Suche geändert." /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><type>WebElement</type><basetype>WebElement</basetype><datatype>text</datatype><diagnose>False</diagnose><attributes><attribute name="wX"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wY"><ProcessValue datatype="number" value="276" /></attribute><attribute name="wWidth"><ProcessValue datatype="number" value="788" /></attribute><attribute name="wHeight"><ProcessValue datatype="number" value="1313" /></attribute><attribute name="wClientX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wClientWidth"><ProcessValue datatype="number" value="788" /></attribute><attribute name="wClientHeight"><ProcessValue datatype="number" value="1313" /></attribute><attribute name="wOffsetX"><ProcessValue datatype="number" value="1" /></attribute><attribute name="wOffsetY"><ProcessValue datatype="number" value="276" /></attribute><attribute name="wOffsetWidth"><ProcessValue datatype="number" value="788" /></attribute><attribute name="wOffsetHeight"><ProcessValue datatype="number" value="1313" /></attribute><attribute name="wScrollX"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollY"><ProcessValue datatype="number" value="0" /></attribute><attribute name="wScrollWidth"><ProcessValue datatype="number" value="788" /></attribute><attribute name="wScrollHeight"><ProcessValue datatype="number" value="1329" /></attribute><attribute name="wId" inuse="True"><ProcessValue datatype="text" value="entrycontainer" /></attribute><attribute name="wElementType" inuse="True"><ProcessValue datatype="text" value="DIV" /></attribute><attribute name="wXPath"><ProcessValue datatype="text" value="/HTML[1]/BODY[1]/DIV[2]/DIV[2]/DIV[2]/DIV[3]" /></attribute><attribute name="wCssSelector"><ProcessValue datatype="text" value="" /></attribute><attribute name="wValue"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPageAddress"><ProcessValue datatype="text" value="https://www.dastelefonbuch.de/Branchen/Friseur/Leipzig?s=eyJwYyI6IjA0MzE4In0" /></attribute><attribute name="wClass"><ProcessValue datatype="text" value="entrycontainer clearfix " /></attribute><attribute name="wChildCount"><ProcessValue datatype="number" value="9" /></attribute><attribute name="wIsEditable"><ProcessValue datatype="flag" value="False" /></attribute><attribute name="wStyle"><ProcessValue datatype="text" value="{&quot;alignContent&quot;:&quot;&quot;,&quot;alignItems&quot;:&quot;&quot;,&quot;alignSelf&quot;:&quot;&quot;,&quot;alignmentBaseline&quot;:&quot;&quot;,&quot;all&quot;:&quot;&quot;,&quot;animation&quot;:&quot;&quot;,&quot;animationDelay&quot;:&quot;&quot;,&quot;animationDirection&quot;:&quot;&quot;,&quot;animationDuration&quot;:&quot;&quot;,&quot;animationFillMode&quot;:&quot;&quot;,&quot;animationIterationCount&quot;:&quot;&quot;,&quot;animationName&quot;:&quot;&quot;,&quot;animationPlayState&quot;:&quot;&quot;,&quot;animationTimingFunction&quot;:&quot;&quot;,&quot;appearance&quot;:&quot;&quot;,&quot;ascentOverride&quot;:&quot;&quot;,&quot;aspectRatio&quot;:&quot;&quot;,&quot;backdropFilter&quot;:&quot;&quot;,&quot;backfaceVisibility&quot;:&quot;&quot;,&quot;background&quot;:&quot;&quot;,&quot;backgroundAttachment&quot;:&quot;&quot;,&quot;backgroundBlendMode&quot;:&quot;&quot;,&quot;backgroundClip&quot;:&quot;&quot;,&quot;backgroundColor&quot;:&quot;&quot;,&quot;backgroundImage&quot;:&quot;&quot;,&quot;backgroundOrigin&quot;:&quot;&quot;,&quot;backgroundPosition&quot;:&quot;&quot;,&quot;backgroundPositionX&quot;:&quot;&quot;,&quot;backgroundPositionY&quot;:&quot;&quot;,&quot;backgroundRepeat&quot;:&quot;&quot;,&quot;backgroundRepeatX&quot;:&quot;&quot;,&quot;backgroundRepeatY&quot;:&quot;&quot;,&quot;backgroundSize&quot;:&quot;&quot;,&quot;baselineShift&quot;:&quot;&quot;,&quot;blockSize&quot;:&quot;&quot;,&quot;border&quot;:&quot;&quot;,&quot;borderBlock&quot;:&quot;&quot;,&quot;borderBlockColor&quot;:&quot;&quot;,&quot;borderBlockEnd&quot;:&quot;&quot;,&quot;borderBlockEndColor&quot;:&quot;&quot;,&quot;borderBlockEndStyle&quot;:&quot;&quot;,&quot;borderBlockEndWidth&quot;:&quot;&quot;,&quot;borderBlockStart&quot;:&quot;&quot;,&quot;borderBlockStartColor&quot;:&quot;&quot;,&quot;borderBlockStartStyle&quot;:&quot;&quot;,&quot;borderBlockStartWidth&quot;:&quot;&quot;,&quot;borderBlockStyle&quot;:&quot;&quot;,&quot;borderBlockWidth&quot;:&quot;&quot;,&quot;borderBottom&quot;:&quot;&quot;,&quot;borderBottomColor&quot;:&quot;&quot;,&quot;borderBottomLeftRadius&quot;:&quot;&quot;,&quot;borderBottomRightRadius&quot;:&quot;&quot;,&quot;borderBottomStyle&quot;:&quot;&quot;,&quot;borderBottomWidth&quot;:&quot;&quot;,&quot;borderCollapse&quot;:&quot;&quot;,&quot;borderColor&quot;:&quot;&quot;,&quot;borderEndEndRadius&quot;:&quot;&quot;,&quot;borderEndStartRadius&quot;:&quot;&quot;,&quot;borderImage&quot;:&quot;&quot;,&quot;borderImageOutset&quot;:&quot;&quot;,&quot;borderImageRepeat&quot;:&quot;&quot;,&quot;borderImageSlice&quot;:&quot;&quot;,&quot;borderImageSource&quot;:&quot;&quot;,&quot;borderImageWidth&quot;:&quot;&quot;,&quot;borderInline&quot;:&quot;&quot;,&quot;borderInlineColor&quot;:&quot;&quot;,&quot;borderInlineEnd&quot;:&quot;&quot;,&quot;borderInlineEndColor&quot;:&quot;&quot;,&quot;borderInlineEndStyle&quot;:&quot;&quot;,&quot;borderInlineEndWidth&quot;:&quot;&quot;,&quot;borderInlineStart&quot;:&quot;&quot;,&quot;borderInlineStartColor&quot;:&quot;&quot;,&quot;borderInlineStartStyle&quot;:&quot;&quot;,&quot;borderInlineStartWidth&quot;:&quot;&quot;,&quot;borderInlineStyle&quot;:&quot;&quot;,&quot;borderInlineWidth&quot;:&quot;&quot;,&quot;borderLeft&quot;:&quot;&quot;,&quot;borderLeftColor&quot;:&quot;&quot;,&quot;borderLeftStyle&quot;:&quot;&quot;,&quot;borderLeftWidth&quot;:&quot;&quot;,&quot;borderRadius&quot;:&quot;&quot;,&quot;borderRight&quot;:&quot;&quot;,&quot;borderRightColor&quot;:&quot;&quot;,&quot;borderRightStyle&quot;:&quot;&quot;,&quot;borderRightWidth&quot;:&quot;&quot;,&quot;borderSpacing&quot;:&quot;&quot;,&quot;borderStartEndRadius&quot;:&quot;&quot;,&quot;borderStartStartRadius&quot;:&quot;&quot;,&quot;borderStyle&quot;:&quot;&quot;,&quot;borderTop&quot;:&quot;&quot;,&quot;borderTopColor&quot;:&quot;&quot;,&quot;borderTopLeftRadius&quot;:&quot;&quot;,&quot;borderTopRightRadius&quot;:&quot;&quot;,&quot;borderTopStyle&quot;:&quot;&quot;,&quot;borderTopWidth&quot;:&quot;&quot;,&quot;borderWidth&quot;:&quot;&quot;,&quot;bottom&quot;:&quot;&quot;,&quot;boxShadow&quot;:&quot;&quot;,&quot;boxSizing&quot;:&quot;&quot;,&quot;breakAfter&quot;:&quot;&quot;,&quot;breakBefore&quot;:&quot;&quot;,&quot;breakInside&quot;:&quot;&quot;,&quot;bufferedRendering&quot;:&quot;&quot;,&quot;captionSide&quot;:&quot;&quot;,&quot;caretColor&quot;:&quot;&quot;,&quot;clear&quot;:&quot;&quot;,&quot;clip&quot;:&quot;&quot;,&quot;clipPath&quot;:&quot;&quot;,&quot;clipRule&quot;:&quot;&quot;,&quot;color&quot;:&quot;&quot;,&quot;colorInterpolation&quot;:&quot;&quot;,&quot;colorInterpolationFilters&quot;:&quot;&quot;,&quot;colorRendering&quot;:&quot;&quot;,&quot;colorScheme&quot;:&quot;&quot;,&quot;columnCount&quot;:&quot;&quot;,&quot;columnFill&quot;:&quot;&quot;,&quot;columnGap&quot;:&quot;&quot;,&quot;columnRule&quot;:&quot;&quot;,&quot;columnRuleColor&quot;:&quot;&quot;,&quot;columnRuleStyle&quot;:&quot;&quot;,&quot;columnRuleWidth&quot;:&quot;&quot;,&quot;columnSpan&quot;:&quot;&quot;,&quot;columnWidth&quot;:&quot;&quot;,&quot;columns&quot;:&quot;&quot;,&quot;contain&quot;:&quot;&quot;,&quot;containIntrinsicSize&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;contentVisibility&quot;:&quot;&quot;,&quot;counterIncrement&quot;:&quot;&quot;,&quot;counterReset&quot;:&quot;&quot;,&quot;counterSet&quot;:&quot;&quot;,&quot;cursor&quot;:&quot;&quot;,&quot;cx&quot;:&quot;&quot;,&quot;cy&quot;:&quot;&quot;,&quot;d&quot;:&quot;&quot;,&quot;descentOverride&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;display&quot;:&quot;&quot;,&quot;dominantBaseline&quot;:&quot;&quot;,&quot;emptyCells&quot;:&quot;&quot;,&quot;fill&quot;:&quot;&quot;,&quot;fillOpacity&quot;:&quot;&quot;,&quot;fillRule&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;flex&quot;:&quot;&quot;,&quot;flexBasis&quot;:&quot;&quot;,&quot;flexDirection&quot;:&quot;&quot;,&quot;flexFlow&quot;:&quot;&quot;,&quot;flexGrow&quot;:&quot;&quot;,&quot;flexShrink&quot;:&quot;&quot;,&quot;flexWrap&quot;:&quot;&quot;,&quot;float&quot;:&quot;&quot;,&quot;floodColor&quot;:&quot;&quot;,&quot;floodOpacity&quot;:&quot;&quot;,&quot;font&quot;:&quot;&quot;,&quot;fontDisplay&quot;:&quot;&quot;,&quot;fontFamily&quot;:&quot;&quot;,&quot;fontFeatureSettings&quot;:&quot;&quot;,&quot;fontKerning&quot;:&quot;&quot;,&quot;fontOpticalSizing&quot;:&quot;&quot;,&quot;fontSize&quot;:&quot;&quot;,&quot;fontStretch&quot;:&quot;&quot;,&quot;fontStyle&quot;:&quot;&quot;,&quot;fontVariant&quot;:&quot;&quot;,&quot;fontVariantCaps&quot;:&quot;&quot;,&quot;fontVariantEastAsian&quot;:&quot;&quot;,&quot;fontVariantLigatures&quot;:&quot;&quot;,&quot;fontVariantNumeric&quot;:&quot;&quot;,&quot;fontVariationSettings&quot;:&quot;&quot;,&quot;fontWeight&quot;:&quot;&quot;,&quot;forcedColorAdjust&quot;:&quot;&quot;,&quot;gap&quot;:&quot;&quot;,&quot;grid&quot;:&quot;&quot;,&quot;gridArea&quot;:&quot;&quot;,&quot;gridAutoColumns&quot;:&quot;&quot;,&quot;gridAutoFlow&quot;:&quot;&quot;,&quot;gridAutoRows&quot;:&quot;&quot;,&quot;gridColumn&quot;:&quot;&quot;,&quot;gridColumnEnd&quot;:&quot;&quot;,&quot;gridColumnGap&quot;:&quot;&quot;,&quot;gridColumnStart&quot;:&quot;&quot;,&quot;gridGap&quot;:&quot;&quot;,&quot;gridRow&quot;:&quot;&quot;,&quot;gridRowEnd&quot;:&quot;&quot;,&quot;gridRowGap&quot;:&quot;&quot;,&quot;gridRowStart&quot;:&quot;&quot;,&quot;gridTemplate&quot;:&quot;&quot;,&quot;gridTemplateAreas&quot;:&quot;&quot;,&quot;gridTemplateColumns&quot;:&quot;&quot;,&quot;gridTemplateRows&quot;:&quot;&quot;,&quot;height&quot;:&quot;&quot;,&quot;hyphens&quot;:&quot;&quot;,&quot;imageOrientation&quot;:&quot;&quot;,&quot;imageRendering&quot;:&quot;&quot;,&quot;inherits&quot;:&quot;&quot;,&quot;initialValue&quot;:&quot;&quot;,&quot;inlineSize&quot;:&quot;&quot;,&quot;inset&quot;:&quot;&quot;,&quot;insetBlock&quot;:&quot;&quot;,&quot;insetBlockEnd&quot;:&quot;&quot;,&quot;insetBlockStart&quot;:&quot;&quot;,&quot;insetInline&quot;:&quot;&quot;,&quot;insetInlineEnd&quot;:&quot;&quot;,&quot;insetInlineStart&quot;:&quot;&quot;,&quot;isolation&quot;:&quot;&quot;,&quot;justifyContent&quot;:&quot;&quot;,&quot;justifyItems&quot;:&quot;&quot;,&quot;justifySelf&quot;:&quot;&quot;,&quot;left&quot;:&quot;&quot;,&quot;letterSpacing&quot;:&quot;&quot;,&quot;lightingColor&quot;:&quot;&quot;,&quot;lineBreak&quot;:&quot;&quot;,&quot;lineGapOverride&quot;:&quot;&quot;,&quot;lineHeight&quot;:&quot;&quot;,&quot;listStyle&quot;:&quot;&quot;,&quot;listStyleImage&quot;:&quot;&quot;,&quot;listStylePosition&quot;:&quot;&quot;,&quot;listStyleType&quot;:&quot;&quot;,&quot;margin&quot;:&quot;&quot;,&quot;marginBlock&quot;:&quot;&quot;,&quot;marginBlockEnd&quot;:&quot;&quot;,&quot;marginBlockStart&quot;:&quot;&quot;,&quot;marginBottom&quot;:&quot;&quot;,&quot;marginInline&quot;:&quot;&quot;,&quot;marginInlineEnd&quot;:&quot;&quot;,&quot;marginInlineStart&quot;:&quot;&quot;,&quot;marginLeft&quot;:&quot;&quot;,&quot;marginRight&quot;:&quot;&quot;,&quot;marginTop&quot;:&quot;&quot;,&quot;marker&quot;:&quot;&quot;,&quot;markerEnd&quot;:&quot;&quot;,&quot;markerMid&quot;:&quot;&quot;,&quot;markerStart&quot;:&quot;&quot;,&quot;mask&quot;:&quot;&quot;,&quot;maskType&quot;:&quot;&quot;,&quot;maxBlockSize&quot;:&quot;&quot;,&quot;maxHeight&quot;:&quot;&quot;,&quot;maxInlineSize&quot;:&quot;&quot;,&quot;maxWidth&quot;:&quot;&quot;,&quot;maxZoom&quot;:&quot;&quot;,&quot;minBlockSize&quot;:&quot;&quot;,&quot;minHeight&quot;:&quot;&quot;,&quot;minInlineSize&quot;:&quot;&quot;,&quot;minWidth&quot;:&quot;&quot;,&quot;minZoom&quot;:&quot;&quot;,&quot;mixBlendMode&quot;:&quot;&quot;,&quot;objectFit&quot;:&quot;&quot;,&quot;objectPosition&quot;:&quot;&quot;,&quot;offset&quot;:&quot;&quot;,&quot;offsetDistance&quot;:&quot;&quot;,&quot;offsetPath&quot;:&quot;&quot;,&quot;offsetRotate&quot;:&quot;&quot;,&quot;opacity&quot;:&quot;&quot;,&quot;order&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;&quot;,&quot;orphans&quot;:&quot;&quot;,&quot;outline&quot;:&quot;&quot;,&quot;outlineColor&quot;:&quot;&quot;,&quot;outlineOffset&quot;:&quot;&quot;,&quot;outlineStyle&quot;:&quot;&quot;,&quot;outlineWidth&quot;:&quot;&quot;,&quot;overflow&quot;:&quot;&quot;,&quot;overflowAnchor&quot;:&quot;&quot;,&quot;overflowClipMargin&quot;:&quot;&quot;,&quot;overflowWrap&quot;:&quot;&quot;,&quot;overflowX&quot;:&quot;&quot;,&quot;overflowY&quot;:&quot;&quot;,&quot;overscrollBehavior&quot;:&quot;&quot;,&quot;overscrollBehaviorBlock&quot;:&quot;&quot;,&quot;overscrollBehaviorInline&quot;:&quot;&quot;,&quot;overscrollBehaviorX&quot;:&quot;&quot;,&quot;overscrollBehaviorY&quot;:&quot;&quot;,&quot;padding&quot;:&quot;&quot;,&quot;paddingBlock&quot;:&quot;&quot;,&quot;paddingBlockEnd&quot;:&quot;&quot;,&quot;paddingBlockStart&quot;:&quot;&quot;,&quot;paddingBottom&quot;:&quot;&quot;,&quot;paddingInline&quot;:&quot;&quot;,&quot;paddingInlineEnd&quot;:&quot;&quot;,&quot;paddingInlineStart&quot;:&quot;&quot;,&quot;paddingLeft&quot;:&quot;&quot;,&quot;paddingRight&quot;:&quot;&quot;,&quot;paddingTop&quot;:&quot;&quot;,&quot;page&quot;:&quot;&quot;,&quot;pageBreakAfter&quot;:&quot;&quot;,&quot;pageBreakBefore&quot;:&quot;&quot;,&quot;pageBreakInside&quot;:&quot;&quot;,&quot;pageOrientation&quot;:&quot;&quot;,&quot;paintOrder&quot;:&quot;&quot;,&quot;perspective&quot;:&quot;&quot;,&quot;perspectiveOrigin&quot;:&quot;&quot;,&quot;placeContent&quot;:&quot;&quot;,&quot;placeItems&quot;:&quot;&quot;,&quot;placeSelf&quot;:&quot;&quot;,&quot;pointerEvents&quot;:&quot;&quot;,&quot;position&quot;:&quot;&quot;,&quot;quotes&quot;:&quot;&quot;,&quot;r&quot;:&quot;&quot;,&quot;resize&quot;:&quot;&quot;,&quot;right&quot;:&quot;&quot;,&quot;rowGap&quot;:&quot;&quot;,&quot;rubyPosition&quot;:&quot;&quot;,&quot;rx&quot;:&quot;&quot;,&quot;ry&quot;:&quot;&quot;,&quot;scrollBehavior&quot;:&quot;&quot;,&quot;scrollMargin&quot;:&quot;&quot;,&quot;scrollMarginBlock&quot;:&quot;&quot;,&quot;scrollMarginBlockEnd&quot;:&quot;&quot;,&quot;scrollMarginBlockStart&quot;:&quot;&quot;,&quot;scrollMarginBottom&quot;:&quot;&quot;,&quot;scrollMarginInline&quot;:&quot;&quot;,&quot;scrollMarginInlineEnd&quot;:&quot;&quot;,&quot;scrollMarginInlineStart&quot;:&quot;&quot;,&quot;scrollMarginLeft&quot;:&quot;&quot;,&quot;scrollMarginRight&quot;:&quot;&quot;,&quot;scrollMarginTop&quot;:&quot;&quot;,&quot;scrollPadding&quot;:&quot;&quot;,&quot;scrollPaddingBlock&quot;:&quot;&quot;,&quot;scrollPaddingBlockEnd&quot;:&quot;&quot;,&quot;scrollPaddingBlockStart&quot;:&quot;&quot;,&quot;scrollPaddingBottom&quot;:&quot;&quot;,&quot;scrollPaddingInline&quot;:&quot;&quot;,&quot;scrollPaddingInlineEnd&quot;:&quot;&quot;,&quot;scrollPaddingInlineStart&quot;:&quot;&quot;,&quot;scrollPaddingLeft&quot;:&quot;&quot;,&quot;scrollPaddingRight&quot;:&quot;&quot;,&quot;scrollPaddingTop&quot;:&quot;&quot;,&quot;scrollSnapAlign&quot;:&quot;&quot;,&quot;scrollSnapStop&quot;:&quot;&quot;,&quot;scrollSnapType&quot;:&quot;&quot;,&quot;shapeImageThreshold&quot;:&quot;&quot;,&quot;shapeMargin&quot;:&quot;&quot;,&quot;shapeOutside&quot;:&quot;&quot;,&quot;shapeRendering&quot;:&quot;&quot;,&quot;size&quot;:&quot;&quot;,&quot;speak&quot;:&quot;&quot;,&quot;src&quot;:&quot;&quot;,&quot;stopColor&quot;:&quot;&quot;,&quot;stopOpacity&quot;:&quot;&quot;,&quot;stroke&quot;:&quot;&quot;,&quot;strokeDasharray&quot;:&quot;&quot;,&quot;strokeDashoffset&quot;:&quot;&quot;,&quot;strokeLinecap&quot;:&quot;&quot;,&quot;strokeLinejoin&quot;:&quot;&quot;,&quot;strokeMiterlimit&quot;:&quot;&quot;,&quot;strokeOpacity&quot;:&quot;&quot;,&quot;strokeWidth&quot;:&quot;&quot;,&quot;syntax&quot;:&quot;&quot;,&quot;tabSize&quot;:&quot;&quot;,&quot;tableLayout&quot;:&quot;&quot;,&quot;textAlign&quot;:&quot;&quot;,&quot;textAlignLast&quot;:&quot;&quot;,&quot;textAnchor&quot;:&quot;&quot;,&quot;textCombineUpright&quot;:&quot;&quot;,&quot;textDecoration&quot;:&quot;&quot;,&quot;textDecorationColor&quot;:&quot;&quot;,&quot;textDecorationLine&quot;:&quot;&quot;,&quot;textDecorationSkipInk&quot;:&quot;&quot;,&quot;textDecorationStyle&quot;:&quot;&quot;,&quot;textDecorationThickness&quot;:&quot;&quot;,&quot;textIndent&quot;:&quot;&quot;,&quot;textOrientation&quot;:&quot;&quot;,&quot;textOverflow&quot;:&quot;&quot;,&quot;textRendering&quot;:&quot;&quot;,&quot;textShadow&quot;:&quot;&quot;,&quot;textSizeAdjust&quot;:&quot;&quot;,&quot;textTransform&quot;:&quot;&quot;,&quot;textUnderlineOffset&quot;:&quot;&quot;,&quot;textUnderlinePosition&quot;:&quot;&quot;,&quot;top&quot;:&quot;&quot;,&quot;touchAction&quot;:&quot;&quot;,&quot;transform&quot;:&quot;&quot;,&quot;transformBox&quot;:&quot;&quot;,&quot;transformOrigin&quot;:&quot;&quot;,&quot;transformStyle&quot;:&quot;&quot;,&quot;transition&quot;:&quot;&quot;,&quot;transitionDelay&quot;:&quot;&quot;,&quot;transitionDuration&quot;:&quot;&quot;,&quot;transitionProperty&quot;:&quot;&quot;,&quot;transitionTimingFunction&quot;:&quot;&quot;,&quot;unicodeBidi&quot;:&quot;&quot;,&quot;unicodeRange&quot;:&quot;&quot;,&quot;userSelect&quot;:&quot;&quot;,&quot;userZoom&quot;:&quot;&quot;,&quot;vectorEffect&quot;:&quot;&quot;,&quot;verticalAlign&quot;:&quot;&quot;,&quot;visibility&quot;:&quot;&quot;,&quot;webkitAlignContent&quot;:&quot;&quot;,&quot;webkitAlignItems&quot;:&quot;&quot;,&quot;webkitAlignSelf&quot;:&quot;&quot;,&quot;webkitAnimation&quot;:&quot;&quot;,&quot;webkitAnimationDelay&quot;:&quot;&quot;,&quot;webkitAnimationDirection&quot;:&quot;&quot;,&quot;webkitAnimationDuration&quot;:&quot;&quot;,&quot;webkitAnimationFillMode&quot;:&quot;&quot;,&quot;webkitAnimationIterationCount&quot;:&quot;&quot;,&quot;webkitAnimationName&quot;:&quot;&quot;,&quot;webkitAnimationPlayState&quot;:&quot;&quot;,&quot;webkitAnimationTimingFunction&quot;:&quot;&quot;,&quot;webkitAppRegion&quot;:&quot;&quot;,&quot;webkitAppearance&quot;:&quot;&quot;,&quot;webkitBackfaceVisibility&quot;:&quot;&quot;,&quot;webkitBackgroundClip&quot;:&quot;&quot;,&quot;webkitBackgroundOrigin&quot;:&quot;&quot;,&quot;webkitBackgroundSize&quot;:&quot;&quot;,&quot;webkitBorderAfter&quot;:&quot;&quot;,&quot;webkitBorderAfterColor&quot;:&quot;&quot;,&quot;webkitBorderAfterStyle&quot;:&quot;&quot;,&quot;webkitBorderAfterWidth&quot;:&quot;&quot;,&quot;webkitBorderBefore&quot;:&quot;&quot;,&quot;webkitBorderBeforeColor&quot;:&quot;&quot;,&quot;webkitBorderBeforeStyle&quot;:&quot;&quot;,&quot;webkitBorderBeforeWidth&quot;:&quot;&quot;,&quot;webkitBorderBottomLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderBottomRightRadius&quot;:&quot;&quot;,&quot;webkitBorderEnd&quot;:&quot;&quot;,&quot;webkitBorderEndColor&quot;:&quot;&quot;,&quot;webkitBorderEndStyle&quot;:&quot;&quot;,&quot;webkitBorderEndWidth&quot;:&quot;&quot;,&quot;webkitBorderHorizontalSpacing&quot;:&quot;&quot;,&quot;webkitBorderImage&quot;:&quot;&quot;,&quot;webkitBorderRadius&quot;:&quot;&quot;,&quot;webkitBorderStart&quot;:&quot;&quot;,&quot;webkitBorderStartColor&quot;:&quot;&quot;,&quot;webkitBorderStartStyle&quot;:&quot;&quot;,&quot;webkitBorderStartWidth&quot;:&quot;&quot;,&quot;webkitBorderTopLeftRadius&quot;:&quot;&quot;,&quot;webkitBorderTopRightRadius&quot;:&quot;&quot;,&quot;webkitBorderVerticalSpacing&quot;:&quot;&quot;,&quot;webkitBoxAlign&quot;:&quot;&quot;,&quot;webkitBoxDecorationBreak&quot;:&quot;&quot;,&quot;webkitBoxDirection&quot;:&quot;&quot;,&quot;webkitBoxFlex&quot;:&quot;&quot;,&quot;webkitBoxOrdinalGroup&quot;:&quot;&quot;,&quot;webkitBoxOrient&quot;:&quot;&quot;,&quot;webkitBoxPack&quot;:&quot;&quot;,&quot;webkitBoxReflect&quot;:&quot;&quot;,&quot;webkitBoxShadow&quot;:&quot;&quot;,&quot;webkitBoxSizing&quot;:&quot;&quot;,&quot;webkitClipPath&quot;:&quot;&quot;,&quot;webkitColumnBreakAfter&quot;:&quot;&quot;,&quot;webkitColumnBreakBefore&quot;:&quot;&quot;,&quot;webkitColumnBreakInside&quot;:&quot;&quot;,&quot;webkitColumnCount&quot;:&quot;&quot;,&quot;webkitColumnGap&quot;:&quot;&quot;,&quot;webkitColumnRule&quot;:&quot;&quot;,&quot;webkitColumnRuleColor&quot;:&quot;&quot;,&quot;webkitColumnRuleStyle&quot;:&quot;&quot;,&quot;webkitColumnRuleWidth&quot;:&quot;&quot;,&quot;webkitColumnSpan&quot;:&quot;&quot;,&quot;webkitColumnWidth&quot;:&quot;&quot;,&quot;webkitColumns&quot;:&quot;&quot;,&quot;webkitFilter&quot;:&quot;&quot;,&quot;webkitFlex&quot;:&quot;&quot;,&quot;webkitFlexBasis&quot;:&quot;&quot;,&quot;webkitFlexDirection&quot;:&quot;&quot;,&quot;webkitFlexFlow&quot;:&quot;&quot;,&quot;webkitFlexGrow&quot;:&quot;&quot;,&quot;webkitFlexShrink&quot;:&quot;&quot;,&quot;webkitFlexWrap&quot;:&quot;&quot;,&quot;webkitFontFeatureSettings&quot;:&quot;&quot;,&quot;webkitFontSmoothing&quot;:&quot;&quot;,&quot;webkitHighlight&quot;:&quot;&quot;,&quot;webkitHyphenateCharacter&quot;:&quot;&quot;,&quot;webkitJustifyContent&quot;:&quot;&quot;,&quot;webkitLineBreak&quot;:&quot;&quot;,&quot;webkitLineClamp&quot;:&quot;&quot;,&quot;webkitLocale&quot;:&quot;&quot;,&quot;webkitLogicalHeight&quot;:&quot;&quot;,&quot;webkitLogicalWidth&quot;:&quot;&quot;,&quot;webkitMarginAfter&quot;:&quot;&quot;,&quot;webkitMarginBefore&quot;:&quot;&quot;,&quot;webkitMarginEnd&quot;:&quot;&quot;,&quot;webkitMarginStart&quot;:&quot;&quot;,&quot;webkitMask&quot;:&quot;&quot;,&quot;webkitMaskBoxImage&quot;:&quot;&quot;,&quot;webkitMaskBoxImageOutset&quot;:&quot;&quot;,&quot;webkitMaskBoxImageRepeat&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSlice&quot;:&quot;&quot;,&quot;webkitMaskBoxImageSource&quot;:&quot;&quot;,&quot;webkitMaskBoxImageWidth&quot;:&quot;&quot;,&quot;webkitMaskClip&quot;:&quot;&quot;,&quot;webkitMaskComposite&quot;:&quot;&quot;,&quot;webkitMaskImage&quot;:&quot;&quot;,&quot;webkitMaskOrigin&quot;:&quot;&quot;,&quot;webkitMaskPosition&quot;:&quot;&quot;,&quot;webkitMaskPositionX&quot;:&quot;&quot;,&quot;webkitMaskPositionY&quot;:&quot;&quot;,&quot;webkitMaskRepeat&quot;:&quot;&quot;,&quot;webkitMaskRepeatX&quot;:&quot;&quot;,&quot;webkitMaskRepeatY&quot;:&quot;&quot;,&quot;webkitMaskSize&quot;:&quot;&quot;,&quot;webkitMaxLogicalHeight&quot;:&quot;&quot;,&quot;webkitMaxLogicalWidth&quot;:&quot;&quot;,&quot;webkitMinLogicalHeight&quot;:&quot;&quot;,&quot;webkitMinLogicalWidth&quot;:&quot;&quot;,&quot;webkitOpacity&quot;:&quot;&quot;,&quot;webkitOrder&quot;:&quot;&quot;,&quot;webkitPaddingAfter&quot;:&quot;&quot;,&quot;webkitPaddingBefore&quot;:&quot;&quot;,&quot;webkitPaddingEnd&quot;:&quot;&quot;,&quot;webkitPaddingStart&quot;:&quot;&quot;,&quot;webkitPerspective&quot;:&quot;&quot;,&quot;webkitPerspectiveOrigin&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginX&quot;:&quot;&quot;,&quot;webkitPerspectiveOriginY&quot;:&quot;&quot;,&quot;webkitPrintColorAdjust&quot;:&quot;&quot;,&quot;webkitRtlOrdering&quot;:&quot;&quot;,&quot;webkitRubyPosition&quot;:&quot;&quot;,&quot;webkitShapeImageThreshold&quot;:&quot;&quot;,&quot;webkitShapeMargin&quot;:&quot;&quot;,&quot;webkitShapeOutside&quot;:&quot;&quot;,&quot;webkitTapHighlightColor&quot;:&quot;&quot;,&quot;webkitTextCombine&quot;:&quot;&quot;,&quot;webkitTextDecorationsInEffect&quot;:&quot;&quot;,&quot;webkitTextEmphasis&quot;:&quot;&quot;,&quot;webkitTextEmphasisColor&quot;:&quot;&quot;,&quot;webkitTextEmphasisPosition&quot;:&quot;&quot;,&quot;webkitTextEmphasisStyle&quot;:&quot;&quot;,&quot;webkitTextFillColor&quot;:&quot;&quot;,&quot;webkitTextOrientation&quot;:&quot;&quot;,&quot;webkitTextSecurity&quot;:&quot;&quot;,&quot;webkitTextSizeAdjust&quot;:&quot;&quot;,&quot;webkitTextStroke&quot;:&quot;&quot;,&quot;webkitTextStrokeColor&quot;:&quot;&quot;,&quot;webkitTextStrokeWidth&quot;:&quot;&quot;,&quot;webkitTransform&quot;:&quot;&quot;,&quot;webkitTransformOrigin&quot;:&quot;&quot;,&quot;webkitTransformOriginX&quot;:&quot;&quot;,&quot;webkitTransformOriginY&quot;:&quot;&quot;,&quot;webkitTransformOriginZ&quot;:&quot;&quot;,&quot;webkitTransformStyle&quot;:&quot;&quot;,&quot;webkitTransition&quot;:&quot;&quot;,&quot;webkitTransitionDelay&quot;:&quot;&quot;,&quot;webkitTransitionDuration&quot;:&quot;&quot;,&quot;webkitTransitionProperty&quot;:&quot;&quot;,&quot;webkitTransitionTimingFunction&quot;:&quot;&quot;,&quot;webkitUserDrag&quot;:&quot;&quot;,&quot;webkitUserModify&quot;:&quot;&quot;,&quot;webkitUserSelect&quot;:&quot;&quot;,&quot;webkitWritingMode&quot;:&quot;&quot;,&quot;whiteSpace&quot;:&quot;&quot;,&quot;widows&quot;:&quot;&quot;,&quot;width&quot;:&quot;&quot;,&quot;willChange&quot;:&quot;&quot;,&quot;wordBreak&quot;:&quot;&quot;,&quot;wordSpacing&quot;:&quot;&quot;,&quot;wordWrap&quot;:&quot;&quot;,&quot;writingMode&quot;:&quot;&quot;,&quot;x&quot;:&quot;&quot;,&quot;y&quot;:&quot;&quot;,&quot;zIndex&quot;:&quot;&quot;,&quot;zoom&quot;:&quot;&quot;}" /></attribute><attribute name="wTabIndex"><ProcessValue datatype="number" value="-1" /></attribute><attribute name="wInputType"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAccessKey"><ProcessValue datatype="text" value="" /></attribute><attribute name="wInnerText"><ProcessValue datatype="text" value="Ann Haarstudio Damen- und Herrenfriseur&#xA;Plaußiger Str. 23, 04318 Leipzig, Sellerhausen-Stünz&#xA;JETZT BEWERTEN!&#xA;Tel. 0341 2 32 96 64&#xA;KONTAKTIEREN&#xA;Friseurstübchen Hermann Inh. Cornelia Böhland&#xA;Tulpenweg 1, 04318 Leipzig, Sellerhausen-Stünz&#xA;JETZT BEWERTEN!&#xA;Tel. 0341 2 33 14 51&#xA;Haarstyling, Kämme, Friseurprodukte&#xA;KONTAKTIEREN&#xA;Fehlt hier ein Eintrag?&#xA; Ich möchte ein fehlendes&#xA;Unternehmen eintragen&#xA;Hoffmann Peggy Friseursalon&#xA;Schirmerstr. 3, 04318 Leipzig, Anger-Crottendorf&#xA;JETZT BEWERTEN!&#xA;Tel. 0341 6 88 17 98&#xA;Haarstyling, Kämme, Friseurprodukte&#xA;KONTAKTIEREN TERMIN ANFRAGEN&#xA;Jetzt geschlossen, ab Mo 10:00 offen&#xA;Seibel Simone Friseursalon&#xA;Theodor-Neubauer-Str. 59, 04318 Leipzig, Anger-Crottendorf&#xA;***** (1)&#xA;Tel. 0341 6 89 94 03&#xA;Haarstyling, Kämme, Friseurprodukte&#xA;KONTAKTIEREN" /></attribute><attribute name="wSource"><ProcessValue datatype="text" value="" /></attribute><attribute name="wTargetAddress"><ProcessValue datatype="text" value="" /></attribute><attribute name="wAlt"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPattern"><ProcessValue datatype="text" value="" /></attribute><attribute name="wRel"><ProcessValue datatype="text" value="" /></attribute><attribute name="wLinkTarget"><ProcessValue datatype="text" value="" /></attribute><attribute name="wPlaceholder"><ProcessValue datatype="text" value="" /></attribute><attribute name="MatchIndex"><ProcessValue datatype="number" value="1" /></attribute></attributes></element><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element><apptypeinfo><id>BrowserLaunch</id><parameters><parameter><name>Path</name><value>C:\Program Files\Google\Chrome\Application\chrome.exe</value></parameter><parameter><name>CommandLineParams</name><value>https://www.dastelefonbuch.de/</value></parameter><parameter><name>ProcessMode</name><value>Internal</value></parameter><parameter><name>ExternalProcessTimeout</name><value>0</value></parameter></parameters></apptypeinfo></appdef><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="c5811459-f8d4-4362-8550-4d1744792cb1" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e82be044-1f00-4fd2-a886-5e2923cbb447" type="Normal" published="True"><name>Launch</name><view><camerax>0</camerax><cameray>-21</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="743b6443-5ce7-42c9-85c7-288a63c342aa" type="Normal" published="True"><name>Search</name><view><camerax>13</camerax><cameray>-6</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="9f392239-15b1-4584-898a-dc16e2b907d0" type="Normal" published="False"><name>Attach</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="4a680501-5bfe-44c7-b6b2-2533456d3ccc" type="Normal" published="True"><name>Close</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="82af9e28-79db-442c-8922-0fc8d0782d93" type="Normal" published="False"><name>Crawl Information</name><view><camerax>50</camerax><cameray>16</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="6edacb97-3da9-48c8-8685-bfdcb1ac10d5" type="Normal" published="True"><name>Get Results</name><view><camerax>27</camerax><cameray>73</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="32cd3e0b-8c38-484b-9a8d-cc4896e17627" type="Normal" published="False"><name>Show more</name><view><camerax>0</camerax><cameray>105</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="92b5a7f9-a7a2-4841-a1bd-4190089a267c" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><onsuccess>8cf4a97a-2a65-4b33-9298-3ca914912df7</onsuccess></stage><stage stageid="8cf4a97a-2a65-4b33-9298-3ca914912df7" name="End" type="End"><loginhibit /><display x="15" y="90" /></stage><stage stageid="0d193837-f31d-4327-a240-060a249a1f93" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /><references><reference>System.dll</reference><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Data</import></imports><language>visualbasic</language><globalcode><![CDATA[]]></globalcode><code><![CDATA[]]></code></stage><stage stageid="83d0a3ab-8385-45e9-afe8-b6f5f2d47f27" name="Clean Up" type="SubSheetInfo"><subsheetid>c5811459-f8d4-4362-8550-4d1744792cb1</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="fd357844-8faa-47ff-8b4d-5f7ff0d880ec" name="Start" type="Start"><subsheetid>c5811459-f8d4-4362-8550-4d1744792cb1</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>b0eaf893-5fc7-4aec-9726-2bfc08644983</onsuccess></stage><stage stageid="b0eaf893-5fc7-4aec-9726-2bfc08644983" name="End" type="End"><subsheetid>c5811459-f8d4-4362-8550-4d1744792cb1</subsheetid><loginhibit /><display x="15" y="90" /></stage><stage stageid="d4012f91-4dbb-4fa7-8325-c40e446b1ba6" name="Launch" type="SubSheetInfo"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="c7263d58-6689-4599-804e-4c9a1fe225f1" name="Start" type="Start"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><loginhibit /><display x="15" y="-120" /><onsuccess>1ce4926a-6de1-402c-be87-4267fb97a292</onsuccess></stage><stage stageid="bb47aac5-207d-463d-b59a-88cd32b4c3bd" name="End" type="End"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><loginhibit /><display x="75" y="165" /></stage><stage stageid="8c489e93-96a4-4da8-ac88-1eac0244fda2" name="" type="Note"><subsheetid>c5811459-f8d4-4362-8550-4d1744792cb1</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="1f192a05-f92d-45ce-9e2f-cbec0b0301d1" name="" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="220eb326-aa9c-45f4-8206-0f3dc9d735c2" name="Time Out - Starteseite open?" type="WaitEnd"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><loginhibit /><display x="135" y="105" w="30" h="30" /><onsuccess>7d7b34ac-1fb2-4569-9124-1d1d3a9af70a</onsuccess><groupid>43194dc4-bd43-4e87-beb0-1ff3d45e7176</groupid></stage><stage stageid="2bace989-ccde-438d-a06f-0fa4d050a686" name="Starteseite open?" type="WaitStart"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><loginhibit /><display x="15" y="105" w="30" h="30" /><groupid>43194dc4-bd43-4e87-beb0-1ff3d45e7176</groupid><choices><choice reply="True"><name>Startseite Check Exists</name><distance>60</distance><ontrue>bb47aac5-207d-463d-b59a-88cd32b4c3bd</ontrue><element id="2be2e083-ce19-48f3-a002-7b6f0563770b" /><condition><id>CheckExists</id></condition><comparetype>Equal</comparetype></choice></choices><timeout>2</timeout></stage><stage stageid="7d7b34ac-1fb2-4569-9124-1d1d3a9af70a" name="Exception1" type="Exception"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><display x="210" y="105" /><exception localized="yes" type="System Error" detail="&quot;Page did not load&quot;" /></stage><stage stageid="f73fa8b9-b597-459a-9022-ee0f4760c491" name="Global Throttle" type="Data"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><loginhibit /><display x="-210" y="-30" /><datatype>number</datatype><initialvalue>1.5</initialvalue><alwaysinit /></stage><stage stageid="7fdda659-fe45-45b5-9e7f-ee415c2e00f4" name="Launch in Chrome" type="Navigate"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><loginhibit /><display x="15" y="45" /><onsuccess>2bace989-ccde-438d-a06f-0fa4d050a686</onsuccess><step><element id="bd67d54d-0836-470c-af41-9d802204a5ac" /><action><id>Launch</id><arguments><argument><id>Path</id><value></value></argument><argument><id>CommandLineParams</id><value></value></argument><argument><id>ProcessMode</id><value></value></argument></arguments><outputs><output><id>trackingid</id><value></value></output></outputs></action></step></stage><stage stageid="e24f014e-ef45-4657-aadc-79156e972fb7" name="Time Out2" type="WaitEnd"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><loginhibit /><display x="15" y="-15" w="30" h="30" /><onsuccess>7fdda659-fe45-45b5-9e7f-ee415c2e00f4</onsuccess><groupid>80ebc5d3-1285-49dc-bc5d-6638fc564c30</groupid></stage><stage stageid="1ce4926a-6de1-402c-be87-4267fb97a292" name="Wait2" type="WaitStart"><subsheetid>e82be044-1f00-4fd2-a886-5e2923cbb447</subsheetid><loginhibit /><display x="15" y="-60" w="30" h="30" /><groupid>80ebc5d3-1285-49dc-bc5d-6638fc564c30</groupid><choices /><timeout>[Global Throttle]</timeout></stage><stage stageid="4bd08f04-292d-43ff-a036-71dfb99a3cf0" name="Search" type="SubSheetInfo"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="638e6f6a-85cc-4bcb-aaeb-37a21138c3ca" name="Start" type="Start"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="Branche" narrative="Suchparameter1" stage="Branche" /><input type="text" name="PLZ" narrative="Suchparameter2" stage="PLZ" /></inputs><onsuccess>b279016f-3b70-4bea-b320-cce1427a7b3a</onsuccess></stage><stage stageid="8a94cbb0-98b0-4cdf-b3ca-f022ba5d3234" name="End" type="End"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="75" y="300" /></stage><stage stageid="ec957bd8-afaf-412e-92d7-8610261daadb" name="Time Out - Stratseite exists?" type="WaitEnd"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="135" y="120" w="30" h="30" /><onsuccess>58d3a211-376d-4a36-aa28-d591f0173b96</onsuccess><groupid>76d73f50-8186-43e9-9da6-81cfe4b26ed5</groupid></stage><stage stageid="9151a376-28c4-4625-9a01-3a79969a28b5" name="Stratseite exists?" type="WaitStart"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="15" y="120" w="30" h="30" /><groupid>76d73f50-8186-43e9-9da6-81cfe4b26ed5</groupid><choices><choice reply="True"><name>Startseite Check Exists</name><distance>60</distance><ontrue>d1ce5689-db76-4f31-8658-ee542811f896</ontrue><element id="2be2e083-ce19-48f3-a002-7b6f0563770b" /><condition><id>CheckExists</id></condition><comparetype>Equal</comparetype></choice></choices><timeout>1</timeout></stage><stage stageid="58d3a211-376d-4a36-aa28-d591f0173b96" name="Exception1" type="Exception"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><display x="210" y="120" /><exception localized="yes" type="System Error" detail="&quot;Page did not load&quot;" /></stage><stage stageid="d1ce5689-db76-4f31-8658-ee542811f896" name="Enter query params" type="Write"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="75" y="180" /><onsuccess>94e07d7f-0b11-4dbb-bbe8-210a51376e5e</onsuccess><step expr="[Branche]"><element id="56ac67db-ef24-477e-8e1f-590b1465e80a" /><action><id>WebWrite</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step><step expr="[PLZ]"><element id="e66ff2bd-b845-4a01-9e75-301a3da65d32" /><action><id>WebWrite</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="84cf4a35-61ea-4ed2-9f5e-b1fdafc52932" name="Branche" type="Data"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="-210" y="-15" w="90" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">Fachärzte für Allgemeinmedizin</initialvalue><private /><alwaysinit /></stage><stage stageid="a545999e-5430-4862-9672-d798ab205f77" name="PLZ" type="Data"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="-210" y="30" /><datatype>text</datatype><initialvalue xml:space="preserve">04109</initialvalue><private /><alwaysinit /></stage><stage stageid="94e07d7f-0b11-4dbb-bbe8-210a51376e5e" name="Click &quot;Finden&quot;" type="Navigate" interval="1"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="75" y="240" /><onsuccess>8a94cbb0-98b0-4cdf-b3ca-f022ba5d3234</onsuccess><step><element id="761eec95-c4de-405f-921b-9ad254db1838" /><action><id>WebClick</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="d400de3b-f109-4412-994e-93e5582518ab" name="Crawl Information" type="SubSheetInfo"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="c854c7f8-ca9c-49d3-8c49-a5141bbb747a" name="Start" type="Start"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="15" y="-120" /><inputs><input type="text" name="Branche" narrative="Branche of the company" stage="Branche" /></inputs><onsuccess>34916760-bee1-4e8a-847d-b5f5565b9662</onsuccess></stage><stage stageid="a839fcf0-44ce-4c2b-ac64-f6c7bbaefc88" name="End" type="End"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="240" y="690" /><outputs><output type="text" name="Name" stage="Result.Name" /><output type="text" name="Street" stage="Result.Street" /><output type="text" name="PLZ" stage="Result.PLZ" /><output type="text" name="City" stage="Result.City" /><output type="text" name="Branche" stage="Result.Branche" /></outputs></stage><stage stageid="a2255a21-09ac-44e3-80ec-5b2d3e92ffd2" name="Show more" type="SubSheetInfo"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="862ef2d1-467a-4107-94fd-3d24e715a62b" name="Start" type="Start"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><loginhibit /><display x="15" y="-135" /><onsuccess>98aa740f-0db3-4cd8-a85b-a8f16db38316</onsuccess></stage><stage stageid="53c8b32e-189f-4588-9ae8-4e213197ff5a" name="End" type="End"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><loginhibit /><display x="120" y="270" /></stage><stage stageid="ef15a497-139a-4f46-af49-15b536986585" name="Close" type="SubSheetInfo"><subsheetid>4a680501-5bfe-44c7-b6b2-2533456d3ccc</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="3ee020e2-dc2b-4a1e-b810-4c4f8cfe8245" name="Start" type="Start"><subsheetid>4a680501-5bfe-44c7-b6b2-2533456d3ccc</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>dab85a1f-bf82-4f11-a06e-17b101cd3ad7</onsuccess></stage><stage stageid="e519601f-a1f0-4e5d-8c1d-dc957ac5347d" name="End" type="End"><subsheetid>4a680501-5bfe-44c7-b6b2-2533456d3ccc</subsheetid><loginhibit /><display x="15" y="150" /></stage><stage stageid="5154189d-e695-4979-a7c5-8dbc8e8b9d7c" name="Time Out - Results exist?" type="WaitEnd"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="135" y="-60" w="30" h="30" /><onsuccess>3a22e06f-ae66-4c14-9eab-6c579cbfb517</onsuccess><groupid>5fd6b89c-6696-4ce6-960f-e4801f9e2a96</groupid></stage><stage stageid="34916760-bee1-4e8a-847d-b5f5565b9662" name="Results exist?" type="WaitStart"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="15" y="-60" w="30" h="30" /><groupid>5fd6b89c-6696-4ce6-960f-e4801f9e2a96</groupid><choices><choice reply="True"><name>Results Check Exists</name><distance>60</distance><ontrue>ab7d0e72-4f08-45cb-b0a7-3a3c0facec6a</ontrue><element id="89aec379-39c1-484f-a3a0-8a1294252bd3" /><condition><id>WebCheckExists</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></condition><comparetype>Equal</comparetype></choice></choices><timeout>[Global Throttle]</timeout></stage><stage stageid="3a22e06f-ae66-4c14-9eab-6c579cbfb517" name="System Exeption" type="Exception"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><display x="225" y="-60" /><exception localized="yes" type="System Exception" detail="&quot;No Results could be found&quot;" /></stage><stage stageid="5c9f9cf0-2a98-4206-bbc9-5218360c7bfe" name="Read Company Information" type="Read"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="75" y="120" /><onsuccess>5d410ed1-fe71-42b4-81a3-e72b439f8ed5</onsuccess><step stage="Result.Name"><element id="25e99127-bff8-42fa-ac05-23e38b8f9e76"><elementparameter><name>wXPath</name><expression>"//DIV[@id="&amp;Chr(34)&amp;"entry_"&amp;[Iterator]&amp;Chr(34)&amp;"]//DIV[@class="&amp;Chr(34)&amp;"name"&amp;Chr(34)&amp;"]/*/SPAN[1]"</expression><datatype>text</datatype><comparisontype>Equal</comparisontype></elementparameter></element><action><id>WebGetText</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="eebe5c83-d578-46a1-9601-3ae4a83368d0" name="Result" type="Collection"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="-30" y="105" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Name" type="text" /><field name="Street" type="text" /><field name="City" type="text" /><field name="PLZ" type="text" /><field name="Branche" type="text" /></collectioninfo></stage><stage stageid="ab7d0e72-4f08-45cb-b0a7-3a3c0facec6a" name="Collections::Add Row" type="Action"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit onsuccess="true" /><display x="75" y="0" /><inputs><input type="text" name="Collection Name" friendlyname="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Result&quot;" /></inputs><onsuccess>60c913de-1f59-4082-85c0-a18348acb3f0</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="f6314155-7c97-4b4f-aaf3-d6af74810120" name="Get Results" type="SubSheetInfo"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="db9ff601-84dc-4e38-9fc9-056b5ae1a75d" name="Start" type="Start"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="-45" y="-150" /><inputs><input type="text" name="Branche" narrative="Branche of company" stage="Branche" /></inputs><onsuccess>27637505-a6d9-4f56-8d20-b9c7e43ab3da</onsuccess></stage><stage stageid="b91911b2-fcbc-4c65-8d93-af3c3d224731" name="End" type="End"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="105" y="705" /><outputs><output type="collection" name="ResultSet" stage="Results" /></outputs></stage><stage stageid="ccad0bb5-ce67-4ee3-9536-1594f4f66fec" name="Crawl Information" type="SubSheet"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="105" y="585" /><inputs><input type="text" name="Branche" friendlyname="Branche" narrative="Branche of the company" expr="[Branche]" /></inputs><outputs><output type="text" name="Street" friendlyname="Street" stage="Results.Street" /><output type="text" name="PLZ" friendlyname="PLZ" stage="Results.PLZ" /><output type="text" name="City" friendlyname="City" stage="Results.City" /><output type="text" name="Name" friendlyname="Name" stage="Results.Name" /><output type="text" name="Branche" friendlyname="Branche" stage="Results.Branche" /></outputs><onsuccess>43e378e7-4b2f-4771-bafc-3853ca0cc70f</onsuccess><processid>82af9e28-79db-442c-8922-0fc8d0782d93</processid></stage><stage stageid="9c01bd32-68ad-4fc6-9fa9-850b3d87133c" name="Collections::Add Row" type="Action"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit onsuccess="true" /><display x="105" y="525" /><inputs><input type="text" name="Collection Name" friendlyname="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Results&quot;" /></inputs><onsuccess>ccad0bb5-ce67-4ee3-9536-1594f4f66fec</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="53194a76-b2d9-4a9b-8999-886b6378d136" name="Iterator" type="Data"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="-195" y="30" /><datatype>number</datatype><initialvalue>0</initialvalue><alwaysinit /></stage><stage stageid="efa1b1d6-495d-4c5c-9660-eec029fbf9d0" name="Time Out - Results not 0" type="WaitEnd"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="165" y="75" w="30" h="30" /><onsuccess>8982c73f-5a84-441c-b9d4-fe8183dcee2f</onsuccess><groupid>df6d430f-5543-4def-a445-d66a208a2f61</groupid></stage><stage stageid="6bddaf9a-3123-4448-a939-3606730b323d" name="Results not 0" type="WaitStart"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="-45" y="75" w="30" h="30" /><groupid>df6d430f-5543-4def-a445-d66a208a2f61</groupid><choices><choice reply="True"><name>Total Results Check Exists</name><distance>45</distance><ontrue>ddae6e62-b692-4989-8b7a-6689cf79f44b</ontrue><element id="26233483-b6c4-496b-928b-7ab64c6194f5" /><condition><id>WebCheckExists</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></condition><comparetype>Equal</comparetype></choice></choices><timeout>[Global Throttle]</timeout></stage><stage stageid="313dcc87-4db6-4672-92b5-e29da6911e6c" name="Time Out - Entry exists?" type="WaitEnd"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="150" y="450" w="30" h="30" /><onsuccess>2c9e09e5-21aa-4b5c-b386-dbfced51814f</onsuccess><groupid>c9f9a4a3-2e2f-4d6b-99f2-f8c33f68f7a3</groupid></stage><stage stageid="2ef0d97c-6bdd-4cf2-bc35-49e18c3a6a5e" name="Entry exists?" type="WaitStart"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="60" y="450" w="30" h="30" /><groupid>c9f9a4a3-2e2f-4d6b-99f2-f8c33f68f7a3</groupid><choices><choice reply="True"><name>Entry Check Exists</name><distance>45.6496429</distance><ontrue>9c01bd32-68ad-4fc6-9fa9-850b3d87133c</ontrue><element id="45676594-a422-415e-b049-53a2ef92058f"><elementparameter><name>wXPath</name><expression>"//DIV[@id="&amp;Chr(34)&amp;"entry_"&amp;[Iterator]&amp;Chr(34)&amp;"]"</expression><datatype>text</datatype><comparisontype>Equal</comparisontype></elementparameter></element><condition><id>WebCheckExists</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></condition><comparetype>Equal</comparetype></choice></choices><timeout>5</timeout></stage><stage stageid="2c9e09e5-21aa-4b5c-b386-dbfced51814f" name="System Exception" type="Exception"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><display x="255" y="450" /><exception localized="yes" type="System Exception" detail="&quot;No Entry found&quot;" /></stage><stage stageid="02195291-3b99-4e38-84a7-84d7e4dfe27d" name="Read Total Results" type="Read"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="60" y="210" /><onsuccess>08f4799f-6717-466e-bd90-e8e78ef34e4f</onsuccess><step stage="Value from Total Results"><element id="26233483-b6c4-496b-928b-7ab64c6194f5" /><action><id>WebGetText</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="b7bab948-eb96-4b8e-8d18-05ae2d8a11b3" name="Value from Total Results" type="Data"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><display x="150" y="210" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="08f4799f-6717-466e-bd90-e8e78ef34e4f" name="Split text from total results" type="Action"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit onsuccess="true" /><display x="60" y="270" /><inputs><input type="text" name="Text to Split" friendlyname="Text to Split" narrative="The text to split" expr="[Value from Total Results]" /><input type="text" name="Split Char" friendlyname="Split Char" narrative="The split delimiter" expr="&quot; &quot;" /><input type="text" name="Collection Field Name" friendlyname="Collection Field Name" narrative="The name of the field for the resulting collection" expr="&quot;Value&quot;" /></inputs><outputs><output type="collection" name="Split Values" friendlyname="Split Values" narrative="The resulting collection containing the split values" stage="Split Values" /></outputs><onsuccess>17c830fd-80db-44d7-8f6c-3928960c761a</onsuccess><resource object="Utility - Strings" action="Split Text" /></stage><stage stageid="09dc25d5-a6ac-464c-8c68-464089eaffc1" name="Split Values" type="Collection"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><display x="150" y="270" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="43e378e7-4b2f-4771-bafc-3853ca0cc70f" name="All Results fetched?" type="Decision"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="105" y="645" /><decision expression="[Total] &lt;= [Iterator]" /><ontrue>b91911b2-fcbc-4c65-8d93-af3c3d224731</ontrue><onfalse>6ade6e4c-d9fd-4b37-b1d6-99cd820ad544</onfalse></stage><stage stageid="57851a5c-57b4-4164-b195-63192fbf218d" name="Iterator + 1" type="Calculation"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="60" y="390" /><onsuccess>2ef0d97c-6bdd-4cf2-bc35-49e18c3a6a5e</onsuccess><calculation expression="[Iterator] + 1" stage="Iterator" /></stage><stage stageid="6ade6e4c-d9fd-4b37-b1d6-99cd820ad544" name="Anchor1" type="Anchor"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="360" y="645" w="10" h="10" /><onsuccess>ef9102c3-f81c-45a3-9d0f-892fe2cc5325</onsuccess></stage><stage stageid="61441513-4319-4a44-b846-01ecd8368fd3" name="Anchor2" type="Anchor"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="360" y="390" w="10" h="10" /><onsuccess>57851a5c-57b4-4164-b195-63192fbf218d</onsuccess></stage><stage stageid="17c830fd-80db-44d7-8f6c-3928960c761a" name="Write Total" type="Calculation"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="60" y="330" /><onsuccess>57851a5c-57b4-4164-b195-63192fbf218d</onsuccess><calculation expression="[Split Values.Value]" stage="Total" /></stage><stage stageid="84e261b4-fada-42fc-b852-40807b2d2526" name="Total" type="Data"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="-195" y="-15" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="54bbf2e1-fbd7-4708-b5e2-3024ecb0921b" name="Results" type="Collection"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="-195" y="75" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Name" type="text" /><field name="City" type="text" /><field name="PLZ" type="text" /><field name="Street" type="text" /><field name="Branche" type="text" /></collectioninfo></stage><stage stageid="e080dd06-f7ad-450f-88bf-55a6a97a24b0" name="Time Out - Results Exist?" type="WaitEnd"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><loginhibit /><display x="105" y="-60" w="30" h="30" /><onsuccess>1159a040-5951-42a7-b574-c2bd93a4e36a</onsuccess><groupid>ce11035e-928a-4a15-860f-a6a84cabf134</groupid></stage><stage stageid="98aa740f-0db3-4cd8-a85b-a8f16db38316" name="Results Exist?" type="WaitStart"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><loginhibit /><display x="15" y="-60" w="30" h="30" /><groupid>ce11035e-928a-4a15-860f-a6a84cabf134</groupid><choices><choice reply="True"><name>Results Check Exists</name><distance>45</distance><ontrue>d49dd2a5-1f30-4cac-ac3e-c0074b45658c</ontrue><element id="89aec379-39c1-484f-a3a0-8a1294252bd3" /><condition><id>WebCheckExists</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></condition><comparetype>Equal</comparetype></choice></choices><timeout>[Global Throttle]</timeout></stage><stage stageid="1159a040-5951-42a7-b574-c2bd93a4e36a" name="No Results" type="Exception"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><display x="195" y="-60" /><exception localized="yes" type="System Exception" detail="&quot;No Results exist for scrolling&quot;" /></stage><stage stageid="d49dd2a5-1f30-4cac-ac3e-c0074b45658c" name="Scroll to Footer" type="Navigate" interval="[Global Throttle]"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><loginhibit /><display x="60" y="15" /><onsuccess>6cfa37fa-2051-4032-b609-5e840297cb72</onsuccess><step><element id="cbda4d43-d983-4dc3-a908-ca06e021078c" /><action><id>WebScrollTo</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="ef9102c3-f81c-45a3-9d0f-892fe2cc5325" name="Iterator % 10 ?" type="Decision"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="360" y="525" /><decision expression="[Iterator] - ((RndDn([Iterator]/10))*10) = 0" /><ontrue>d2a3d30b-6b58-49c1-91a5-2fd39e9970b8</ontrue><onfalse>61441513-4319-4a44-b846-01ecd8368fd3</onfalse></stage><stage stageid="d2a3d30b-6b58-49c1-91a5-2fd39e9970b8" name="Scroll more results" type="SubSheet"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="480" y="525" /><onsuccess>7e36f83c-7140-487d-9f59-430ff6583c37</onsuccess><processid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</processid></stage><stage stageid="7e36f83c-7140-487d-9f59-430ff6583c37" name="Anchor3" type="Anchor"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="480" y="390" w="10" h="10" /><onsuccess>61441513-4319-4a44-b846-01ecd8368fd3</onsuccess></stage><stage stageid="d8c3a559-9794-4e01-bb76-e28e0ca1bb2c" name="Time Out - Load more exists?" type="WaitEnd"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><loginhibit /><display x="210" y="105" w="30" h="30" /><onsuccess>1768e219-f354-48d0-8987-61ac8c0674c2</onsuccess><groupid>c0f82f1a-8405-4cd6-a6bf-4c99de6786ac</groupid></stage><stage stageid="6cfa37fa-2051-4032-b609-5e840297cb72" name="Load more exists?" type="WaitStart"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><loginhibit /><display x="60" y="105" w="30" h="30" /><groupid>c0f82f1a-8405-4cd6-a6bf-4c99de6786ac</groupid><choices><choice reply="True"><name>Weitere Treffer Button Check Exists</name><distance>60</distance><ontrue>5c1c903b-2a8d-4c79-a2c9-df30d667b3b1</ontrue><element id="f384e351-f1ed-4ce1-b22d-d7ce7a26787d" /><condition><id>WebCheckExists</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></condition><comparetype>Equal</comparetype></choice></choices><timeout>[Global Throttle]</timeout></stage><stage stageid="5c1c903b-2a8d-4c79-a2c9-df30d667b3b1" name="Click &quot;Weitere Treffer Anzeigen&quot;" type="Navigate" interval="[Global Throttle]"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><loginhibit /><display x="120" y="180" /><onsuccess>53c8b32e-189f-4588-9ae8-4e213197ff5a</onsuccess><step><element id="f384e351-f1ed-4ce1-b22d-d7ce7a26787d" /><action><id>WebClick</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="1768e219-f354-48d0-8987-61ac8c0674c2" name="Anchor4" type="Anchor"><subsheetid>32cd3e0b-8c38-484b-9a8d-cc4896e17627</subsheetid><loginhibit /><display x="210" y="270" w="10" h="10" /><onsuccess>53c8b32e-189f-4588-9ae8-4e213197ff5a</onsuccess></stage><stage stageid="b8afa301-33a2-476b-8e65-065c644ec4b1" name="End (returns empty collection)" type="End"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="390" y="75" /><outputs><output type="collection" name="ResultSet" stage="Results" /></outputs></stage><stage stageid="8982c73f-5a84-441c-b9d4-fe8183dcee2f" name="Collections::Add Row" type="Action"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit onsuccess="true" /><display x="285" y="75" /><inputs><input type="text" name="Collection Name" friendlyname="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Results&quot;" /></inputs><onsuccess>b8afa301-33a2-476b-8e65-065c644ec4b1</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="3923d397-b6c7-4b5c-b246-4056f4a40ba9" name="Note1" type="Note"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><narrative>In case no results are found an empty collection is returned</narrative><display x="495" y="75" w="90" h="120" /></stage><stage stageid="dab85a1f-bf82-4f11-a06e-17b101cd3ad7" name="Terminate" type="Navigate"><subsheetid>4a680501-5bfe-44c7-b6b2-2533456d3ccc</subsheetid><loginhibit /><display x="15" y="30" /><onsuccess>e519601f-a1f0-4e5d-8c1d-dc957ac5347d</onsuccess><step><element id="bd67d54d-0836-470c-af41-9d802204a5ac" /><action><id>WebCloseApplication</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="d514a2ae-0d8b-4b21-ba80-dfc542fb0f51" name="Time Out - No rerouting to differend search" type="WaitEnd"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="165" y="135" w="30" h="30" /><onsuccess>0b2e1ada-acf6-450e-8a28-a1d3b26b25a6</onsuccess><groupid>0ebc4ac3-6f93-4dcd-a234-dd7e9bf142e3</groupid></stage><stage stageid="ddae6e62-b692-4989-8b7a-6689cf79f44b" name="No rerouting to differend search" type="WaitStart"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="0" y="135" w="30" h="30" /><groupid>0ebc4ac3-6f93-4dcd-a234-dd7e9bf142e3</groupid><choices><choice reply="False"><name>Keine Treffer Nachricht Check Exists</name><distance>60</distance><ontrue>02195291-3b99-4e38-84a7-84d7e4dfe27d</ontrue><element id="725a2b6d-77bb-463d-a91b-7a701b698af9" /><condition><id>WebCheckExists</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></condition><comparetype>Equal</comparetype></choice></choices><timeout>[Global Throttle]</timeout></stage><stage stageid="0b2e1ada-acf6-450e-8a28-a1d3b26b25a6" name="Anchor5" type="Anchor"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="285" y="135" w="10" h="10" /><onsuccess>8982c73f-5a84-441c-b9d4-fe8183dcee2f</onsuccess></stage><stage stageid="b391f39c-b9c0-474e-9816-31e4191ffeb8" name="Attach" type="SubSheetInfo"><subsheetid>9f392239-15b1-4584-898a-dc16e2b907d0</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="71ae4147-9885-4879-a25e-e85eef863d9f" name="Start" type="Start"><subsheetid>9f392239-15b1-4584-898a-dc16e2b907d0</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>d8d24c59-4ab4-4ac3-9b8f-db454d1e5aea</onsuccess></stage><stage stageid="9b358747-ef19-45a7-baba-1a4b7e22367f" name="End" type="End"><subsheetid>9f392239-15b1-4584-898a-dc16e2b907d0</subsheetid><loginhibit /><display x="15" y="135" /></stage><stage stageid="d8d24c59-4ab4-4ac3-9b8f-db454d1e5aea" name="Reader1" type="Read"><subsheetid>9f392239-15b1-4584-898a-dc16e2b907d0</subsheetid><loginhibit /><display x="15" y="-45" /><onsuccess>c603222f-9be5-4a2c-a0ae-b89692c2bc3b</onsuccess><step stage="Connected?"><element id="bd67d54d-0836-470c-af41-9d802204a5ac" /><action><id>WebIsConnected</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="17c5b96f-d56f-4d6b-a8b3-8b1471570b61" name="Connected?" type="Data"><subsheetid>9f392239-15b1-4584-898a-dc16e2b907d0</subsheetid><display x="90" y="-45" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c603222f-9be5-4a2c-a0ae-b89692c2bc3b" name="Is Connected?" type="Decision"><subsheetid>9f392239-15b1-4584-898a-dc16e2b907d0</subsheetid><loginhibit /><display x="15" y="15" /><decision expression="[Connected?]" /><ontrue>41e1d43c-0ecf-4f60-8e76-32cdea0f30b3</ontrue><onfalse>7a5b1297-96b4-4b34-b261-4b151d70017b</onfalse></stage><stage stageid="41e1d43c-0ecf-4f60-8e76-32cdea0f30b3" name="Anchor6" type="Anchor"><subsheetid>9f392239-15b1-4584-898a-dc16e2b907d0</subsheetid><loginhibit /><display x="90" y="15" w="10" h="10" /><onsuccess>382bab24-7941-47bd-8365-53f1c36e6b38</onsuccess></stage><stage stageid="382bab24-7941-47bd-8365-53f1c36e6b38" name="Anchor7" type="Anchor"><subsheetid>9f392239-15b1-4584-898a-dc16e2b907d0</subsheetid><loginhibit /><display x="90" y="135" w="10" h="10" /><onsuccess>9b358747-ef19-45a7-baba-1a4b7e22367f</onsuccess></stage><stage stageid="7a5b1297-96b4-4b34-b261-4b151d70017b" name="Navigate1" type="Navigate"><subsheetid>9f392239-15b1-4584-898a-dc16e2b907d0</subsheetid><loginhibit /><display x="15" y="75" /><onsuccess>9b358747-ef19-45a7-baba-1a4b7e22367f</onsuccess><step><element id="bd67d54d-0836-470c-af41-9d802204a5ac" /><action><id>AttachApplication</id><arguments><argument><id>WindowTitlesCollection</id><value></value></argument><argument><id>WindowTitle</id><value></value></argument><argument><id>ProcessName</id><value></value></argument><argument><id>ProcessID</id><value></value></argument><argument><id>Username</id><value></value></argument><argument><id>ChildIndex</id><value>0</value></argument></arguments></action></step></stage><stage stageid="126b92f9-24e5-48d6-b68c-be2ecb7ebf9d" name="Time Out - Throttle" type="WaitEnd"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="15" y="0" w="30" h="30" /><onsuccess>fe1d45e0-f2c3-457c-b94c-d13f8a542612</onsuccess><groupid>f661fc2e-6c41-4716-bcc7-677112bc4d6f</groupid></stage><stage stageid="b279016f-3b70-4bea-b320-cce1427a7b3a" name="Throttle" type="WaitStart"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="15" y="-45" w="30" h="30" /><groupid>f661fc2e-6c41-4716-bcc7-677112bc4d6f</groupid><choices /><timeout>[Global Throttle]</timeout></stage><stage stageid="fe1d45e0-f2c3-457c-b94c-d13f8a542612" name="Attach" type="SubSheet"><subsheetid>743b6443-5ce7-42c9-85c7-288a63c342aa</subsheetid><loginhibit /><display x="15" y="60" /><onsuccess>9151a376-28c4-4625-9a01-3a79969a28b5</onsuccess><processid>9f392239-15b1-4584-898a-dc16e2b907d0</processid></stage><stage stageid="19434a30-8cf6-488d-a3e9-6f5f9b6edee0" name="Attach" type="SubSheet"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="-45" y="15" /><onsuccess>6bddaf9a-3123-4448-a939-3606730b323d</onsuccess><processid>9f392239-15b1-4584-898a-dc16e2b907d0</processid></stage><stage stageid="15ba90e0-47bf-48f5-8049-8ce9b65511f8" name="Time Out - Throttle" type="WaitEnd"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="-45" y="-45" w="30" h="30" /><onsuccess>19434a30-8cf6-488d-a3e9-6f5f9b6edee0</onsuccess><groupid>d610d58f-fe8e-4bc0-9831-353c8abc9b59</groupid></stage><stage stageid="27637505-a6d9-4f56-8d20-b9c7e43ab3da" name="Throttle" type="WaitStart"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><loginhibit /><display x="-45" y="-90" w="30" h="30" /><groupid>d610d58f-fe8e-4bc0-9831-353c8abc9b59</groupid><choices /><timeout>[Global Throttle]</timeout></stage><stage stageid="444f6a87-bed2-465a-b453-4004ffe07345" name="Read City" type="Read"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="240" y="615" /><onsuccess>a839fcf0-44ce-4c2b-ac64-f6c7bbaefc88</onsuccess><step stage="Result.City"><element id="a5d8e321-fbd8-4230-b442-d9f5506e3b95"><elementparameter><name>wXPath</name><expression>"//DIV[@id="&amp;Chr(34)&amp;"entry_"&amp;[Iterator]&amp;Chr(34)&amp;"]//*/SPAN[@itemprop="&amp;Chr(34)&amp;"addressLocality"&amp;Chr(34)&amp;"]"</expression><datatype>text</datatype><comparisontype>Equal</comparisontype></elementparameter></element><action><id>WebGetText</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="0958c7df-ebc4-448f-a288-24edd788144b" name="Time Out - Ort tag exists" type="WaitEnd"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="285" y="540" w="30" h="30" /><onsuccess>cb8fd342-691a-4227-b066-5044543b3271</onsuccess><groupid>2e1d179a-1a95-4b5c-b1b7-2ff67fea322a</groupid></stage><stage stageid="fcfa7efe-98dc-4e0c-8cb0-872f34e0ed15" name="Ort tag exists" type="WaitStart"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="195" y="540" w="30" h="30" /><groupid>2e1d179a-1a95-4b5c-b1b7-2ff67fea322a</groupid><choices><choice reply="True"><name>Ort Check Exists</name><distance>45</distance><ontrue>444f6a87-bed2-465a-b453-4004ffe07345</ontrue><element id="a5d8e321-fbd8-4230-b442-d9f5506e3b95"><elementparameter><name>wXPath</name><expression>"//DIV[@id="&amp;Chr(34)&amp;"entry_"&amp;[Iterator]&amp;Chr(34)&amp;"]//*/SPAN[@itemprop="&amp;Chr(34)&amp;"addressLocality"&amp;Chr(34)&amp;"]"</expression><datatype>text</datatype><comparisontype>Equal</comparisontype></elementparameter></element><condition><id>WebCheckExists</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></condition><comparetype>Equal</comparetype></choice></choices><timeout>5</timeout></stage><stage stageid="cb8fd342-691a-4227-b066-5044543b3271" name="Read Alternative Addr" type="Read"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="420" y="540" /><onsuccess>8847d9cc-a2a4-44d0-bc1e-661faf88699a</onsuccess><step stage="Location"><element id="37a83eea-9f04-4f55-befe-cd615d746587"><elementparameter><name>wXPath</name><expression>"//DIV[@id="&amp;Chr(34)&amp;"entry_"&amp;[Iterator]&amp;Chr(34)&amp;"]//*/A[@class="&amp;Chr(34)&amp;"addr"&amp;Chr(34)&amp;"]"

</expression><datatype>text</datatype><comparisontype>Equal</comparisontype></elementparameter></element><action><id>WebGetText</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="e322d759-8e7a-4999-9a14-584351650be1" name="Location" type="Data"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><display x="495" y="540" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8847d9cc-a2a4-44d0-bc1e-661faf88699a" name="Get Location" type="Action"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit onsuccess="true" /><display x="420" y="615" /><inputs><input type="text" name="Regex Pattern" friendlyname="Regex Pattern" narrative="The regex pattern to apply" expr="[Regex]" /><input type="text" name="Target String" friendlyname="Target String" narrative="The target string to which apply the pattern and extract values" expr="[Location]" /><input type="collection" name="Named Values" friendlyname="Named Values" narrative="A collection of named values to extract from the target string" expr="[Regex Match]" /></inputs><outputs><output type="collection" name="Named Values" friendlyname="Named Values" narrative="Results of the named values extracted from the regex" stage="Regex Match" /></outputs><onsuccess>49dc75b7-5477-47a5-ae8f-833a1d8a2dfd</onsuccess><resource object="Utility - Strings" action="Extract Regex Values" /></stage><stage stageid="24f25163-8833-4938-92d8-ceca3ff13280" name="Regex" type="Data"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="495" y="615" /><datatype>text</datatype><initialvalue xml:space="preserve">,\s(?&lt;location&gt;[a-zA-Z\W]*)$</initialvalue><private /><alwaysinit /></stage><stage stageid="2896a6ce-4b9b-4748-afe9-92e3857aea8f" name="Regex Match" type="Collection"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="570" y="615" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Name" type="text" /><field name="Value" type="text" /></collectioninfo><initialvalue><row><field name="Name" type="text" value="location" /><field name="Value" type="text" value="" /></row></initialvalue></stage><stage stageid="49dc75b7-5477-47a5-ae8f-833a1d8a2dfd" name="Store Match in Result" type="Calculation"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="420" y="690" /><onsuccess>a839fcf0-44ce-4c2b-ac64-f6c7bbaefc88</onsuccess><calculation expression="[Regex Match.Value]" stage="Result.City" /></stage><stage stageid="201bfe3f-6d17-4edb-82e6-ec9fc1389d40" name="Read Street" type="Read"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="195" y="435" /><onsuccess>d5565509-6b50-4516-8bd8-262c6e9cef75</onsuccess><step stage="Result.Street"><element id="d2320397-ad65-448b-a721-d60bcafbbd6a"><elementparameter><name>wXPath</name><expression>"//DIV[@id="&amp;Chr(34)&amp;"entry_"&amp;[Iterator]&amp;Chr(34)&amp;"]//*/SPAN[@itemprop="&amp;Chr(34)&amp;"streetAddress"&amp;Chr(34)&amp;"]"</expression><datatype>text</datatype><comparisontype>Equal</comparisontype></elementparameter></element><action><id>WebGetText</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="4d3a17a8-16a1-41e7-8465-3c4db2fe319b" name="Time Out - Street tag exists" type="WaitEnd"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="255" y="360" w="30" h="30" /><onsuccess>d983a470-76a2-4ddd-8745-37e8a4798066</onsuccess><groupid>4957e2ab-7256-49ed-83e6-60bbceef0f7b</groupid></stage><stage stageid="69535324-62be-48e1-b48b-7bad974d7dd2" name="Street tag exists" type="WaitStart"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="135" y="360" w="30" h="30" /><groupid>4957e2ab-7256-49ed-83e6-60bbceef0f7b</groupid><choices><choice reply="True"><name>Street Check Exists</name><distance>60</distance><ontrue>201bfe3f-6d17-4edb-82e6-ec9fc1389d40</ontrue><element id="d2320397-ad65-448b-a721-d60bcafbbd6a"><elementparameter><name>wXPath</name><expression>"//DIV[@id="&amp;Chr(34)&amp;"entry_"&amp;[Iterator]&amp;Chr(34)&amp;"]//*/SPAN[@itemprop="&amp;Chr(34)&amp;"addressLocality"&amp;Chr(34)&amp;"]"</expression><datatype>text</datatype><comparisontype>Equal</comparisontype></elementparameter></element><condition><id>WebCheckExists</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></condition><comparetype>Equal</comparetype></choice></choices><timeout>5</timeout></stage><stage stageid="d983a470-76a2-4ddd-8745-37e8a4798066" name="Empty String to Result.Street" type="Calculation"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="345" y="360" /><onsuccess>2f1a67ca-10fb-4678-bc84-e98c26183a7f</onsuccess><calculation expression="&quot;&quot;" stage="Result.Street" /></stage><stage stageid="d5565509-6b50-4516-8bd8-262c6e9cef75" name="Anchor8" type="Anchor"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="195" y="480" w="10" h="10" /><onsuccess>fcfa7efe-98dc-4e0c-8cb0-872f34e0ed15</onsuccess></stage><stage stageid="2f1a67ca-10fb-4678-bc84-e98c26183a7f" name="Anchor9" type="Anchor"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="345" y="480" w="10" h="10" /><onsuccess>d5565509-6b50-4516-8bd8-262c6e9cef75</onsuccess></stage><stage stageid="5de8219e-a213-439f-97a2-dbde6e84ce20" name="Time Out - PLZ tag exists?" type="WaitEnd"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="195" y="180" w="30" h="30" /><onsuccess>9e8b8f84-1008-4991-86e2-387ebf049ff7</onsuccess><groupid>34a8b8f0-a57e-4e40-a8c0-7d36f579b447</groupid></stage><stage stageid="5d410ed1-fe71-42b4-81a3-e72b439f8ed5" name="PLZ tag exists?" type="WaitStart"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="75" y="180" w="30" h="30" /><groupid>34a8b8f0-a57e-4e40-a8c0-7d36f579b447</groupid><choices><choice reply="True"><name>PLZ Check Exists</name><distance>60.4669342</distance><ontrue>932270d4-46df-469c-8b7c-fa0ecc6d8797</ontrue><element id="88fcc0b4-e3bf-44a8-beac-d280f9442ec1"><elementparameter><name>wXPath</name><expression>"//DIV[@id="&amp;Chr(34)&amp;"entry_"&amp;[Iterator]&amp;Chr(34)&amp;"]//*/SPAN[@itemprop="&amp;Chr(34)&amp;"postalCode"&amp;Chr(34)&amp;"]"</expression><datatype>text</datatype><comparisontype>Equal</comparisontype></elementparameter></element><condition><id>WebCheckExists</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></condition><comparetype>Equal</comparetype></choice></choices><timeout>5</timeout></stage><stage stageid="932270d4-46df-469c-8b7c-fa0ecc6d8797" name="Read PLZ" type="Read"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="135" y="240" /><onsuccess>48169ab9-10bc-49ad-b457-60fa305fbac8</onsuccess><step stage="Result.PLZ"><element id="88fcc0b4-e3bf-44a8-beac-d280f9442ec1"><elementparameter><name>wXPath</name><expression>"//DIV[@id="&amp;Chr(34)&amp;"entry_"&amp;[Iterator]&amp;Chr(34)&amp;"]//*/SPAN[@itemprop="&amp;Chr(34)&amp;"postalCode"&amp;Chr(34)&amp;"]"</expression><datatype>text</datatype><comparisontype>Equal</comparisontype></elementparameter></element><action><id>WebGetText</id><arguments><argument><id>trackingid</id><value></value></argument></arguments></action></step></stage><stage stageid="9e8b8f84-1008-4991-86e2-387ebf049ff7" name="Empty String into PLZ" type="Calculation"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="285" y="180" /><onsuccess>6fd16fa2-55b0-47f8-8464-83d1938940bb</onsuccess><calculation expression="&quot;&quot;" stage="Result.PLZ" /></stage><stage stageid="6fd16fa2-55b0-47f8-8464-83d1938940bb" name="Anchor10" type="Anchor"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="285" y="300" w="10" h="10" /><onsuccess>48169ab9-10bc-49ad-b457-60fa305fbac8</onsuccess></stage><stage stageid="48169ab9-10bc-49ad-b457-60fa305fbac8" name="Anchor11" type="Anchor"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="135" y="300" w="10" h="10" /><onsuccess>69535324-62be-48e1-b48b-7bad974d7dd2</onsuccess></stage><stage stageid="e894657e-ff36-48b9-b692-eb2bf49786f3" name="Branche" type="Data"><subsheetid>6edacb97-3da9-48c8-8685-bfdcb1ac10d5</subsheetid><display x="30" y="-150" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fa66b02b-6a6f-4c98-89c0-00f1ff2cc78e" name="Branche" type="Data"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><display x="90" y="-120" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="60c913de-1f59-4082-85c0-a18348acb3f0" name="Save Branche into collection" type="Calculation"><subsheetid>82af9e28-79db-442c-8922-0fc8d0782d93</subsheetid><loginhibit /><display x="75" y="60" /><onsuccess>5c9f9cf0-2a98-4206-bbc9-5218360c7bfe</onsuccess><calculation expression="[Branche]" stage="Result.Branche" /></stage></process></object>
        <object id="e559fb86-9b63-4e0b-9399-972227189995" name="MS Word VBO" xmlns="http://www.blueprism.co.uk/product/process"><process name="MS Word VBO" version="6.10.1.35171" bpversion="6.10.1.35171" narrative="The VBO replacement for the Common Automation Word business object" byrefcollection="true" type="object" runmode="Exclusive"><appdef><element name="Application Root"><id>5ec304cd-35d9-4d36-a1e8-9ee22ab08798</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="e283bce6-2b3d-4a05-8d79-05e52588fccd" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="349117e1-607c-4bb6-a911-5074cb58aca0" type="Normal" published="True"><name>Add Table Row</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8ddb9b98-da89-468a-b5a4-5eedf5a204ee" type="Normal" published="True"><name>Set Table Cell Value</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="63dcd298-f559-4625-834f-f728c3391345" type="Normal" published="True"><name>Get Table Cell Value</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ab5706df-5945-47c6-ad85-98b64e6966f8" type="Normal" published="True"><name>Get Highlighted Text</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8e6deaaf-17ce-4784-b335-a9405da05140" type="Normal" published="True"><name>Replace Highlighted Text</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e945fdd1-12ee-49a3-828b-f210f597b9ea" type="Normal" published="True"><name>Select All</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0ad7469f-a55c-48de-9ec9-7b3b429c91b1" type="Normal" published="True"><name>Copy to Clipboard</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e3194549-4702-4196-8e84-02c9414289f2" type="Normal" published="True"><name>Paste from Clipboard</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="479d48e5-45be-4252-99e6-7685eacb95f0" type="Normal" published="True"><name>Clear Clipboard</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a46a3a18-37e6-4658-bf90-5612c2db5da4" type="Normal" published="True"><name>Find Text</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="014a9077-47d7-46c4-949a-9dd622e2aa55" type="Normal" published="True"><name>Select Next Cell</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e5c26c59-2398-4789-8c68-a82d3e675364" type="Normal" published="True"><name>Set Selected Cell Text</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="25894c29-7a40-4c69-8562-7b0ec251e307" type="Normal" published="True"><name>Select Next Field</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0982104d-2763-42e8-a690-69c44d9a4046" type="Normal" published="True"><name>Set Selected Checkbox</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="dc779662-1e7e-4438-b1c5-1106c851c3a3" type="Normal" published="True"><name>Get Footer Text</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="b5d196b4-36af-4e29-991f-b6985b43dce2" type="Normal" published="False"><name>CheckFileExists</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="293ea206-e215-4639-a1d8-85d6fad4c062" type="Normal" published="False"><name>CheckInstanceHandle</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="31f689ac-b51a-4af0-bc24-9a36bedf0b07" type="Normal" published="True"><name>Create Instance</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="fab67da7-2774-4aba-b65c-e3cc6c20dac5" type="Normal" published="True"><name>Attach Instance</name><view><camerax>15</camerax><cameray>-84</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8b161e34-9d3a-4120-a6ef-47fa0d4fb3ae" type="Normal" published="True"><name>Detach Instance</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="89550223-4597-48e5-a1c2-c61c726899cf" type="Normal" published="True"><name>Set Current Instance</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="9ba034bb-3325-48c1-8185-8a95ba3aa7b2" type="Normal" published="True"><name>Open</name><view><camerax>0</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a12d6007-5275-4a01-a53e-1fe566ccb6eb" type="Normal" published="True"><name>Close</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="1e56148e-8eb8-411a-94ac-081b722cf098" type="Normal" published="True"><name>Show</name><view><camerax>0</camerax><cameray>-56</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="2a382c59-0507-47f8-82d5-1ca1ae93d305" type="Normal" published="True"><name>Hide</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d064a183-869e-4269-af78-e8278fcf2a75" type="Normal" published="True"><name>Exit</name><view><camerax>46</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="df9a2d09-7817-4c60-9dfd-db0023481f74" type="Normal" published="True"><name>Create Document</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0034274b-9238-49f1-9208-489c5c1f0440" type="Normal" published="True"><name>Save As</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a54f1cbc-a023-4c2d-bf17-23169a3e685d" type="Normal" published="True"><name>ExportPDF</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="84295aaa-378f-41c0-892b-81b1fa1e43c7" type="Normal" published="True"><name>Get Body</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ec22d5e7-f140-425a-bbaa-7c1da03813c4" type="Normal" published="True"><name>Type Text</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="658b8a32-bfce-4df2-bfdc-a9525bc2979e" type="Normal" published="True"><name>Update Bookmark</name><view><camerax>-142</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="60cba9c8-4c53-48b7-b25a-56d6603faf04" name="Start" type="Start"><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>3fa025dc-32a8-4ab7-b052-cc5cd447a2cf</onsuccess></stage><stage stageid="3fa025dc-32a8-4ab7-b052-cc5cd447a2cf" name="End" type="End"><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7d99e0f7-64a5-47c3-820f-a9c87bcbe9c5" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><references><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Collections.Generic</import><import>Microsoft.VisualBasic</import><import>System.IO</import><import>System.Runtime.InteropServices</import></imports><language>visualbasic</language><globalcode><![CDATA[
]]></globalcode><code><![CDATA[' The 'selected' instance of word.
' This is updated on any access of an instance (either adding a new
' instance or getting one)
'
Private CurrentInstance As Object

' Map of instances keyed against the handles which represent them.
'
Private HandleMap As Dictionary(Of Integer, Object)

' Map of handles keyed against the instances they represent.
' Here to ensure we don't assign multiple handles to a single
' instance and bring about a memory leak
'
Private InstanceMap As Dictionary(Of Object, Integer)

' Constructor - this just initialises the collections which map
' the word instances to handles and vice versa.
Public Sub New()

	Me.HandleMap = New Dictionary(Of Integer, Object)()
	Me.InstanceMap = New Dictionary(Of Object, Integer)()

End Sub

' Gets the handle for a given instance
'
' If the instance is not yet held, then it is added to the 
' 	map and a handle is assigned to it. It is also set as the
' 	'current' instance, accessed with a handle of zero in the
' 	below methods.
'
' Either way, the handle which identifies the instance is returned
'
' @param Instance The instance for which a handle is required
'
' @return The handle of the instance
Protected Function GetHandle(Instance As Object) As Integer

	If Instance Is Nothing Then
		Throw New ArgumentNullException("Tried to add an empty instance")
	End If

	' Check if we already have this instance - if so, return it.
	If InstanceMap.ContainsKey(Instance) Then
		CurrentInstance = Instance
		Return InstanceMap(Instance)
	End If

	Dim key as Integer
	For key = 1 to Integer.MaxValue
		If Not HandleMap.ContainsKey(key)
			HandleMap.Add(key, Instance)
			InstanceMap.Add(Instance, key)
			Me.CurrentInstance = Instance
			Return key
		End If
	Next key

	Return 0

End Function

' Gets the instance corresponding to the given handle, setting
' 	the instance as the 'current' instance for future calls
'
' A value of 0 will provide the 'current' instance, which
' 	is set each time an instance is added or accessed.
'
' This will return Nothing if the given handle does not
' correspond to a registered instance, or if the current
' instance was closed and the reference has not been updated.
'
' @param Handle The handle representing the instance required,
' 		or zero to get the 'current' instance.
Protected Function GetInstance(Handle As Integer) As Object

	Dim Instance As Object = Nothing
	
	If Handle = 0 Then
		If CurrentInstance Is Nothing Then
			' Special case - getting the current instance when the
			' instance is not set, try and get a current open instance.
			' If none there, create a new one and assign a handle as if
			' CreateInstance() had been called
		'	Try
		'		Instance = GetObject(,"Word.Application")
		'	Catch ex as Exception ' Not running
		'		Instance = Nothing
		'	End Try
		'	If Instance Is Nothing Then
				Create_Instance(Handle)
				' Instance = CreateObject("Word.Application")
				' Force the instance into the maps.
				' GetHandle(Instance)
				' CurrentInstance should now be set.
				' If it's not, we have far bigger problems
		'	End If
		End If
		Return CurrentInstance
	End If
	
	If Not HandleMap.ContainsKey(Handle)
            Throw New ArgumentException("A valid attachment to the application cannot been detected. Please check that Blue Prism is attached to an instance of the application.")
	End If

	Instance = HandleMap(Handle)
	If Not Instance Is Nothing Then
		CurrentInstance = Instance
	End If
	Return Instance

End Function

' Gets the document in the given instance with the given name.
'
' @param Handle The handle representing the instance which holds the document
'
' @param Name The name of the document on the instance
'
' @return The object representing the document defined
Protected Function GetDocument(Handle As Integer, Name as String) As Object

	Dim doc as Object = Nothing
	If String.IsNullOrEmpty(Name) Then
		doc = GetInstance(Handle).ActiveDocument
		If doc Is Nothing ' We need to create a deafult workbook
			'doc = NewDocument(Handle)
		End If
		Return doc
	Else
		Return GetInstance(Handle).Documents(Name)
	End If

End Function]]></code></stage><stage stageid="3db4823c-cb33-410c-a5b4-0457287ea928" name="Clean Up" type="SubSheetInfo"><subsheetid>e283bce6-2b3d-4a05-8d79-05e52588fccd</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ffe1c4e5-db7e-48da-b754-89d06195c6f3" name="Start" type="Start"><subsheetid>e283bce6-2b3d-4a05-8d79-05e52588fccd</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>923ee3cf-37bc-426e-829d-e591ad107565</onsuccess></stage><stage stageid="923ee3cf-37bc-426e-829d-e591ad107565" name="End" type="End"><subsheetid>e283bce6-2b3d-4a05-8d79-05e52588fccd</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="87572a90-cbe5-4b41-931c-b4083da0a1bf" name="new" type="Note"><subsheetid>e283bce6-2b3d-4a05-8d79-05e52588fccd</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="339dd02a-a643-42ed-befd-3faa7d5a2759" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1bbb1c14-4990-47fd-8b73-630da57d702f" name="Create Instance" type="SubSheetInfo"><subsheetid>31f689ac-b51a-4af0-bc24-9a36bedf0b07</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="12dfbbd0-3245-4078-ac90-1f65f7f3bb95" name="Start" type="Start"><subsheetid>31f689ac-b51a-4af0-bc24-9a36bedf0b07</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>62dc3626-984b-4c4f-af3c-ade0a9242ff7</onsuccess></stage><stage stageid="699a02c3-30f3-4bdd-aa7d-2afc1110af20" name="End" type="End"><subsheetid>31f689ac-b51a-4af0-bc24-9a36bedf0b07</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="handle" stage="handle" /></outputs></stage><stage stageid="62dc3626-984b-4c4f-af3c-ade0a9242ff7" name="Create Instance" type="Code"><subsheetid>31f689ac-b51a-4af0-bc24-9a36bedf0b07</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="handle" stage="handle" /></outputs><onsuccess>699a02c3-30f3-4bdd-aa7d-2afc1110af20</onsuccess><code><![CDATA[
Dim word as Object = CreateObject("Word.Application")

' Create a GUID with which we can kill the instance later
' if we have to play hardball to get rid of it.
word.Caption = System.Guid.NewGuid().ToString().ToUpper()

handle = GetHandle(word)]]></code></stage><stage stageid="edda7cc0-1a94-49d6-a153-8fc888542e8c" name="handle" type="Data"><subsheetid>31f689ac-b51a-4af0-bc24-9a36bedf0b07</subsheetid><display x="-180" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4b4d7331-72da-406d-82b7-23a7ed9ed828" name="Show" type="SubSheetInfo"><subsheetid>1e56148e-8eb8-411a-94ac-081b722cf098</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a23d8915-ce49-49b8-9796-859046f81b10" name="Start" type="Start"><subsheetid>1e56148e-8eb8-411a-94ac-081b722cf098</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /></inputs><onsuccess>079aa539-1785-4099-82ef-7f679226a6ea</onsuccess></stage><stage stageid="e652822b-b3f6-4d8e-b67b-09f5a3fa03aa" name="End" type="End"><subsheetid>1e56148e-8eb8-411a-94ac-081b722cf098</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="079aa539-1785-4099-82ef-7f679226a6ea" name="CheckInstanceHandle" type="SubSheet"><subsheetid>1e56148e-8eb8-411a-94ac-081b722cf098</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>ae5c5f27-8330-46a8-a3dd-42c521b4acc9</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="ae5c5f27-8330-46a8-a3dd-42c521b4acc9" name="ShowInstance" type="Code"><subsheetid>1e56148e-8eb8-411a-94ac-081b722cf098</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>e652822b-b3f6-4d8e-b67b-09f5a3fa03aa</onsuccess><code><![CDATA[
	GetInstance(handle).Visible = True]]></code></stage><stage stageid="ba182804-017d-4701-bee5-6ce4825d6a92" name="handle" type="Data"><subsheetid>1e56148e-8eb8-411a-94ac-081b722cf098</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="06f9c8b0-d782-4519-91eb-ef08a4ff69f4" name="CheckInstanceHandle" type="SubSheetInfo"><subsheetid>293ea206-e215-4639-a1d8-85d6fad4c062</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="55ae55da-a84e-4e04-89de-dd88ff6265f3" name="Start" type="Start"><subsheetid>293ea206-e215-4639-a1d8-85d6fad4c062</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /></inputs><onsuccess>8380be40-583e-4e38-8bd2-f0d2ca89009c</onsuccess></stage><stage stageid="2b3b42b8-d366-4656-9b94-ab1b48254b80" name="End" type="End"><subsheetid>293ea206-e215-4639-a1d8-85d6fad4c062</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="8380be40-583e-4e38-8bd2-f0d2ca89009c" name="Check Handle" type="Code"><subsheetid>293ea206-e215-4639-a1d8-85d6fad4c062</subsheetid><loginhibit /><display x="15" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><outputs><output type="flag" name="HandleMissing" stage="HandleMissing" /></outputs><onsuccess>f28ac6b7-15d9-45f6-ab3a-54a0da21bbb3</onsuccess><code><![CDATA[
' Just ensure that the handle references a valid instance
HandleMissing = (GetInstance(handle) is Nothing)]]></code></stage><stage stageid="0e84f827-315e-40eb-b54b-12caa5d9fd69" name="handle" type="Data"><subsheetid>293ea206-e215-4639-a1d8-85d6fad4c062</subsheetid><display x="-150" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9f261599-10ff-401e-9119-62c9ac77151b" name="HandleMissing" type="Data"><subsheetid>293ea206-e215-4639-a1d8-85d6fad4c062</subsheetid><display x="-150" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f28ac6b7-15d9-45f6-ab3a-54a0da21bbb3" name="Is Handle Missing?" type="Decision"><subsheetid>293ea206-e215-4639-a1d8-85d6fad4c062</subsheetid><loginhibit /><display x="15" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[HandleMissing]" /><ontrue>6defa143-8947-48ef-935f-d36833614ef5</ontrue><onfalse>2b3b42b8-d366-4656-9b94-ab1b48254b80</onfalse></stage><stage stageid="6defa143-8947-48ef-935f-d36833614ef5" name="Bad Instance Handle" type="Exception"><subsheetid>293ea206-e215-4639-a1d8-85d6fad4c062</subsheetid><display x="180" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Bad Handle" detail="&quot;Handle: &quot; &amp; [handle] &amp; &quot; does not correspond to an Word Instance&quot;" /></stage><stage stageid="1d87bd3a-132a-464c-b2d6-1a4df635cd61" name="Hide" type="SubSheetInfo"><subsheetid>2a382c59-0507-47f8-82d5-1ca1ae93d305</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1e1ba28f-613b-4a07-95bb-ade2a24a01b8" name="Start" type="Start"><subsheetid>2a382c59-0507-47f8-82d5-1ca1ae93d305</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /></inputs><onsuccess>39fb3f6f-2d7b-4840-991b-65f9fd1867a7</onsuccess></stage><stage stageid="b7e598b6-b68b-45da-b57a-2118e5a066ad" name="End" type="End"><subsheetid>2a382c59-0507-47f8-82d5-1ca1ae93d305</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="39fb3f6f-2d7b-4840-991b-65f9fd1867a7" name="CheckInstanceHandle" type="SubSheet"><subsheetid>2a382c59-0507-47f8-82d5-1ca1ae93d305</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>afd1178a-dd11-4a73-8833-2b92063173ef</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="afd1178a-dd11-4a73-8833-2b92063173ef" name="HideInstance" type="Code"><subsheetid>2a382c59-0507-47f8-82d5-1ca1ae93d305</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>b7e598b6-b68b-45da-b57a-2118e5a066ad</onsuccess><code><![CDATA[
	GetInstance(handle).Visible = False]]></code></stage><stage stageid="315416bc-f192-4090-8a30-0fcec83584e2" name="handle" type="Data"><subsheetid>2a382c59-0507-47f8-82d5-1ca1ae93d305</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="ddb83909-8dc6-44dc-af21-d21979561fb9" name="Get Body" type="SubSheetInfo"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><narrative>Gets the body text from the word document</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="150cb5f0-7bfe-4c3c-a660-2d6b49f4684f" name="Start" type="Start"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><loginhibit /><preconditions><condition narrative="The Word VBO is initialised and a Word instance has been created/attached to" /></preconditions><postconditions><condition narrative="The body text required is returned" /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="start" narrative="The start of the text range within the body for which the text is required" stage="start" /><input type="number" name="finish" narrative="The finish of the text range within the body for which the text is required" stage="finish" /><input type="text" name="documentname" narrative="The name of the document for which the body text is required" stage="documentname" /><input type="number" name="handle" narrative="The handle to the Word instance in which the document is open" stage="handle" /></inputs><onsuccess>59561e94-639a-4c08-9a9f-8577d49b3064</onsuccess></stage><stage stageid="6fcd9de3-9aa2-4a55-8909-4c9b3c3b5095" name="End" type="End"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Body" narrative="The text of the main body of the word document" stage="result" /></outputs></stage><stage stageid="59561e94-639a-4c08-9a9f-8577d49b3064" name="CheckInstanceHandle" type="SubSheet"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>50ad6a4d-1b58-4aa1-9a88-0febc63521a1</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="50ad6a4d-1b58-4aa1-9a88-0febc63521a1" name="GetBody" type="Code"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="documentname" expr="[documentname]" /><input type="number" name="start" expr="[start]" /><input type="number" name="finish" expr="[finish]" /></inputs><outputs><output type="text" name="result" stage="result" /></outputs><onsuccess>6fcd9de3-9aa2-4a55-8909-4c9b3c3b5095</onsuccess><code><![CDATA[
	Dim doc as Object = GetDocument(handle,documentname)
	Dim range As Object
	range = doc.Range(start, finish)
   
	result = range.text()]]></code></stage><stage stageid="e6c5db5f-2ee8-4369-9025-e3f9241bc8d4" name="handle" type="Data"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="ad4dcca7-8cd7-47c7-82fb-b83871f144f8" name="Open" type="SubSheetInfo"><subsheetid>9ba034bb-3325-48c1-8185-8a95ba3aa7b2</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0b87086b-2216-4e74-974e-093cdf2d9e09" name="Start" type="Start"><subsheetid>9ba034bb-3325-48c1-8185-8a95ba3aa7b2</subsheetid><loginhibit /><preconditions><condition narrative="" /><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" stage="filename" /><input type="number" name="handle" stage="handle" /></inputs><onsuccess>5fa65cf5-75fe-43d0-92fe-923c8f137803</onsuccess></stage><stage stageid="69723646-ad31-4957-9cc0-43fad959ba95" name="End" type="End"><subsheetid>9ba034bb-3325-48c1-8185-8a95ba3aa7b2</subsheetid><loginhibit /><display x="15" y="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Document Name" stage="documentname" /></outputs></stage><stage stageid="995ac807-707a-4f97-8b15-971f1f0405ac" name="Open Document" type="Code"><subsheetid>9ba034bb-3325-48c1-8185-8a95ba3aa7b2</subsheetid><loginhibit /><display x="15" y="90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="filename" expr="[filename]" /><input type="number" name="handle" expr="[handle]" /></inputs><outputs><output type="text" name="name" stage="documentname" /></outputs><onsuccess>69723646-ad31-4957-9cc0-43fad959ba95</onsuccess><code><![CDATA[
Dim doc as Object = GetInstance(handle).Documents.Open(filename)
name = doc.Name
doc.Activate()]]></code></stage><stage stageid="e6ecf65f-7aed-47de-a567-abf35f57babc" name="handle" type="Data"><subsheetid>9ba034bb-3325-48c1-8185-8a95ba3aa7b2</subsheetid><display x="-210" y="90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="fde6d90a-3cf6-477b-a18b-dc38b1fc1cdd" name="filename" type="Data"><subsheetid>9ba034bb-3325-48c1-8185-8a95ba3aa7b2</subsheetid><display x="-210" y="135" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5fa65cf5-75fe-43d0-92fe-923c8f137803" name="CheckInstanceHandle" type="SubSheet"><subsheetid>9ba034bb-3325-48c1-8185-8a95ba3aa7b2</subsheetid><loginhibit /><display x="15" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>335a3eeb-4d99-496c-a3cd-3fdcb42bc742</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="335a3eeb-4d99-496c-a3cd-3fdcb42bc742" name="CheckFileExists" type="SubSheet"><subsheetid>9ba034bb-3325-48c1-8185-8a95ba3aa7b2</subsheetid><loginhibit /><display x="15" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="filename" expr="[filename]" /></inputs><onsuccess>995ac807-707a-4f97-8b15-971f1f0405ac</onsuccess><processid>b5d196b4-36af-4e29-991f-b6985b43dce2</processid></stage><stage stageid="4cbcba43-cf87-49df-bd28-19033d4f390a" name="documentname" type="Data"><subsheetid>9ba034bb-3325-48c1-8185-8a95ba3aa7b2</subsheetid><loginhibit /><display x="-210" y="180" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fddb571a-d8ae-4d27-9b6c-0975f653eb71" name="CheckFileExists" type="SubSheetInfo"><subsheetid>b5d196b4-36af-4e29-991f-b6985b43dce2</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ea423d51-6b2d-4452-88ad-7a8a645cbae8" name="Start" type="Start"><subsheetid>b5d196b4-36af-4e29-991f-b6985b43dce2</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="filename" stage="filename" /></inputs><onsuccess>8b0d6478-c375-442d-94bb-f7ce884ade8b</onsuccess></stage><stage stageid="8c76538f-0d1d-4285-aab0-5290485b46e3" name="End" type="End"><subsheetid>b5d196b4-36af-4e29-991f-b6985b43dce2</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="bf64d828-0cb5-42c2-89ea-1a3b319f4cc4" name="filename" type="Data"><subsheetid>b5d196b4-36af-4e29-991f-b6985b43dce2</subsheetid><display x="-165" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3880fc08-9be7-4aff-a074-430ccdd3a128" name="fileexists" type="Data"><subsheetid>b5d196b4-36af-4e29-991f-b6985b43dce2</subsheetid><loginhibit /><display x="-165" y="45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="8b0d6478-c375-442d-94bb-f7ce884ade8b" name="File Exists?" type="Code"><subsheetid>b5d196b4-36af-4e29-991f-b6985b43dce2</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="filename" expr="[filename]" /></inputs><outputs><output type="flag" name="fileexists" stage="fileexists" /></outputs><onsuccess>ffe7ae9a-2f99-4074-8efa-307dbb5aeaf3</onsuccess><code><![CDATA[
fileexists = File.Exists(filename)]]></code></stage><stage stageid="ffe7ae9a-2f99-4074-8efa-307dbb5aeaf3" name="Does File Exist?" type="Decision"><subsheetid>b5d196b4-36af-4e29-991f-b6985b43dce2</subsheetid><loginhibit /><display x="15" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[fileexists]" /><ontrue>8c76538f-0d1d-4285-aab0-5290485b46e3</ontrue><onfalse>29baa624-0519-491a-9b7f-e9cd67715da0</onfalse></stage><stage stageid="29baa624-0519-491a-9b7f-e9cd67715da0" name="File Not Found" type="Exception"><subsheetid>b5d196b4-36af-4e29-991f-b6985b43dce2</subsheetid><display x="165" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="File Not Found" detail="&quot;File: &quot; &amp; [filename] &amp; &quot; does not exist or is not a file&quot;" /></stage><stage stageid="e1e7b560-c537-488d-8391-c097150f5969" name="documentname" type="Data"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><display x="-210" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c8466ca5-e4a8-4941-aa52-bb84a5bf4d87" name="result" type="Data"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><display x="-180" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9a9b30de-289c-4da8-9fbf-324b8bb8cdf8" name="start" type="Data"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><display x="-90" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ec2b207a-8af7-4a31-9483-bb3fcd6b8750" name="finish" type="Data"><subsheetid>84295aaa-378f-41c0-892b-81b1fa1e43c7</subsheetid><display x="-105" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="14b05ea9-71ec-46bf-bf16-0cb2c048a492" name="Save As" type="SubSheetInfo"><subsheetid>0034274b-9238-49f1-9208-489c5c1f0440</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="49f07090-6e20-4208-9fb6-76a00bc71a63" name="Start" type="Start"><subsheetid>0034274b-9238-49f1-9208-489c5c1f0440</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" stage="filename" /><input type="text" name="documentname" stage="documentname" /><input type="number" name="handle" stage="handle" /></inputs><onsuccess>4c19c96c-ff67-480d-bcdf-d9d18c62d3e2</onsuccess></stage><stage stageid="56c8c79f-0dda-4bc5-a9fe-eb7dc59e9940" name="End" type="End"><subsheetid>0034274b-9238-49f1-9208-489c5c1f0440</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="documentname" stage="documentname" /></outputs></stage><stage stageid="4c19c96c-ff67-480d-bcdf-d9d18c62d3e2" name="CheckInstanceHandle" type="SubSheet"><subsheetid>0034274b-9238-49f1-9208-489c5c1f0440</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>873547be-bfa6-4aee-b49e-b03ee4b10659</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="873547be-bfa6-4aee-b49e-b03ee4b10659" name="SaveAs" type="Code"><subsheetid>0034274b-9238-49f1-9208-489c5c1f0440</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="documentname" expr="[documentname]" /><input type="text" name="filename" expr="[filename]" /></inputs><outputs><output type="text" name="newname" stage="documentname" /></outputs><onsuccess>56c8c79f-0dda-4bc5-a9fe-eb7dc59e9940</onsuccess><code><![CDATA[
	Dim doc as Object = GetDocument(handle,documentname)
	doc.SaveAs(filename)
	newname = doc.name]]></code></stage><stage stageid="b6243343-4d38-40b3-ac81-6044b590e61f" name="handle" type="Data"><subsheetid>0034274b-9238-49f1-9208-489c5c1f0440</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="d128fa5a-052f-49e3-b3d3-b2a10b0a555d" name="documentname" type="Data"><subsheetid>0034274b-9238-49f1-9208-489c5c1f0440</subsheetid><display x="-210" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9664dacd-968c-462f-b852-1099ff8b3f6a" name="filename" type="Data"><subsheetid>0034274b-9238-49f1-9208-489c5c1f0440</subsheetid><display x="-210" y="120" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bb8df20e-d7cb-452c-acd2-3f04d8a9a78e" name="Exit" type="SubSheetInfo"><subsheetid>d064a183-869e-4269-af78-e8278fcf2a75</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="110d847b-787a-4ad3-86f1-3a1a1ff5687c" name="Start" type="Start"><subsheetid>d064a183-869e-4269-af78-e8278fcf2a75</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /></inputs><onsuccess>f834329d-2a8f-4a5e-b021-bb8d752866a5</onsuccess></stage><stage stageid="20d7732d-8c92-4c00-a602-e650d104a383" name="End" type="End"><subsheetid>d064a183-869e-4269-af78-e8278fcf2a75</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f834329d-2a8f-4a5e-b021-bb8d752866a5" name="CheckInstanceHandle" type="SubSheet"><subsheetid>d064a183-869e-4269-af78-e8278fcf2a75</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>ad2c07f9-3459-4ef3-8c18-627591869d46</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="ad2c07f9-3459-4ef3-8c18-627591869d46" name="Exit" type="Code"><subsheetid>d064a183-869e-4269-af78-e8278fcf2a75</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>20d7732d-8c92-4c00-a602-e650d104a383</onsuccess><code><![CDATA[
	Dim app As Object = GetInstance(handle)
	app.NormalTemplate.Saved = True
	app.Quit()

	Me.HandleMap.Remove(handle)
	Me.InstanceMap.Remove(app)]]></code></stage><stage stageid="5aee7da4-09aa-4a84-8b38-0c219d10a84c" name="handle" type="Data"><subsheetid>d064a183-869e-4269-af78-e8278fcf2a75</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="76d84196-a3f8-438d-87ca-8bbb5a150385" name="Close" type="SubSheetInfo"><subsheetid>a12d6007-5275-4a01-a53e-1fe566ccb6eb</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ca2a96a4-4be4-46a3-bf43-ad0b1fd688d1" name="Start" type="Start"><subsheetid>a12d6007-5275-4a01-a53e-1fe566ccb6eb</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="documentname" stage="documentname" /><input type="number" name="handle" stage="handle" /></inputs><onsuccess>925e7711-a825-4be7-8a2b-13cc2b3f6458</onsuccess></stage><stage stageid="bd446e30-85c5-4bd8-baec-09874a164871" name="End" type="End"><subsheetid>a12d6007-5275-4a01-a53e-1fe566ccb6eb</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="925e7711-a825-4be7-8a2b-13cc2b3f6458" name="CheckInstanceHandle" type="SubSheet"><subsheetid>a12d6007-5275-4a01-a53e-1fe566ccb6eb</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>98b463cd-ae0f-4752-917d-0846f7f9d1d2</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="98b463cd-ae0f-4752-917d-0846f7f9d1d2" name="Close" type="Code"><subsheetid>a12d6007-5275-4a01-a53e-1fe566ccb6eb</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="documentname" expr="[documentname]" /></inputs><onsuccess>bd446e30-85c5-4bd8-baec-09874a164871</onsuccess><code><![CDATA[	
	Dim doc As Object = GetDocument(handle,documentname)
	doc.Saved = True
	doc.Close()]]></code></stage><stage stageid="79711364-a2bd-434e-a183-7cbc2f61e54e" name="handle" type="Data"><subsheetid>a12d6007-5275-4a01-a53e-1fe566ccb6eb</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="b32ff547-580d-4801-b3f1-a474b288e66a" name="documentname" type="Data"><subsheetid>a12d6007-5275-4a01-a53e-1fe566ccb6eb</subsheetid><display x="-210" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f44241e2-c1fa-41ec-94d2-ce04c3004b8c" name="Type Text" type="SubSheetInfo"><subsheetid>ec22d5e7-f140-425a-bbaa-7c1da03813c4</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="829e6b71-8bac-474c-affb-8854abe5b326" name="Start" type="Start"><subsheetid>ec22d5e7-f140-425a-bbaa-7c1da03813c4</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="text" stage="text" /><input type="text" name="documentname" stage="documentname" /><input type="number" name="handle" stage="handle" /></inputs><onsuccess>e1086e24-ae1f-4ce6-81c2-4422ef6fa002</onsuccess></stage><stage stageid="5b094fdf-6ef3-4846-b25c-0ee209e038de" name="End" type="End"><subsheetid>ec22d5e7-f140-425a-bbaa-7c1da03813c4</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="e1086e24-ae1f-4ce6-81c2-4422ef6fa002" name="CheckInstanceHandle" type="SubSheet"><subsheetid>ec22d5e7-f140-425a-bbaa-7c1da03813c4</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>fcf56391-2a51-4e70-9930-2f19ac9223c3</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="fcf56391-2a51-4e70-9930-2f19ac9223c3" name="TypeText" type="Code"><subsheetid>ec22d5e7-f140-425a-bbaa-7c1da03813c4</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="documentname" expr="[documentname]" /><input type="text" name="text" expr="[text]" /></inputs><onsuccess>5b094fdf-6ef3-4846-b25c-0ee209e038de</onsuccess><code><![CDATA[
	GetInstance(handle).Selection.TypeText(text)]]></code></stage><stage stageid="4473d616-1d96-4946-8abf-c0c68033e5c1" name="handle" type="Data"><subsheetid>ec22d5e7-f140-425a-bbaa-7c1da03813c4</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="94b0135e-de95-421b-a5db-07f6fc22b5d8" name="documentname" type="Data"><subsheetid>ec22d5e7-f140-425a-bbaa-7c1da03813c4</subsheetid><display x="-210" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="30c13569-5e52-4d2b-9d3f-30764a391f99" name="text" type="Data"><subsheetid>ec22d5e7-f140-425a-bbaa-7c1da03813c4</subsheetid><display x="-210" y="120" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="54d32e12-69ab-45d3-adc4-74cb220667a1" name="Create Document" type="SubSheetInfo"><subsheetid>df9a2d09-7817-4c60-9dfd-db0023481f74</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9e417d18-2b1b-442c-9c74-e1e8cbc9684d" name="Start" type="Start"><subsheetid>df9a2d09-7817-4c60-9dfd-db0023481f74</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /></inputs><onsuccess>8d4245f6-0d86-4a8d-b932-65500682f43d</onsuccess></stage><stage stageid="668ccf5c-2a61-4b7c-b9b7-f60c6d1a8dfb" name="End" type="End"><subsheetid>df9a2d09-7817-4c60-9dfd-db0023481f74</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="documentname" stage="documentname" /></outputs></stage><stage stageid="8d4245f6-0d86-4a8d-b932-65500682f43d" name="CheckInstanceHandle" type="SubSheet"><subsheetid>df9a2d09-7817-4c60-9dfd-db0023481f74</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>cdeffd66-9688-46dc-91b2-6ddf3d8476c7</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="cdeffd66-9688-46dc-91b2-6ddf3d8476c7" name="CreateDocument" type="Code"><subsheetid>df9a2d09-7817-4c60-9dfd-db0023481f74</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><outputs><output type="text" name="documentname" stage="documentname" /></outputs><onsuccess>668ccf5c-2a61-4b7c-b9b7-f60c6d1a8dfb</onsuccess><code><![CDATA[
	Dim doc as Object = GetInstance(handle).Documents.Add()
	documentname = doc.Name
	doc.Activate()
]]></code></stage><stage stageid="55507265-dccf-498b-b457-9fa3230c8ad8" name="handle" type="Data"><subsheetid>df9a2d09-7817-4c60-9dfd-db0023481f74</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="96a1c94c-4176-4965-aeec-43ccd66ca797" name="documentname" type="Data"><subsheetid>df9a2d09-7817-4c60-9dfd-db0023481f74</subsheetid><display x="-210" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="aa7025db-88e7-4128-912e-878929e649bf" name="Update Bookmark" type="SubSheetInfo"><subsheetid>658b8a32-bfce-4df2-bfdc-a9525bc2979e</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="06b932ee-3310-4628-823f-265d0ef63d38" name="Start" type="Start"><subsheetid>658b8a32-bfce-4df2-bfdc-a9525bc2979e</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Bookmark name" stage="name" /><input type="text" name="Text" stage="value" /><input type="text" name="documentname" stage="documentname" /><input type="number" name="handle" stage="handle" /></inputs><onsuccess>e87e8a9b-c20a-469f-a077-2b6ae1cd52a4</onsuccess></stage><stage stageid="4568f576-e587-46d1-9613-8455000361ee" name="End" type="End"><subsheetid>658b8a32-bfce-4df2-bfdc-a9525bc2979e</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="e87e8a9b-c20a-469f-a077-2b6ae1cd52a4" name="CheckInstanceHandle" type="SubSheet"><subsheetid>658b8a32-bfce-4df2-bfdc-a9525bc2979e</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>41afaa16-ddea-4385-9530-07f94ee95532</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="41afaa16-ddea-4385-9530-07f94ee95532" name="UpdateBookmark" type="Code"><subsheetid>658b8a32-bfce-4df2-bfdc-a9525bc2979e</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="documentname" expr="[documentname]" /><input type="text" name="name" expr="[name]" /><input type="text" name="value" expr="[value]" /></inputs><onsuccess>4568f576-e587-46d1-9613-8455000361ee</onsuccess><code><![CDATA[
	Dim doc as Object = GetDocument(handle,documentname)
	If doc.Bookmarks.Exists(name) Then
		doc.Bookmarks.Item(name).Range.Text = value
	End If]]></code></stage><stage stageid="ad290b27-e3a5-4ad5-b352-eff94acc7de8" name="handle" type="Data"><subsheetid>658b8a32-bfce-4df2-bfdc-a9525bc2979e</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="5b28714a-4da4-4baf-8116-a19d736d56c4" name="value" type="Data"><subsheetid>658b8a32-bfce-4df2-bfdc-a9525bc2979e</subsheetid><display x="-195" y="165" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="294bedbf-1386-4233-b599-e8e5d50121bc" name="name" type="Data"><subsheetid>658b8a32-bfce-4df2-bfdc-a9525bc2979e</subsheetid><display x="-195" y="120" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="422f53fe-cfb8-44ab-8628-5e7192d8a14b" name="documentname" type="Data"><subsheetid>658b8a32-bfce-4df2-bfdc-a9525bc2979e</subsheetid><display x="-195" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6f3f2cc6-4bd9-456e-9857-dc71ccafdcb9" name="Set Current Instance" type="SubSheetInfo"><subsheetid>89550223-4597-48e5-a1c2-c61c726899cf</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ef5caa1c-ba0b-4e25-ba69-081e9386a4f3" name="Start" type="Start"><subsheetid>89550223-4597-48e5-a1c2-c61c726899cf</subsheetid><loginhibit /><display x="15" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The handle for the instance which should become the current instance" stage="handle" /></inputs><onsuccess>215a6e49-5725-401b-9f3f-d1fd9261dac7</onsuccess></stage><stage stageid="c0b115d4-6eff-4088-9356-8abf9d79ccc1" name="End" type="End"><subsheetid>89550223-4597-48e5-a1c2-c61c726899cf</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="215a6e49-5725-401b-9f3f-d1fd9261dac7" name="CheckInstanceHandle" type="SubSheet"><subsheetid>89550223-4597-48e5-a1c2-c61c726899cf</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>c0b115d4-6eff-4088-9356-8abf9d79ccc1</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="4df855d7-0ceb-42e9-9fe3-c4a6de4b72e8" name="Note1" type="Note"><subsheetid>89550223-4597-48e5-a1c2-c61c726899cf</subsheetid><loginhibit /><narrative>Don't need to anything - a side-effect of the check is to set the current instance... makes it simple.</narrative><display x="165" y="-60" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d355c6b1-7c4f-4842-99d8-2e2ba88a3934" name="Attach Instance" type="SubSheetInfo"><subsheetid>fab67da7-2774-4aba-b65c-e3cc6c20dac5</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="2a0baf69-393d-4338-91c2-599bb8f9dd88" name="Start" type="Start"><subsheetid>fab67da7-2774-4aba-b65c-e3cc6c20dac5</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" narrative="The full path and filename of the document that the instance should attach to, empty indicates that the topmost Word instance be attached to" stage="Filename" /></inputs><onsuccess>cf413a56-3b39-4024-9358-e45c4cb1270f</onsuccess></stage><stage stageid="080da51f-78bc-4c03-a069-fba8ce7216c3" name="End" type="End"><subsheetid>fab67da7-2774-4aba-b65c-e3cc6c20dac5</subsheetid><loginhibit /><display x="15" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="handle" narrative="The handle to the newly created instance, attached to either an existing Word window or a new one." stage="handle" /></outputs></stage><stage stageid="2d9ef69e-28d3-4c3d-8c66-ad48abf1c9bd" name="Filename" type="Data"><subsheetid>fab67da7-2774-4aba-b65c-e3cc6c20dac5</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7538631d-fe66-4fa5-9087-9757b9baa750" name="handle" type="Data"><subsheetid>fab67da7-2774-4aba-b65c-e3cc6c20dac5</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cf413a56-3b39-4024-9358-e45c4cb1270f" name="AttachInstance" type="Code"><subsheetid>fab67da7-2774-4aba-b65c-e3cc6c20dac5</subsheetid><loginhibit /><display x="15" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="filename" expr="[Filename]" /></inputs><outputs><output type="number" name="handle" stage="handle" /></outputs><onsuccess>080da51f-78bc-4c03-a069-fba8ce7216c3</onsuccess><code><![CDATA[
If filename = "" Then
	handle = GetHandle(GetObject(, "Word.Application"))
Else
	handle = GetHandle(GetObject(filename).Application)
End If]]></code></stage><stage stageid="bb83c823-90bc-4da3-9b03-b1bfae7ffe16" name="Detach Instance" type="SubSheetInfo"><subsheetid>8b161e34-9d3a-4120-a6ef-47fa0d4fb3ae</subsheetid><narrative>Detaches from the Word instance with the given handle, removing all references within this business object.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="3086e1fc-ae22-4963-93f2-743021835c1d" name="Start" type="Start"><subsheetid>8b161e34-9d3a-4120-a6ef-47fa0d4fb3ae</subsheetid><loginhibit /><display x="-15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The handle to the instance to be detached from" stage="handle" /></inputs><onsuccess>10611a26-c805-4e33-b3ba-4be3ffb5ae66</onsuccess></stage><stage stageid="936fb37c-767b-4c3b-9b5e-57b36515bba6" name="End" type="End"><subsheetid>8b161e34-9d3a-4120-a6ef-47fa0d4fb3ae</subsheetid><loginhibit /><display x="-15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="cfdae8d9-4e29-4353-a17b-4c5a724fa96e" name="handle" type="Data"><subsheetid>8b161e34-9d3a-4120-a6ef-47fa0d4fb3ae</subsheetid><display x="-210" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="10611a26-c805-4e33-b3ba-4be3ffb5ae66" name="DetachInstance" type="Code"><subsheetid>8b161e34-9d3a-4120-a6ef-47fa0d4fb3ae</subsheetid><loginhibit /><display x="-15" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>936fb37c-767b-4c3b-9b5e-57b36515bba6</onsuccess><code><![CDATA[Dim app As Object = GetInstance(handle)
HandleMap.Remove(CInt(handle))
InstanceMap.Remove(app)
If app Is CurrentInstance Then CurrentInstance = Nothing
Marshal.ReleaseComObject(app)]]></code></stage><stage stageid="f1a76547-26a8-4bbb-876c-12108d44f5f5" name="handle" type="Data"><subsheetid>89550223-4597-48e5-a1c2-c61c726899cf</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="744e462f-ed5d-4004-afe9-a69ae3cddf27" name="Get Highlighted Text" type="SubSheetInfo"><subsheetid>ab5706df-5945-47c6-ad85-98b64e6966f8</subsheetid><narrative>Returns the documents highlighted text as a collection</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="3fa2a732-65ad-412e-8dfc-797a10a1dd38" name="End" type="End"><subsheetid>ab5706df-5945-47c6-ad85-98b64e6966f8</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="highlighted text" stage="highlighted text" /></outputs></stage><stage stageid="d60af1f9-c084-491f-b44f-99c1c5fe61b4" name="Get Highlighted Text" type="Code"><subsheetid>ab5706df-5945-47c6-ad85-98b64e6966f8</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /></inputs><outputs><output type="collection" name="highlighted text" stage="highlighted text" /></outputs><onsuccess>3fa2a732-65ad-412e-8dfc-797a10a1dd38</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)
Dim r As Object = d.Range
Dim i As Integer

Dim dt As New System.Data.DataTable()
Dim dr As System.Data.DataRow

dt.Columns.Add("text", GetType(String))
dt.Columns.Add("highlight index", GetType(Integer))

r.Find.Highlight = true
r.Find.Forward = True

Do While r.Find.Execute
	If r.HighlightColorIndex <> 0 Then
		dr = dt.NewRow()
		dr("text") = r.Text
		dr("highlight index") = r.HighlightColorIndex
		dt.Rows.Add(dr)
	End If
	i = r.End
	r.Start = i
Loop
highlighted_text = dt]]></code></stage><stage stageid="efa512ec-3a71-4ae2-8fea-10c01497d1ad" name="handle" type="Data"><subsheetid>ab5706df-5945-47c6-ad85-98b64e6966f8</subsheetid><display x="-195" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9014f0b7-d7ec-4f10-9fe4-9294d5c469ac" name="Start" type="Start"><subsheetid>ab5706df-5945-47c6-ad85-98b64e6966f8</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /></inputs><onsuccess>d60af1f9-c084-491f-b44f-99c1c5fe61b4</onsuccess></stage><stage stageid="19a7cc99-e574-4f93-a220-3f94df6dcb00" name="document name" type="Data"><subsheetid>ab5706df-5945-47c6-ad85-98b64e6966f8</subsheetid><display x="-195" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="41cca25a-0352-483f-bd0d-210348dddccf" name="highlighted text" type="Collection"><subsheetid>ab5706df-5945-47c6-ad85-98b64e6966f8</subsheetid><display x="-195" y="90" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="text" type="text" /><field name="highlight index" type="number" description="A value from from the wdColor enumeration" /></collectioninfo></stage><stage stageid="faba3574-835f-426f-babd-7741f20c08ef" name="Replace Highlighted Text" type="SubSheetInfo"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><narrative>Searches for and replaces highlighted text</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="10f02379-dc0a-4fb5-8107-75333fd04af6" name="End" type="End"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1750861c-714e-4fd9-a7ad-babb2bc8735b" name="handle" type="Data"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><display x="-195" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1c605ebc-3335-451b-a024-96310e159f3d" name="Start" type="Start"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /><input type="text" name="current text" stage="current text" /><input type="number" name="current highlight" stage="current highlight" /><input type="text" name="new text" stage="new text" /><input type="number" name="new highlight" stage="new highlight" /><input type="flag" name="new bold" stage="new bold" /></inputs><onsuccess>86ff3b1e-b8e7-41aa-81c8-c6b731c9783d</onsuccess></stage><stage stageid="478dfc3b-afab-4b3d-b893-d63b17652148" name="document name" type="Data"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><display x="-195" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2480b35b-c034-4e1f-8fee-05f04f234f8c" name="current text" type="Data"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c4cb5e60-a090-41e5-945a-64a46b4fc815" name="current highlight" type="Data"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="60806e60-b1df-4318-9475-7a638c227a47" name="new text" type="Data"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><display x="-195" y="165" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a40255d1-e872-4311-b2d8-2e2dfda8bdde" name="new highlight" type="Data"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="86ff3b1e-b8e7-41aa-81c8-c6b731c9783d" name="Replace Highlighted Text" type="Code"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /><input type="text" name="current text" expr="[current text]" /><input type="number" name="current highlight" expr="[current highlight]" /><input type="text" name="new text" expr="[new text]" /><input type="number" name="new highlight" expr="[new highlight]" /><input type="flag" name="new bold" expr="[new bold]" /></inputs><onsuccess>10f02379-dc0a-4fb5-8107-75333fd04af6</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)
Dim r As Object = d.Range
Dim i As Integer

r.Find.Highlight = true
r.Find.Forward = True

Do While r.Find.Execute(current_text)
	If r.HighlightColorIndex = current_highlight Then
		r.Text = new_text
		r.HighlightColorIndex = CInt(new_highlight)
		r.Bold=new_bold
	End If
	i = r.End
	r.Start = i
Loop]]></code></stage><stage stageid="234fee0c-5b96-4829-be83-f34ff671c61e" name="new bold" type="Data"><subsheetid>8e6deaaf-17ce-4784-b335-a9405da05140</subsheetid><display x="-195" y="210" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="9a6342b6-1b6c-467f-970c-ae638d0dc946" name="Select All" type="SubSheetInfo"><subsheetid>e945fdd1-12ee-49a3-828b-f210f597b9ea</subsheetid><narrative>Selects the entire document</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="32c7e893-ade6-4c28-8878-b0b6c201c420" name="End" type="End"><subsheetid>e945fdd1-12ee-49a3-828b-f210f597b9ea</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f292c519-969f-48ca-a11a-b32031d9015b" name="handle" type="Data"><subsheetid>e945fdd1-12ee-49a3-828b-f210f597b9ea</subsheetid><display x="-195" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5c3d29d4-83e1-4c5c-9d14-e4b698c6a498" name="Start" type="Start"><subsheetid>e945fdd1-12ee-49a3-828b-f210f597b9ea</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /></inputs><onsuccess>71b6f8f9-6acb-4a3e-a7a5-5938100e9139</onsuccess></stage><stage stageid="7e4a9137-bdd0-49c3-a19f-a8bae90a3bd3" name="document name" type="Data"><subsheetid>e945fdd1-12ee-49a3-828b-f210f597b9ea</subsheetid><display x="-195" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="71b6f8f9-6acb-4a3e-a7a5-5938100e9139" name="Select All" type="Code"><subsheetid>e945fdd1-12ee-49a3-828b-f210f597b9ea</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /></inputs><onsuccess>32c7e893-ade6-4c28-8878-b0b6c201c420</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)

d.Select

d = Nothing]]></code></stage><stage stageid="fc588eee-d842-46c9-b230-634378015cc6" name="Copy to Clipboard" type="SubSheetInfo"><subsheetid>0ad7469f-a55c-48de-9ec9-7b3b429c91b1</subsheetid><narrative>Copies the current selection on to the clipboard</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ef78d8f3-3153-45b1-8714-b95142c7d2b9" name="End" type="End"><subsheetid>0ad7469f-a55c-48de-9ec9-7b3b429c91b1</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="3c1ca358-cb83-4f00-9bf5-ddf03a34149a" name="handle" type="Data"><subsheetid>0ad7469f-a55c-48de-9ec9-7b3b429c91b1</subsheetid><display x="-195" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f4eb6834-0cbe-4f99-8bb0-6c25173f85aa" name="Start" type="Start"><subsheetid>0ad7469f-a55c-48de-9ec9-7b3b429c91b1</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /></inputs><onsuccess>094bc875-98bf-40d7-930d-c118bff53af6</onsuccess></stage><stage stageid="8f073f68-b07c-4837-91ce-37c063f71401" name="document name" type="Data"><subsheetid>0ad7469f-a55c-48de-9ec9-7b3b429c91b1</subsheetid><display x="-195" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="094bc875-98bf-40d7-930d-c118bff53af6" name="Copy to Clipboard" type="Code"><subsheetid>0ad7469f-a55c-48de-9ec9-7b3b429c91b1</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /></inputs><onsuccess>ef78d8f3-3153-45b1-8714-b95142c7d2b9</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)
Dim w As Object = d.Application
Dim s As Object = w.Selection

If s IsNot Nothing Then s.Copy

d = Nothing
w = Nothing
s = Nothing]]></code></stage><stage stageid="c2e0189a-f373-4e16-8ac9-b3f50c3928ef" name="Paste from Clipboard" type="SubSheetInfo"><subsheetid>e3194549-4702-4196-8e84-02c9414289f2</subsheetid><narrative>Pastes the contents of the clipboard into the document</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="cc3026b3-8726-4034-9304-aa303f869095" name="End" type="End"><subsheetid>e3194549-4702-4196-8e84-02c9414289f2</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c102344a-5e52-4389-acd8-9d3df3011a36" name="handle" type="Data"><subsheetid>e3194549-4702-4196-8e84-02c9414289f2</subsheetid><display x="-195" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f225a8a7-74c0-4baf-abd1-e4619d1cd9dc" name="Start" type="Start"><subsheetid>e3194549-4702-4196-8e84-02c9414289f2</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /></inputs><onsuccess>32689787-cfad-4f85-98db-9101ef103d8b</onsuccess></stage><stage stageid="414b8866-2d52-4971-aab5-a48d66411bf0" name="document name" type="Data"><subsheetid>e3194549-4702-4196-8e84-02c9414289f2</subsheetid><display x="-195" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="32689787-cfad-4f85-98db-9101ef103d8b" name="Paste from Clipboard" type="Code"><subsheetid>e3194549-4702-4196-8e84-02c9414289f2</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /></inputs><onsuccess>cc3026b3-8726-4034-9304-aa303f869095</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)
Dim w As Object = d.Application

w.Selection.Paste

d = Nothing
w = Nothing]]></code></stage><stage stageid="c9f4e132-f333-46bd-9f33-bd08364ca098" name="Clear Clipboard" type="SubSheetInfo"><subsheetid>479d48e5-45be-4252-99e6-7685eacb95f0</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c63bcd84-f4b9-4db7-a9ca-2d27ed62ea2c" name="Start" type="Start"><subsheetid>479d48e5-45be-4252-99e6-7685eacb95f0</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>d6bc499e-db0e-4204-94f7-060f8b728596</onsuccess></stage><stage stageid="cae61485-5711-4b5a-b35a-cc2cc49dcecd" name="End" type="End"><subsheetid>479d48e5-45be-4252-99e6-7685eacb95f0</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d6bc499e-db0e-4204-94f7-060f8b728596" name="Clear" type="Code"><subsheetid>479d48e5-45be-4252-99e6-7685eacb95f0</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>cae61485-5711-4b5a-b35a-cc2cc49dcecd</onsuccess><code><![CDATA[
My.Computer.Clipboard.Clear]]></code></stage><stage stageid="5b918aa9-d185-4273-8d17-322bfcb06ab4" name="Find Text" type="SubSheetInfo"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><narrative>Searches the document for the given text</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9fa6746a-2e54-4364-987a-1c82aca0bfdc" name="End" type="End"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="found" stage="found" /></outputs></stage><stage stageid="44e131e3-1dd8-4ae7-ac12-119b805fb8d0" name="handle" type="Data"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5322d24f-f105-4817-b328-580613831a00" name="Start" type="Start"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /><input type="text" name="text" stage="text" /><input type="flag" name="match case" stage="match case" /><input type="flag" name="match whole word" stage="match whole word" /></inputs><onsuccess>1f2d6c14-b8c0-4895-8791-15dc1c4b8cd3</onsuccess></stage><stage stageid="b294a47f-4ad7-4cf9-a898-13aefa7c9f0f" name="document name" type="Data"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1f2d6c14-b8c0-4895-8791-15dc1c4b8cd3" name="Find Text" type="Code"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /><input type="text" name="text" expr="[text]" /><input type="flag" name="match case" expr="[match case]" /><input type="flag" name="match whole word" expr="[match whole word]" /></inputs><outputs><output type="flag" name="found" stage="found" /></outputs><onsuccess>9fa6746a-2e54-4364-987a-1c82aca0bfdc</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)
Dim w As Object = d.Application
Dim s As Object = w.Selection
Dim f As Object = s.Find

Try

f.ClearFormatting
With f
	.Text = Text
	.Replacement.Text = ""
	.Forward = True
	.Wrap = 1 'wdFindContinue
	.Format = False
	.MatchCase = match_case
	.MatchWholeWord = match_whole_word
	.MatchWildcards = False
	.MatchSoundsLike = False
	.MatchAllWordForms = False
End With
found = f.Execute

Catch ex As Exception

found = False

Finally

d = Nothing
w = Nothing
s = Nothing
f = Nothing

End try]]></code></stage><stage stageid="169d67d4-b8ae-48c2-a693-6a4cb4ef2cf4" name="text" type="Data"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="934d6430-60d8-4676-b570-e3be9639641c" name="found" type="Data"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c53ac88a-5097-4cd0-8962-e04e6ba421bf" name="match case" type="Data"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="18a5ce24-7703-42c9-9c67-36c7f5acc805" name="match whole word" type="Data"><subsheetid>a46a3a18-37e6-4658-bf90-5612c2db5da4</subsheetid><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="cc529358-b060-4eec-b382-563e4dd595cb" name="Select Next Cell" type="SubSheetInfo"><subsheetid>014a9077-47d7-46c4-949a-9dd622e2aa55</subsheetid><narrative>Moves the cursor to the table cell n steps away from the current cell. A positive number of steps moves forward and a negative number moves backwards.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="12001300-6faa-4829-99f6-61df86a10e66" name="End" type="End"><subsheetid>014a9077-47d7-46c4-949a-9dd622e2aa55</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="selected" stage="selected" /></outputs></stage><stage stageid="3beae3c8-e083-4bcd-996b-733ab9676289" name="handle" type="Data"><subsheetid>014a9077-47d7-46c4-949a-9dd622e2aa55</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="75895ee8-9f3a-4bbc-993e-783fd8679de6" name="Start" type="Start"><subsheetid>014a9077-47d7-46c4-949a-9dd622e2aa55</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /><input type="number" name="steps" narrative="Optional, positive number to move forward, negative to move back, default 1." stage="steps" /></inputs><onsuccess>42ed0356-4769-4b34-a449-4fbe0a21922b</onsuccess></stage><stage stageid="9c875518-2eef-4c5b-8040-004573505f3e" name="document name" type="Data"><subsheetid>014a9077-47d7-46c4-949a-9dd622e2aa55</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4b10f2e8-1f7b-44ae-9d88-ac58bd3f2a22" name="selected" type="Data"><subsheetid>014a9077-47d7-46c4-949a-9dd622e2aa55</subsheetid><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="42ed0356-4769-4b34-a449-4fbe0a21922b" name="Select Next Cell" type="Code"><subsheetid>014a9077-47d7-46c4-949a-9dd622e2aa55</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /><input type="number" name="steps" expr="[steps]" /></inputs><outputs><output type="flag" name="selected" stage="selected" /></outputs><onsuccess>12001300-6faa-4829-99f6-61df86a10e66</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)
Dim w As Object = d.Application
Dim s As Object = Nothing
Dim c As Object = Nothing
Dim c1 As Object = Nothing
Dim i As Integer

Try
If steps < 0 Then
	For i = steps To -1
		s = w.Selection
		c = s.Cells
		If c.Count = 0 Then
			selected = False
			Exit Sub
		ElseIf c(1).Previous Is Nothing Then
			selected = False
			Exit Sub
		Else
			c(1).Previous.Select
			If c1 Is Nothing Then c1 = c(1)
		End If
	Next
Else
	For i = 1 To steps
		s = w.Selection
		c = s.Cells
		If c.Count = 0 Then
			selected = False
			Exit Sub
		ElseIf c(1).Next Is Nothing Then
			selected = False
			Exit Sub
		Else
			c(1).Next.Select
			If c1 Is Nothing Then c1 = c(1)
		End If
	Next
End If

c1 = Nothing
selected = True

Catch ex As Exception
	selected = False
Finally
	If c1 IsNot Nothing Then
		c1.Select
	End If
	d = Nothing
	w = Nothing
	s = Nothing
	c = Nothing
	c1 = Nothing
End try]]></code></stage><stage stageid="96975d1f-c613-48e6-b917-47041ee8da2c" name="steps" type="Data"><subsheetid>014a9077-47d7-46c4-949a-9dd622e2aa55</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="da8e46d1-b4b9-40b8-96d3-d5f50d7f4c89" name="Set Selected Cell Text" type="SubSheetInfo"><subsheetid>e5c26c59-2398-4789-8c68-a82d3e675364</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d93f9a85-6397-463f-a7cc-793c62f0afce" name="End" type="End"><subsheetid>e5c26c59-2398-4789-8c68-a82d3e675364</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="e765aafd-6194-4dde-8353-5dca090372ef" name="handle" type="Data"><subsheetid>e5c26c59-2398-4789-8c68-a82d3e675364</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e200c448-4a17-47ce-a208-ba02c896eb8a" name="Start" type="Start"><subsheetid>e5c26c59-2398-4789-8c68-a82d3e675364</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /><input type="text" name="text" stage="text" /><input type="flag" name="append" narrative="Optional, default False will overwrite." stage="append" /></inputs><onsuccess>5032655f-d60c-4fd4-8247-b167d88f2bda</onsuccess></stage><stage stageid="5b309234-72f0-479a-871b-51dda5f6075c" name="document name" type="Data"><subsheetid>e5c26c59-2398-4789-8c68-a82d3e675364</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5032655f-d60c-4fd4-8247-b167d88f2bda" name="Set Cell" type="Code"><subsheetid>e5c26c59-2398-4789-8c68-a82d3e675364</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /><input type="text" name="text" expr="[text]" /><input type="flag" name="append" expr="[append]" /></inputs><onsuccess>d93f9a85-6397-463f-a7cc-793c62f0afce</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)
Dim w As Object = d.Application
Dim s As Object = Nothing
Dim cs As Object = Nothing
Dim c As Object = Nothing
Dim r As Object = Nothing

Try

s = w.Selection
cs = s.Cells
If cs.Count = 1 Then
	c = cs(1)
	r = c.Range
	If append Then
		r.Text = r.Text.Substring(0, r.Text.Length - 2) & text & r.Text.Substring(r.Text.Length - 2)
	Else
		r.Text = text
	End If
End If

Catch ex As Exception
	Throw ex
Finally
	d = Nothing
	w = Nothing
	s = Nothing
	cs = Nothing
	c = Nothing
	r = Nothing
End try]]></code></stage><stage stageid="213b47ae-d5b2-4c58-a0bb-967f877da779" name="text" type="Data"><subsheetid>e5c26c59-2398-4789-8c68-a82d3e675364</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2fea1f6e-b9fd-48a4-975b-95eb357812ec" name="append" type="Data"><subsheetid>e5c26c59-2398-4789-8c68-a82d3e675364</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="264c4c7c-6251-4383-9f3a-28559469d1e2" name="Select Next Field" type="SubSheetInfo"><subsheetid>25894c29-7a40-4c69-8562-7b0ec251e307</subsheetid><narrative>Selects the next field in the document</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="058b4f33-fd12-422b-b45f-9604400b893e" name="End" type="End"><subsheetid>25894c29-7a40-4c69-8562-7b0ec251e307</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="selected" stage="selected" /></outputs></stage><stage stageid="85c127b5-cf48-4914-a129-d36cc585c1ff" name="handle" type="Data"><subsheetid>25894c29-7a40-4c69-8562-7b0ec251e307</subsheetid><display x="-195" y="-45" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f94d5f5d-2027-44e7-8122-ed018c4bcaa0" name="Start" type="Start"><subsheetid>25894c29-7a40-4c69-8562-7b0ec251e307</subsheetid><loginhibit /><display x="15" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /><input type="number" name="steps" narrative="Optional, positive number to move forward, negative to move back, default 1." stage="steps" /></inputs><onsuccess>2dc430f1-a3ee-4adb-a992-c153fbb04bca</onsuccess></stage><stage stageid="49b6201c-934e-4e16-98a3-3333ed61e186" name="document name" type="Data"><subsheetid>25894c29-7a40-4c69-8562-7b0ec251e307</subsheetid><display x="-195" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5639856e-1937-434a-bfee-927110122a21" name="selected" type="Data"><subsheetid>25894c29-7a40-4c69-8562-7b0ec251e307</subsheetid><display x="-195" y="75" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="93b18a8f-6970-47eb-9c5f-ced62e36f10b" name="steps" type="Data"><subsheetid>25894c29-7a40-4c69-8562-7b0ec251e307</subsheetid><display x="-195" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="2dc430f1-a3ee-4adb-a992-c153fbb04bca" name="Select Next Field" type="Code"><subsheetid>25894c29-7a40-4c69-8562-7b0ec251e307</subsheetid><loginhibit /><display x="15" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /><input type="number" name="steps" expr="[steps]" /></inputs><outputs><output type="flag" name="selected" stage="selected" /></outputs><onsuccess>058b4f33-fd12-422b-b45f-9604400b893e</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)
Dim w As Object = d.Application
Dim s As Object = w.Selection
Dim f As Object = s.Find
Dim wrap, count, which As Integer
Dim forward as Boolean

If steps < 0 Then
	count = -1 * steps
	wrap = 2
	forward = False
	which = 3
Else
	count = steps
	wrap = 1
	forward = True
	which = 2
End If

Try

s.GoTo(What:=7, Which:=which, Count:=count, Name:="")
f.ClearFormatting
With f
	.Text = ""
	.Replacement.Text = ""
	.Forward = forward
	.Wrap = wrap
	.Format = False
	.MatchCase = False
	.MatchWholeWord = False
	.MatchWildcards = False
	.MatchSoundsLike = False
	.MatchAllWordForms = False
End With

s.MoveRight(Unit:=1, Count:=1, Extend:=1)
selected = True

Catch ex As Exception

selected = False

Finally

d = Nothing
w = Nothing
s = Nothing
f = Nothing

End try]]></code></stage><stage stageid="62da7c33-64e2-4cb4-b8f7-50742893de4a" name="Set Selected Checkbox" type="SubSheetInfo"><subsheetid>0982104d-2763-42e8-a690-69c44d9a4046</subsheetid><narrative>Ticks or unticks the selected checkbox</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="510c9852-b8ac-4ff8-8e0c-7c8d13ed79c3" name="End" type="End"><subsheetid>0982104d-2763-42e8-a690-69c44d9a4046</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c24730d4-72ba-45f3-a565-5a2cdde3e197" name="handle" type="Data"><subsheetid>0982104d-2763-42e8-a690-69c44d9a4046</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a7894538-d76b-4e8f-9eba-4fdc810eb94a" name="Start" type="Start"><subsheetid>0982104d-2763-42e8-a690-69c44d9a4046</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /><input type="flag" name="checked" stage="checked" /></inputs><onsuccess>2208ee1b-e132-49b8-8567-2c69be9f4e2b</onsuccess></stage><stage stageid="a9d8cd15-d588-429e-82f7-bede62d5d650" name="document name" type="Data"><subsheetid>0982104d-2763-42e8-a690-69c44d9a4046</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2208ee1b-e132-49b8-8567-2c69be9f4e2b" name="Set Checkbox" type="Code"><subsheetid>0982104d-2763-42e8-a690-69c44d9a4046</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /><input type="flag" name="Checked" expr="[checked]" /></inputs><onsuccess>510c9852-b8ac-4ff8-8e0c-7c8d13ed79c3</onsuccess><code><![CDATA[Dim doc = GetDocument(handle,document_name)

Dim sel = doc.Application.Selection
Dim fields = sel.FormFields
If fields.Count > 0 Then
    Dim field = fields(1)
	If field IsNot Nothing AndAlso field.Type = 71 Then 'wdFieldFormCheckBox
		Dim cb = field.CheckBox
		cb.Value = checked
	End If
End If

Dim control = sel.ParentContentControl
If control IsNot Nothing Then
  control.Checked = checked
End If]]></code></stage><stage stageid="df9e9413-eefd-4eae-8129-9314da3eff69" name="checked" type="Data"><subsheetid>0982104d-2763-42e8-a690-69c44d9a4046</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="581ce51a-db6c-4a6c-9455-7047b2e58bdb" name="Get Footer Text" type="SubSheetInfo"><subsheetid>dc779662-1e7e-4438-b1c5-1106c851c3a3</subsheetid><narrative>Gets the text from the specified footer</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f07e9727-845e-4d3e-b035-79dd9c1a9e02" name="End" type="End"><subsheetid>dc779662-1e7e-4438-b1c5-1106c851c3a3</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="footer text" stage="footer text" /></outputs></stage><stage stageid="e7505af8-12a1-48a0-9b29-5d53359af376" name="section" type="Data"><subsheetid>dc779662-1e7e-4438-b1c5-1106c851c3a3</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="2ed14a06-174f-4565-be98-fea2aabfb137" name="footer" type="Data"><subsheetid>dc779662-1e7e-4438-b1c5-1106c851c3a3</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="d2735c81-3c82-4c05-804d-dc66ad1d7a0f" name="handle" type="Data"><subsheetid>dc779662-1e7e-4438-b1c5-1106c851c3a3</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d20473de-325e-4790-8adc-d4afa4a49f54" name="document name" type="Data"><subsheetid>dc779662-1e7e-4438-b1c5-1106c851c3a3</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="89da9cc4-334f-4e99-9348-64fea39e45ad" name="Get Footer text" type="Code"><subsheetid>dc779662-1e7e-4438-b1c5-1106c851c3a3</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="document name" expr="[document name]" /><input type="number" name="section" expr="[section]" /><input type="number" name="footer" expr="[footer]" /></inputs><outputs><output type="text" name="footer text" stage="footer text" /></outputs><onsuccess>f07e9727-845e-4d3e-b035-79dd9c1a9e02</onsuccess><code><![CDATA[
Dim d As Object = GetDocument(handle,document_name)
Dim s As Object = Nothing
Dim f As Object = Nothing
Dim r As Object = Nothing

Try

s = d.Sections(section)
f = s.Footers(footer)
r = f.Range
r.End = r.End - 1
footer_text = r.text

Catch ex As Exception
	Throw ex
Finally
	d = Nothing
	s = Nothing
	f = Nothing
	r = Nothing
End try]]></code></stage><stage stageid="c9d0bd4e-e9b7-4677-b57b-025580e8a62a" name="Start" type="Start"><subsheetid>dc779662-1e7e-4438-b1c5-1106c851c3a3</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" stage="handle" /><input type="text" name="document name" stage="document name" /><input type="number" name="section" narrative="Default 1" stage="section" /><input type="number" name="footer" narrative="Default 1" stage="footer" /></inputs><onsuccess>89da9cc4-334f-4e99-9348-64fea39e45ad</onsuccess></stage><stage stageid="21cad55b-4aa5-44d6-8d55-8668a8e01267" name="footer text" type="Data"><subsheetid>dc779662-1e7e-4438-b1c5-1106c851c3a3</subsheetid><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bcb6879c-aec3-4f7e-b0c0-c7a05541c8ce" name="Add Table Row" type="SubSheetInfo"><subsheetid>349117e1-607c-4bb6-a911-5074cb58aca0</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="87ab81a0-0173-4bb1-a341-070e1a8672d4" name="Start" type="Start"><subsheetid>349117e1-607c-4bb6-a911-5074cb58aca0</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="-15" y="-75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="documentname" stage="documentname" /><input type="number" name="handle" stage="handle" /><input type="number" name="Table Number" narrative="The number of the table within the word document" stage="Table Number" /></inputs><onsuccess>8bf740f2-5429-4adb-ba49-4345536358a7</onsuccess></stage><stage stageid="11ef2aff-c240-4089-a3dc-133c850260fe" name="End" type="End"><subsheetid>349117e1-607c-4bb6-a911-5074cb58aca0</subsheetid><loginhibit /><display x="-15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="8bf740f2-5429-4adb-ba49-4345536358a7" name="CheckInstanceHandle" type="SubSheet"><subsheetid>349117e1-607c-4bb6-a911-5074cb58aca0</subsheetid><loginhibit /><display x="-15" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>e352f349-79ec-4303-9fa0-d6b6329b9b3d</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="e352f349-79ec-4303-9fa0-d6b6329b9b3d" name="AddRow" type="Code"><subsheetid>349117e1-607c-4bb6-a911-5074cb58aca0</subsheetid><loginhibit /><display x="-15" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="documentname" expr="[documentname]" /><input type="number" name="TableNumber" expr="[Table Number]" /></inputs><onsuccess>11ef2aff-c240-4089-a3dc-133c850260fe</onsuccess><code><![CDATA[
Dim doc as Object = GetDocument(handle,documentname)
doc.Tables.Item(TableNumber).Rows.Add()]]></code></stage><stage stageid="3146c42a-ee16-4654-8f47-cad56ba1c4a3" name="handle" type="Data"><subsheetid>349117e1-607c-4bb6-a911-5074cb58aca0</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="0fa28223-5cbc-4b56-994f-735cb7ecf068" name="documentname" type="Data"><subsheetid>349117e1-607c-4bb6-a911-5074cb58aca0</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9a9191e3-0b09-44ee-9fd3-96a452ae22de" name="Table Number" type="Data"><subsheetid>349117e1-607c-4bb6-a911-5074cb58aca0</subsheetid><loginhibit /><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="71eeff42-400a-4827-9003-61399bbd4ec0" name="Set Table Cell Value" type="SubSheetInfo"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="144acb7e-c0ea-4870-9588-1e1d12935a8e" name="End" type="End"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><loginhibit /><display x="0" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="75792fd8-d387-4be8-96b9-05b6a240d922" name="CheckInstanceHandle" type="SubSheet"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><loginhibit /><display x="0" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>7bcad06a-9e42-4c2b-941c-fb66a76fde60</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="7bcad06a-9e42-4c2b-941c-fb66a76fde60" name="SetCell" type="Code"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><loginhibit /><display x="0" y="75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="documentname" expr="[documentname]" /><input type="number" name="TableNumber" expr="[Table Number]" /><input type="number" name="cellx" expr="[Cell x Number]" /><input type="number" name="celly" expr="[Cell y Number]" /><input type="text" name="CellValue" expr="[Value]" /></inputs><onsuccess>144acb7e-c0ea-4870-9588-1e1d12935a8e</onsuccess><code><![CDATA[
Dim doc as Object = GetDocument(handle,documentname)
doc.Tables.Item(TableNumber).Cell(celly,cellx).Range.Text = CellValue]]></code></stage><stage stageid="35ed0ea5-a2a7-4a92-a3a7-c9c817bc77cb" name="handle" type="Data"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="0baad10b-f2e3-4d40-8a3b-0fc6b52c05c9" name="documentname" type="Data"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="536f5aa3-617c-440e-9b06-997207b34dc9" name="Table Number" type="Data"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><loginhibit /><display x="-195" y="75" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="80acb91a-397b-48c7-bf67-f3a861b626e4" name="Cell x Number" type="Data"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><loginhibit /><display x="-195" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="62ad7203-c6fb-4198-b33e-b9c3734eef55" name="Cell y Number" type="Data"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><loginhibit /><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c9c145f5-9d12-4e84-b025-08cc8532ed87" name="Value" type="Data"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><loginhibit /><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="90489fc7-f75a-4870-9b72-b146515b522f" name="Start" type="Start"><subsheetid>8ddb9b98-da89-468a-b5a4-5eedf5a204ee</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="0" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="documentname" stage="documentname" /><input type="number" name="handle" stage="handle" /><input type="number" name="Table Number" narrative="The number of the table within the document" stage="Table Number" /><input type="number" name="Cell x Number" narrative="The x location number of the cell within the table (starts at 1)" stage="Cell x Number" /><input type="number" name="Cell y Number" narrative="The y location number of the cell within the table (starts at 1)" stage="Cell y Number" /><input type="text" name="Value" narrative="The value to set the cell to" stage="Value" /></inputs><onsuccess>75792fd8-d387-4be8-96b9-05b6a240d922</onsuccess></stage><stage stageid="98bd4479-501c-4af6-87b3-0e44102b30f1" name="Get Table Cell Value" type="SubSheetInfo"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="20a32c47-0bd7-438f-8bc9-cd34a9258f92" name="Start" type="Start"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="0" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="documentname" stage="documentname" /><input type="number" name="handle" stage="handle" /><input type="number" name="Table Number" narrative="The number of the table within the document" stage="Table Number" /><input type="number" name="Cell x Number" narrative="The x location number of the cell within the table (starts at 1)" stage="Cell x Number" /><input type="number" name="Cell y Number" narrative="The y location number of the cell within the table (starts at 1)" stage="Cell y Number" /></inputs><onsuccess>c02323b7-9f42-4a22-8729-fa65114b1a7b</onsuccess></stage><stage stageid="02dfaa1a-2b89-40d1-a9d8-ce53515dcc8a" name="End" type="End"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><loginhibit /><display x="0" y="165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Result" narrative="the cell contents" stage="result" /></outputs></stage><stage stageid="c02323b7-9f42-4a22-8729-fa65114b1a7b" name="CheckInstanceHandle" type="SubSheet"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><loginhibit /><display x="0" y="75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>10df1c8e-f6b2-4f55-a8e0-a14ac4a94d02</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="10df1c8e-f6b2-4f55-a8e0-a14ac4a94d02" name="GetCell" type="Code"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><loginhibit /><display x="0" y="120" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="documentname" expr="[documentname]" /><input type="number" name="TableNumber" expr="[Table Number]" /><input type="number" name="cellx" expr="[Cell x Number]" /><input type="number" name="celly" expr="[Cell y Number]" /></inputs><outputs><output type="text" name="result" stage="result" /></outputs><onsuccess>02dfaa1a-2b89-40d1-a9d8-ce53515dcc8a</onsuccess><code><![CDATA[Dim doc = GetDocument(handle,documentname)
Dim rg = doc.Tables(TableNumber).Cell(celly,cellx).Range
'The character at the end is used to mark end of cells in Word
rg.End = rg.End - 1
result = rg.Text]]></code></stage><stage stageid="876bd8c3-5bc4-4ce4-a349-8a07eea11a38" name="handle" type="Data"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="b16e011f-0e1b-45a0-8152-71f30d0a2bcc" name="documentname" type="Data"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ded21bd0-41c4-412f-b40f-b9c7946eea0e" name="result" type="Data"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><display x="-195" y="210" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ff923bf0-e2c8-49bf-a547-9c4624ceebc4" name="Table Number" type="Data"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><loginhibit /><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6752801f-8544-44e4-9eed-6159fe32331d" name="Cell x Number" type="Data"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><loginhibit /><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="815b9e66-4c61-42fb-9b19-d3d7f86aeac4" name="Cell y Number" type="Data"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><loginhibit /><display x="-195" y="120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e945f84a-1ffc-461e-a613-eafef2869044" name="Note2" type="Note"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Bold" color="000000" /></stage><stage stageid="fa36ded4-4caa-4238-8abc-6350ee0c945e" name="Note2" type="Note"><subsheetid>63dcd298-f559-4625-834f-f728c3391345</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-195" y="180" w="150" h="30" /><font family="Tahoma" size="10" style="Bold" color="000000" /></stage><stage stageid="ae82d62f-d1b2-4af1-977a-db5619d47797" name="ExportPDF" type="SubSheetInfo"><subsheetid>a54f1cbc-a023-4c2d-bf17-23169a3e685d</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b5725bdb-4fb0-4666-9975-83186b793e2e" name="Start" type="Start"><subsheetid>a54f1cbc-a023-4c2d-bf17-23169a3e685d</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" stage="filename" /><input type="text" name="documentname" stage="documentname" /><input type="number" name="handle" stage="handle" /></inputs><onsuccess>c4b70afa-f912-4ea4-91af-d05e2f73da34</onsuccess></stage><stage stageid="7df78cd1-d4d4-4f7f-b232-44da138f17fb" name="End" type="End"><subsheetid>a54f1cbc-a023-4c2d-bf17-23169a3e685d</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c4b70afa-f912-4ea4-91af-d05e2f73da34" name="CheckInstanceHandle" type="SubSheet"><subsheetid>a54f1cbc-a023-4c2d-bf17-23169a3e685d</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>5f267c84-0795-4a87-900f-b5028d73ec8a</onsuccess><processid>293ea206-e215-4639-a1d8-85d6fad4c062</processid></stage><stage stageid="5f267c84-0795-4a87-900f-b5028d73ec8a" name="ExportPDF" type="Code"><subsheetid>a54f1cbc-a023-4c2d-bf17-23169a3e685d</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="documentname" expr="[documentname]" /><input type="text" name="filename" expr="[filename]" /></inputs><onsuccess>7df78cd1-d4d4-4f7f-b232-44da138f17fb</onsuccess><code><![CDATA[Const wdExportFormatPDF As Integer = 17

Dim doc as Object = GetDocument(handle,documentname)
doc.ExportAsFixedFormat( _
  OutputFileName:=filename, _
  ExportFormat:=wdExportFormatPDF)
]]></code></stage><stage stageid="3bddbd67-c3d7-46ef-a6e9-3f2c78c00fe3" name="filename" type="Data"><subsheetid>a54f1cbc-a023-4c2d-bf17-23169a3e685d</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="540adde5-d599-4f0d-819b-1e875fcebcc7" name="documentname" type="Data"><subsheetid>a54f1cbc-a023-4c2d-bf17-23169a3e685d</subsheetid><display x="165" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="177dcef4-e724-431f-8af4-1eee1deecc09" name="handle" type="Data"><subsheetid>a54f1cbc-a023-4c2d-bf17-23169a3e685d</subsheetid><display x="225" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage></process></object>
        <object id="6f9680f1-616c-4884-b58c-42ed51446377" name="Utility - Collection Manipulation" xmlns="http://www.blueprism.co.uk/product/process"><process name="Utility - Collection Manipulation" version="6.9.0.26970" bpversion="6.10.1.35171" narrative="Utility functions for manipulating collections." byrefcollection="true" type="object" runmode="Background"><appdef><element name="Application Root"><id>b30f5d67-5c3c-49c9-8f9b-66d573097498</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="9a74af4c-280a-4e30-bdbb-21295b6256ca" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="53950e2c-2499-41fc-aed2-207a6c7431fd" type="Normal" published="False"><name>Utility Functions Test</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d8e5be7a-93aa-4322-99bf-00edea37bbc2" type="Normal" published="True"><name>Sort Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ffab882f-007c-48a5-8f84-8f5f1bfd4d6a" type="Normal" published="True"><name>Reverse Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="cd8fefb9-4622-4ea7-8287-e64b86d7e513" type="Normal" published="True"><name>Merge Collection</name><view><camerax>-100</camerax><cameray>3</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="76943739-36b9-46bc-8f95-e1b6342bc8a6" type="Normal" published="True"><name>Split Collection</name><view><camerax>0</camerax><cameray>-3</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a0cf6615-20c0-4910-9990-0f79f5f30bca" type="Normal" published="True"><name>Transpose Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a9f3108d-ca87-4551-b567-9c64ef05cf0c" type="Normal" published="True"><name>Filter Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e277cc2b-72b8-47e9-8a1b-e8530eb19a09" type="Normal" published="True"><name>Get Collection Fields</name><view><camerax>42</camerax><cameray>-4</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="4d41bfc8-e552-41ae-9e45-65dc3d1f7276" type="Normal" published="True"><name>Field Exists</name><view><camerax>144</camerax><cameray>-41</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="bcde64eb-f856-4440-a6c0-d83f40f0cf4b" type="Normal" published="True"><name>Rename Collection Fields</name><view><camerax>207</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="198ce3c6-ecbf-4203-a609-b15429defe0e" type="Normal" published="True"><name>Read Collection Field</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="05992810-1be4-4455-84e8-10579308ab87" type="Normal" published="True"><name>Set Collection Field</name><view><camerax>276</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="7a9aa259-fe07-4035-8411-23737559c975" type="Normal" published="True"><name>Collection Contains Field</name><view><camerax>0</camerax><cameray>168</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a" type="Normal" published="True"><name>Collection Contains Value</name><view><camerax>-93</camerax><cameray>-24</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="cdf2a7f1-a351-441a-8d36-bc92af66650a" type="Normal" published="True"><name>Copy Rows</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="51f694a8-5305-4a38-9b41-a98998f2f7ca" type="Normal" published="True"><name>Append Rows to Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a474299b-5c1c-4873-a3af-4dd0d3bd03ff" type="Normal" published="True"><name>Append Field (Text)</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="65451129-b7a2-4c2f-a12d-9086bd314f53" type="Normal" published="True"><name>Append Field (Number)</name><view><camerax>-100</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9" type="Normal" published="True"><name>Rename Field</name><view><camerax>-100</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="1d7b6202-d743-4485-9101-839f4651c406" type="Normal" published="True"><name>Delete Field</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="df662579-558c-4cc9-88df-8c680b67b41d" type="Normal" published="True"><name>Delete Column</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="3a772458-463d-46cf-8451-6cf5b4aeae30" type="Normal" published="True"><name>Remove Null Rows</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="b8e3b975-d485-49a3-b962-864d13a96e05" type="Normal" published="True"><name>Set Column Names From First Row</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="87541f35-d834-4d99-8fd3-16ec994a9990" type="Normal" published="True"><name>Set Column Names From Expected Collection</name><view><camerax>0</camerax><cameray>-62</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d1eee74f-1582-4c3e-96c8-b94f1535d7e1" type="Normal" published="True"><name>Fill Blanks</name><view><camerax>-195</camerax><cameray>-105</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="eb03a051-75a8-4093-a383-6c6fecfbb736" type="Normal" published="True"><name>Remove dots from headers</name><view><camerax>0</camerax><cameray>-43</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="fa6ed646-8ae1-479e-9845-b1dc9ac3b560" type="Normal" published="True"><name>Remove Empty Rows</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="d8c547cc-60d0-459b-876f-90bf696a5757" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><onsuccess>807e7d33-91e2-4241-a85e-ea0718fc487d</onsuccess></stage><stage stageid="807e7d33-91e2-4241-a85e-ea0718fc487d" name="End" type="End"><loginhibit /><display x="15" y="90" /></stage><stage stageid="1a8c9ebd-54e1-442f-a6c7-e87df3b59232" name="Stage1" type="ProcessInfo"><display x="-150" y="-105" w="180" h="90" /><references><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference><reference>Microsoft.VisualBasic.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Data</import><import>System.IO</import><import>System.XML</import><import>System.Diagnostics</import><import>Microsoft.VisualBasic</import><import>System.Data</import><import>system.text.regularexpressions</import><import>Microsoft.VisualBasic</import><import>System.Collections</import><import>System.Reflection</import></imports><language>visualbasic</language><globalcode><![CDATA[


]]></globalcode><code><![CDATA[Public CommonDictionary as New System.Collections.Generic.Dictionary(Of String, String)

Private Iterator as Generic.IEnumerator(Of String)

Function CloneColumn(col As DataColumn) As DataColumn
	Dim tp = col.GetType()
	Return TryCast(
		tp.GetMethod("Clone", BindingFlags.Instance Or BindingFlags.NonPublic).
			Invoke(col, Nothing),
		DataColumn
	)
End Function

Function GetStringValue(row As DataRow, fieldName As String) As String
	Dim col As DataColumn = row.Table.Columns(fieldName)
	Dim val = row(fieldName)
	Select Case True
		Case IsDateColumn(col)
			Return CDate(val).ToString("d") 
		Case IsTimeColumn(col)
			Return CDate(val).ToString("T")
		Case IsDateTimeColumn(col)
			Return CDate(val).ToString("G")
		Case Else
			Return CStr(val)
	End Select
End Function

Function GetBPType(col As DataColumn) As String
	If col Is Nothing Then Return Nothing
	If Not col.ExtendedProperties.ContainsKey("bptype") Then Return Nothing
	Return col.ExtendedProperties("bptype").ToString()
End Function

Function IsDateColumn(col as DataColumn) as Boolean
	Return (GetBPType(col) = "date")
End Function

Function IsTimeColumn(col as DataColumn) as Boolean
	Return (GetBPType(col) = "time")
End Function

Function IsDateTimeColumn(col as DataColumn) as Boolean
	Return (GetBPType(col) = "datetime")
End Function

Public Function GetDataTable(ByVal ColumnNamesCSV As String, ByVal ColumnTypesCSV As String) As DataTable

	Dim objTable As DataTable
	Dim objColumn As DataColumn
	Dim aColumnNames As String() = ColumnNamesCSV.Split(",")
	Dim aColumnTypes As String() = ColumnTypesCSV.Split(",")

	Try
		objTable = New DataTable
		For i As Integer = 0 To aColumnNames.Length - 1
			objColumn = New DataColumn 
			objColumn.DataType = System.Type.GetType(aColumnTypes(i).Trim)
			objColumn.ColumnName = aColumnNames(i).Trim
			objTable.Columns.Add(objColumn)
		Next
		
	Catch e As Exception
		objTable = nothing	
	End Try

	Return objTable

End Function


private function GetBluePrismDAtaType(DotNetType AS Type) As String
   Select Case True
      Case DotNetType.Equals(GetType(Timespan))
         return "timespan"
      Case DotNetType Is GetType(DAteTime)
         return "datetime"
      Case DotNetType Is GetType(Decimal), _
				DotNetType Is GetType(Integer), _
					DotNetType Is GetType(Double), _
						DotNetType Is GetType(Single)
         return "number"
      Case DotNetType Is GetType(System.Drawing.Bitmap)
         return "image"
      Case DotNetType Is GetType(Byte())
         return "binary"
      Case DotNetType Is GetType(Boolean)
         return "flag"
      Case DotNetType Is GetType(System.Data.DataTable)
         return "collection"
      Case Else
         return "text"
   End Select
End Function


Private Function CloneDataRow(R As DataRow, ColumnCount As Integer) As Object()
	Dim RetVal(ColumnCount - 1) As Object
	For I As Integer = 0 to ColumnCount - 1
		RetVal(I) = R(I)
	Next

	Return RetVal
End Function]]></code></stage><stage stageid="0bf7814a-647b-4bcb-b6a6-3d24dfd5b736" name="Clean Up" type="SubSheetInfo"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="0c56e2f8-68ce-48a3-97ad-81e1f076e9ce" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-150" y="60" w="180" h="230" /></stage><stage stageid="2271a79e-27e5-4434-b5be-146e02946317" name="new" type="Note"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="36451c72-b274-4817-a153-beb1e8a6e76a" name="Start" type="Start"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="-120" /><onsuccess>9a8c4505-8606-4a0c-b118-09a6b9932b3b</onsuccess></stage><stage stageid="9a8c4505-8606-4a0c-b118-09a6b9932b3b" name="End" type="End"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="90" /></stage><stage stageid="1d87c6c0-f260-46fc-99c2-ffcbf6ee0497" name="Sort Collection" type="SubSheetInfo"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><narrative>Sorts a collection according to the specified field.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="785a8eca-82a6-43fe-9f16-1803844d88ce" name="Start" type="Start"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have been sorted." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Collection" narrative="The collection to sort." stage="Collection In" /><input type="text" name="Sort Field" narrative="The field to sort by." stage="Sort Field" /><input type="flag" name="Ascending Order" narrative="True to sort in ascending order." stage="Ascending Order" /></inputs><onsuccess>fbac0e5c-5410-45f1-98d7-646797398b04</onsuccess></stage><stage stageid="0c95c136-f8cf-49a1-98c0-a4c1e2334eca" name="End" type="End"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Sorted Collection" narrative="The sorted collection." stage="Collection Out" /><output type="flag" name="Success" narrative="True if sorting was successful." stage="Success" /><output type="text" name="Message" narrative="An error message when sorting failed." stage="Message" /></outputs></stage><stage stageid="e8e991cc-351b-4484-9825-b5c1f0d894d1" name="Collection Out" type="Collection"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><loginhibit /><display x="-195" y="135" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="fbac0e5c-5410-45f1-98d7-646797398b04" name="Sort Collection" type="Code"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="collection" name="Collection" expr="[Collection In]" /><input type="text" name="Sort Field" expr="[Sort Field]" /><input type="flag" name="Ascending" expr="[Ascending Order]" /></inputs><outputs><output type="collection" name="Sorted Collection" stage="Collection Out" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>0c95c136-f8cf-49a1-98c0-a4c1e2334eca</onsuccess><code><![CDATA[Try

 

            If Ascending Then

                        Collection.DefaultView.Sort = Sort_Field & " ASC"

            Else

                        Collection.DefaultView.Sort = Sort_Field & " DESC"

            End If

 

            Sorted_Collection = Collection.DefaultView.ToTable

 

            Success = True

            Message = ""

 

Catch e As Exception

            Success = False

            Message = e.Message

End Try]]></code></stage><stage stageid="6f6e54f2-77b8-4f24-ae2f-46a2143d9815" name="Ascending Order" type="Data"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-195" y="60" w="150" h="30" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="2fb49db2-332e-4bdb-a52e-53546b2a25e8" name="Message" type="Data"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-195" y="210" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8170a296-23ef-4f36-88ea-12b93bc41486" name="Success" type="Data"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-195" y="180" w="150" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d46e7f41-9e7a-4a0a-b1be-d440d57e4020" name="Sort Field" type="Data"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-180" y="30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="adfd612b-98f8-4902-8526-2bda2e03f814" name="Get Collection Fields" type="SubSheetInfo"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><narrative>Creates a collection with a Name and Datatype field which is then populated using the incoming collections field names and data types.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="73b6f098-584e-441e-8b2d-e231b971bdb2" name="Start" type="Start"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="A new collection will be created containing the collections field data." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Input Collection" narrative="The collection to get the fields from." stage="Input Collection" /></inputs><onsuccess>39b91b36-f03d-4fa7-9bf2-47470e1d9703</onsuccess></stage><stage stageid="e2308e18-4f98-4f62-9ff6-a4c52222c3aa" name="End" type="End"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Collection Fields" narrative="A collection containing the fields." stage="Fields" /></outputs></stage><stage stageid="39b91b36-f03d-4fa7-9bf2-47470e1d9703" name="Get Collection Fields" type="Code"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Fields" stage="Fields" /></outputs><onsuccess>e2308e18-4f98-4f62-9ff6-a4c52222c3aa</onsuccess><code><![CDATA[Fields = New DataTable()
Fields.Columns.Add("Field Name", GetType(String))
Fields.Columns.Add("Data Type", GetType(String))

For Each Column As DataColumn In Input_Collection.Columns
   Dim DataType As String = GetBluePrismDataType(Column.DataType)
   Fields.Rows.Add(New Object() {Column.ColumnName, DataType})
Next
]]></code></stage><stage stageid="a16b1987-a205-4bf6-8a33-ed2167c201ff" name="Fields" type="Collection"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><display x="135" y="90" w="120" h="60" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Field Name" type="text" /><field name="Data Type" type="text" /></collectioninfo></stage><stage stageid="15198914-f283-4549-a823-c7b71d71d160" name="Utility Functions Test" type="SubSheetInfo"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="6b30836d-2593-48c6-a021-b6b3e92ad88a" name="Start" type="Start"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>f5830837-58db-473d-b7dc-4651a10f79c6</onsuccess></stage><stage stageid="5a5bf1e7-2072-4226-96ba-ab3d0a656589" name="End" type="End"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><loginhibit /><display x="15" y="90" /></stage><stage stageid="f5830837-58db-473d-b7dc-4651a10f79c6" name="Get Collection Fields" type="SubSheet"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><loginhibit /><display x="15" y="-30" w="90" h="30" /><inputs><input type="collection" name="Input Collection" expr="[Defined Collection 1]" /></inputs><outputs><output type="collection" name="Collection Fields" stage="Collection Fields" /></outputs><onsuccess>5a5bf1e7-2072-4226-96ba-ab3d0a656589</onsuccess><processid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</processid></stage><stage stageid="d402363f-8a48-4418-b0d9-2bef5037bc67" name="Input Collection" type="Collection"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><display x="90" y="-105" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="e8e6edcb-f2fe-4582-9037-5ddb4ca15572" name="Collection Fields" type="Collection"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><display x="105" y="-30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="980dd5f0-a047-4672-9a7a-18632a5826a0" name="Defined Collection 1" type="Collection"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><loginhibit /><display x="-150" y="-15" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="My Text Field" type="text" /><field name="My Number Field" type="number" /><field name="My DateTime Field" type="datetime" /><field name="My TimeSpan Field" type="timespan" /><field name="My Flag Field" type="flag" /><field name="My Image Field" type="image" /></collectioninfo><initialvalue><row><field name="My Text Field" type="text" value="Test Text" /><field name="My Number Field" type="number" value="5" /><field name="My DateTime Field" type="datetime" value="2009-07-23 01:46:26Z" /><field name="My TimeSpan Field" type="timespan" value="0.00:03:42" /><field name="My Flag Field" type="flag" value="True" /><field name="My Image Field" type="image" value="" /></row><row><field name="My Text Field" type="text" value="asdf" /><field name="My Number Field" type="number" value="10" /><field name="My DateTime Field" type="datetime" value="" /><field name="My TimeSpan Field" type="timespan" value="0.00:00:00" /><field name="My Flag Field" type="flag" value="False" /><field name="My Image Field" type="image" value="" /></row></initialvalue></stage><stage stageid="0e6f80ff-bfb9-4d47-8e5a-5299a5873467" name="Read Collection Field" type="SubSheetInfo"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><narrative>Reads a field with a given name and at the specified row from the collection.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="9d660720-4bed-4ea8-8ad6-56fa0b19cfb4" name="Start" type="Start"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="number" name="Row Index" narrative="The row index within the collection to read from. The index is from 0 to N-1 (where N is the total number of rows in the collection)." stage="Row Index" /><input type="collection" name="Collection" narrative="The collection to read." stage="Collection" /><input type="text" name="Field Name" narrative="The field within the collection to read." stage="Field Name" /></inputs><onsuccess>c4bf6e49-1d07-4d60-8b44-fd35a2009654</onsuccess></stage><stage stageid="2a6d86a8-8937-4d4b-9da4-32813d06a0bf" name="End" type="End"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="text" name="Value Read" narrative="The value of the requested field as text." stage="Value Read" /></outputs></stage><stage stageid="d43ae257-4559-4fa8-9b0b-1f49bd80a301" name="Row Index" type="Data"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><display x="90" y="-105" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bd207bc4-8fe0-4f01-94e6-b289cdb60e38" name="Collection" type="Collection"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><display x="225" y="-105" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="745ce225-df49-4b02-b12c-e9e2068ca6aa" name="Field Name" type="Data"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><display x="150" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c4bf6e49-1d07-4d60-8b44-fd35a2009654" name="Read Field" type="Code"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><loginhibit /><display x="15" y="0" w="90" h="30" /><inputs><input type="collection" name="Coll" expr="[Collection]" /><input type="text" name="FieldName" expr="[Field Name]" /><input type="number" name="RowIndex" expr="[Row Index]" /></inputs><outputs><output type="text" name="Value Read" stage="Value Read" /></outputs><onsuccess>2a6d86a8-8937-4d4b-9da4-32813d06a0bf</onsuccess><code><![CDATA[
If RowIndex < 0 OrElse Coll.Rows.Count <= RowIndex Then
	Throw New ApplicationException("The supplied row index falls outside of the valid range.")
End If

If Not Coll.Columns.Contains(FieldName) Then
   Throw New ApplicationException("The collection does not contain a field with the name '" & FieldName & "'")
End If

Value_Read = GetStringValue(Coll.Rows(RowIndex), FieldName)]]></code></stage><stage stageid="43376e9f-73fa-4757-affa-330da5d1e6b1" name="Value Read" type="Data"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><display x="105" y="0" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ee1c02ab-bf62-48df-b0de-79c4f254d5df" name="Set Collection Field" type="SubSheetInfo"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><narrative>Updates a single value in a collection by the given field name and row index.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="4fe6d4f3-e989-4636-b373-9a32fc41d450" name="Start" type="Start"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><loginhibit /><display x="120" y="-105" /><inputs><input type="number" name="Row Index" narrative="The index of the row in which to set the value. The index is from 0 to N-1 (where N is the total number of rows in the collection)." stage="Row Index" /><input type="collection" name="Collection" narrative="The collection in which to set the value." stage="Collection" /><input type="text" name="Field Name" narrative="The name of the field in which to set the value" stage="Field Name" /><input type="text" name="New Value" narrative="The value as text to set." stage="New Value" /></inputs><onsuccess>c7b9c9ed-85d9-4449-a150-5182797dc6f3</onsuccess></stage><stage stageid="2be33601-0c29-45c7-bc7e-1a5a8d1c19b2" name="End" type="End"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><loginhibit /><display x="120" y="90" /><outputs><output type="collection" name="Updated Collection" narrative="The collection which now has the value set." stage="Updated Collection" /></outputs></stage><stage stageid="e2d67695-6463-4e93-b5cd-e3b9805bb0cf" name="Row Index" type="Data"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="195" y="-105" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="26046a1c-efef-4b6b-baa7-1880ae887576" name="Collection" type="Collection"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="330" y="-105" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="9459f512-1cb5-4884-b551-4dcace90d77f" name="Field Name" type="Data"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="255" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c7b9c9ed-85d9-4449-a150-5182797dc6f3" name="Set Field" type="Code"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><loginhibit /><display x="120" y="0" w="90" h="30" /><inputs><input type="collection" name="Coll" expr="[Collection]" /><input type="text" name="FieldName" expr="[Field Name]" /><input type="number" name="RowIndex" expr="[Row Index]" /><input type="text" name="New Value" expr="[New Value]" /></inputs><outputs><output type="collection" name="Updated Collection" stage="Updated Collection" /></outputs><onsuccess>2be33601-0c29-45c7-bc7e-1a5a8d1c19b2</onsuccess><code><![CDATA[
If RowIndex < 0 OrElse Coll.Rows.Count <= RowIndex Then
	Throw New ApplicationException("The supplied row index falls outside of the valid range.")
End If

If Not Coll.Columns.Contains(FieldName) Then
   Throw New ApplicationException("The collection does not contain a field with the name '" & FieldName & "'")
End If

Coll.Rows(RowIndex)(FieldName) = New_Value

Updated_Collection = Coll]]></code></stage><stage stageid="2c198fde-25d6-4009-a434-256fd08044b1" name="New Value" type="Data"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="390" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="532e300d-c8f5-4049-9b1e-490a9a85884c" name="Updated Collection" type="Collection"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="195" y="90" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6164801d-51c0-428e-976d-23828f70767d" name="Collection Contains Field" type="SubSheetInfo"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><narrative>Tests a collection to see whether it contains a specific field.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="1ed16edd-07a7-459b-abc4-c29fc16117eb" name="Start" type="Start"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="Whether the collection contains the field will have been determined." /></postconditions><display x="15" y="-120" /><inputs><input type="collection" name="Input Collection" narrative="The collection to check." stage="Input Collection" /><input type="text" name="Field" narrative="The field to see if the collection has." stage="Field" /></inputs><onsuccess>a76de6a5-ad0f-42b0-8cea-1cc827be1d45</onsuccess></stage><stage stageid="15854162-6197-477a-873b-73c9b453d0d3" name="End" type="End"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="240" /><outputs><output type="flag" name="Success" narrative="True if the collection contains the field." stage="Success" /><output type="text" name="Error Message" narrative="Unused" stage="Error Message" /></outputs></stage><stage stageid="a76de6a5-ad0f-42b0-8cea-1cc827be1d45" name="Get Collection Fields" type="SubSheet"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="60" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Collection Fields" stage="Field Names" /></outputs><onsuccess>73ed00ea-d816-4343-8fe2-09924b85491f</onsuccess><processid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</processid></stage><stage stageid="09779833-6862-44cb-a355-04cb35350208" name="Input Collection" type="Collection"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="150" y="-120" w="120" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="1343f537-262d-4113-8953-31173a54fdf9" name="Field" type="Data"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="285" y="-120" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="73ed00ea-d816-4343-8fe2-09924b85491f" name="Loop Start Collection Fields" type="LoopStart"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="30" w="120" h="30" /><onsuccess>11a28026-8164-4066-97bb-6f7cc6a3f6de</onsuccess><groupid>53f9e518-2d0e-4a03-a2ac-5ffa45e0ab8a</groupid><looptype>ForEach</looptype><loopdata>Field Names</loopdata></stage><stage stageid="c2b21dab-e784-43a7-b09a-19e8bf2d5672" name="Loop End Collection Fields" type="LoopEnd"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="180" w="120" h="30" /><onsuccess>15854162-6197-477a-873b-73c9b453d0d3</onsuccess><groupid>53f9e518-2d0e-4a03-a2ac-5ffa45e0ab8a</groupid></stage><stage stageid="04208d31-4ee8-45a6-af69-2dd8140cc92a" name="Field Names" type="Collection"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="150" y="-45" w="120" h="60" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Field Name" type="text" /><field name="Data Type" type="text" /></collectioninfo></stage><stage stageid="d010b7fb-5d33-4636-bea8-2195b0f22738" name="Success" type="Data"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="135" y="240" w="120" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="ac2d5cc5-ddee-4785-bf6a-410b0e478722" name="Error Message" type="Data"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="240" y="240" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="11a28026-8164-4066-97bb-6f7cc6a3f6de" name="Match?" type="Decision"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="105" w="60" h="60" /><decision expression="[Field Names.Field Name] = Trim([Field])" /><ontrue>95c39a4f-2e55-45cb-a622-5cdec6b2d75b</ontrue><onfalse>c2b21dab-e784-43a7-b09a-19e8bf2d5672</onfalse></stage><stage stageid="6bd78de4-b21e-4741-af66-a88c72496d0f" name="anchor2" type="Anchor"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="-120" y="240" w="10" h="10" /><onsuccess>15854162-6197-477a-873b-73c9b453d0d3</onsuccess></stage><stage stageid="95c39a4f-2e55-45cb-a622-5cdec6b2d75b" name="Set Success" type="Calculation"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="-120" y="105" w="90" h="60" /><onsuccess>6bd78de4-b21e-4741-af66-a88c72496d0f</onsuccess><calculation expression="True" stage="Success" /></stage><stage stageid="e6748536-1050-482b-86e6-cd57cce3bc6d" name="Copy Rows" type="SubSheetInfo"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><narrative>Copies the rows of the given collection into a new collection.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="46e0886c-ea0a-4778-ad1e-9b7878e04a43" name="Append Rows to Collection" type="SubSheetInfo"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><narrative>Combines two collections into one, provided they share the same set of fields</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="d3ec306e-f0c9-4bbc-a4da-a38b21969f5c" name="Reverse Collection" type="SubSheetInfo"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><narrative>Reverses the order of the rows in the collection.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="98b20289-3b73-4776-9912-d679291e392e" name="Reverse Collection" type="Code"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><loginhibit /><display x="15" y="-30" /><inputs><input type="collection" name="CollectionIn" expr="[Collection In]" /></inputs><outputs><output type="collection" name="CollectionOut" stage="Collection Out" /></outputs><onsuccess>661b2b7b-7862-4db1-b71c-747437b534da</onsuccess><code><![CDATA[If CollectionIn.Columns.Count = 0 Then Throw new ApplicationException("Zero columns in collection")

CollectionOut = CollectionIn.Clone()

For I As integer = CollectionIn.Rows.Count - 1 To 0 Step -1
	Dim Objs(CollectionIn.Columns.Count - 1) As Object
	For J As integer = 0 to CollectionIn.Columns.Count - 1
		Objs(J) = collectionIn.Rows(I)(J)
	Next
	CollectionOut.Rows.Add(Objs)
Next]]></code></stage><stage stageid="48fd9b49-12a4-490d-8741-7cb0e6de6ac2" name="Collection In" type="Collection"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><display x="135" y="-105" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /><initialvalue><row><field name="CIS" type="number" value="1" /><field name="Sort Code" type="text" value="123456" /><field name="Account Number" type="text" value="12345678" /><field name="Balance" type="number" value="1" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="3" /><field name="Sort Code" type="text" value="223456" /><field name="Account Number" type="text" value="22345678" /><field name="Balance" type="number" value="2" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="2" /><field name="Sort Code" type="text" value="323456" /><field name="Account Number" type="text" value="32345678" /><field name="Balance" type="number" value="3" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="5" /><field name="Sort Code" type="text" value="423456" /><field name="Account Number" type="text" value="42345678" /><field name="Balance" type="number" value="4" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="6" /><field name="Sort Code" type="text" value="523456" /><field name="Account Number" type="text" value="52345678" /><field name="Balance" type="number" value="5" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="4" /><field name="Sort Code" type="text" value="623456" /><field name="Account Number" type="text" value="62345678" /><field name="Balance" type="number" value="6" /><field name="Cancelled Items" type="text" value="" /></row></initialvalue></stage><stage stageid="862d18c4-1bd0-4542-b3e2-8baf8a977af8" name="Start" type="Start"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have been sorted." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Collection" narrative="The collection to be reversed." stage="Collection In" /></inputs><onsuccess>98b20289-3b73-4776-9912-d679291e392e</onsuccess></stage><stage stageid="661b2b7b-7862-4db1-b71c-747437b534da" name="End" type="End"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><loginhibit /><display x="15" y="60" /><outputs><output type="collection" name="Reversed Collection" narrative="The reversed collection." stage="Collection Out" /></outputs></stage><stage stageid="1965b145-70ec-4ee0-a936-3c32f57e587e" name="Collection Out" type="Collection"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><loginhibit /><display x="150" y="45" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="ca7dbfca-b97f-43d4-9601-6fa4d4eacc4b" name="Rename Collection Fields" type="SubSheetInfo"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><narrative>Renames the fields of a collection based on the fields of a given name mapping collection.</narrative><display x="-60" y="-105" w="150" h="90" /></stage><stage stageid="be8b9084-5d06-424d-8086-89d565e39887" name="Start" type="Start"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection fields will have been renamed." /></postconditions><display x="105" y="-105" /><inputs><input type="collection" name="Main Collection" narrative="The main collection, whose headers are to be modified" stage="Main Collection" /><input type="collection" name="New Headers" narrative="A collection of new headers. This must be a one-row collection matching the fields of the first. The first row will contain the new field names under the corresponding field names" stage="New Headers" /></inputs><onsuccess>2dfc16b3-737a-4ff7-9843-9e66c78b23d4</onsuccess></stage><stage stageid="7eadbd5a-bba1-4128-ac2a-9bbe81d6ec77" name="End" type="End"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><loginhibit /><display x="105" y="120" /><outputs><output type="collection" name="Amended Collection" stage="Amended Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs></stage><stage stageid="5c64c0b3-6819-410a-be71-587501d42504" name="New Headers" type="Collection"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="375" y="-90" w="150" h="90" /><datatype>collection</datatype><private /><alwaysinit /><initialvalue><row><field name="Column 1" type="text" value="Name" /><field name="Column 2" type="text" value="Age" /></row></initialvalue></stage><stage stageid="2dfc16b3-737a-4ff7-9843-9e66c78b23d4" name="Rename Headers" type="Code"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><loginhibit /><display x="105" y="0" w="150" h="60" /><inputs><input type="collection" name="Main Collection" expr="[Main Collection]" /><input type="collection" name="New Headers" expr="[New Headers]" /></inputs><outputs><output type="collection" name="Amended Collection" stage="Amended Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>7eadbd5a-bba1-4128-ac2a-9bbe81d6ec77</onsuccess><code><![CDATA[If Main_Collection IsNot Nothing AndAlso New_Headers IsNot Nothing Then
	If Main_Collection.Columns.Count = New_Headers.Columns.count Then
		For Each Col1 As DataColumn In Main_Collection.Columns
			If Not New_Headers.Columns.Contains(Col1.ColumnName) Then
				Success = False
				Error_Message = "New Headers collection does not contain the field '" & Col1.ColumnName & "' found in the Main Collection"
				Exit Sub
			End If
		Next

		'We can now assume that fields match
		'and start copying rows
		For Each C As DataColumn In Main_Collection.Columns
			Dim NewName As String = Cstr(New_Headers.Rows(0)(C.ColumnName))
			If String.IsNullOrEmpty(NewName) Then
				Throw New ApplicationException("Blank field names are not acceptable")
			Else
				C.ColumnName = Trim(NewName)
			End If
		Next

		Main_Collection.AcceptChanges()
		Amended_Collection = Main_Collection
		Success = True
	Else
		Success = False
		Error_Message = "Collection field definitions do not match - the number of columns in each is different."
	End If
Else
	Success = False
	Error_Message = "Neither Collection may be null"
End If]]></code></stage><stage stageid="73981b01-1a93-4c6e-a35f-fa6c194f63ec" name="Success" type="Data"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="240" y="120" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="73dcc958-035e-40f7-ab25-a8f22d06bf4f" name="Error Message" type="Data"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="180" y="120" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0af7f983-37fd-47c4-971a-5c0ca70b60c4" name="Main Collection" type="Collection"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="210" y="-90" w="150" h="90" /><datatype>collection</datatype><private /><alwaysinit /><initialvalue><row><field name="Column 1" type="text" value="asdf" /><field name="Column 2" type="text" value="34" /></row></initialvalue></stage><stage stageid="e86fffbd-3537-4ed9-9e32-20c8f55b6cb6" name="Amended Collection" type="Collection"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="360" y="120" w="150" h="90" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6b6aa002-ceed-4ea9-ab37-e3cc338e349c" name="Collection Contains Value" type="SubSheetInfo"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><narrative>Searches for the existence of a value or a regular expression in a specified column in a collection. This will return true and, if a regular expression was provided, the groups defined in that regex for the first matched value it finds in the collection.</narrative><display x="-255" y="-105" w="270" h="90" /></stage><stage stageid="29ece439-17ef-4972-aa97-b373f2d68616" name="Start" type="Start"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><preconditions><condition narrative="A collection exists with the specified column name which may or may not contain a particular value" /><condition narrative="The collection being searched has no date or time columns (A code stage restriction)" /><condition narrative="" /><condition narrative="" /></preconditions><postconditions><condition narrative="No change" /></postconditions><narrative>Note that if neither 'Exact Value' nor 'Regex' are supplied, this will always return FALSE / ie. not found. If a match is found, groups will return all of the groups specified in the regular expression when applied to the value found.</narrative><display x="-30" y="-135" /><inputs><input type="collection" name="Collection" narrative="Required : The collection to search" stage="Collection" /><input type="text" name="Column Name" narrative="Required : The name of the column to search" stage="Column Name" /><input type="text" name="Exact Value" narrative="Optional : The exact value to search for - this is case insensitive" stage="Exact Value" /><input type="text" name="Regex" narrative="Optional : The regular expression to search for - this is case sensitive unless specified otherwise in the regular expression using &quot;(?i)&quot;" stage="Regex" /></inputs><onsuccess>aa1a4d89-5218-4bbe-a743-0d3484968cb6</onsuccess></stage><stage stageid="ebc6a036-6449-4acd-ac3c-bf1c0cdb652a" name="End" type="End"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="-30" y="90" /><outputs><output type="flag" name="Contains Search Term" narrative="Flag indicating if the collection found the given search term or not" stage="Contains Search Term" /><output type="collection" name="Groups" narrative="The groups defined in the regular expression when it is applied to the found term" stage="Groups" /></outputs></stage><stage stageid="63287049-53dd-4e10-b6fa-809c255a8f63" name="Collection" type="Collection"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-330" y="0" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="14def48d-230f-4041-99c7-0af7c0dd5e0f" name="Column Name" type="Data"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-330" y="30" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="965f0a82-f3be-4fcf-b43d-33b5a31b45d1" name="Exact Value" type="Data"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-330" y="60" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f2df8ab8-a7dc-408c-962c-efe2dd44d403" name="Regex" type="Data"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-330" y="90" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6c87975d-a017-4b35-923d-19816f41b5b3" name="Contains Search Term" type="Data"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-180" y="0" w="120" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="f7c0f14b-16b5-4e13-b3e9-71fd7bf59990" name="Groups" type="Collection"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-180" y="30" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Group" type="text" /></collectioninfo></stage><stage stageid="ca62b1b4-f73d-422a-b21a-ac4cfcc71041" name="Note2" type="Note"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-330" y="-30" w="120" h="30" /></stage><stage stageid="86ee4f07-c603-44e1-b307-e53cd7d9eff4" name="Note2" type="Note"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-180" y="-30" w="120" h="30" /></stage><stage stageid="a408f364-ecb4-4548-9556-57f4a26f3ada" name="Both Search Strings Empty?" type="Decision"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="-30" y="-30" w="120" h="30" /><decision expression="Len([Exact Value]) = 0 AND Len ([Regex]) = 0" /><ontrue>612f50dc-0fcc-4765-800b-e65e5bf3861f</ontrue><onfalse>7cdc88ed-891c-4f88-a51d-2da37bd56d4d</onfalse></stage><stage stageid="aa1a4d89-5218-4bbe-a743-0d3484968cb6" name="Trim Search Strings" type="MultipleCalculation"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="-30" y="-75" w="120" h="30" /><onsuccess>a408f364-ecb4-4548-9556-57f4a26f3ada</onsuccess><steps><calculation expression="Trim([Exact Value])" stage="Exact Value" /><calculation expression="Trim([Regex])" stage="Regex" /></steps></stage><stage stageid="612f50dc-0fcc-4765-800b-e65e5bf3861f" name="anchor3" type="Anchor"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="75" y="-30" w="10" h="10" /><onsuccess>7e121ceb-3f72-4655-8e21-38d3e5be7cec</onsuccess></stage><stage stageid="7e121ceb-3f72-4655-8e21-38d3e5be7cec" name="anchor4" type="Anchor"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="75" y="90" w="10" h="10" /><onsuccess>ebc6a036-6449-4acd-ac3c-bf1c0cdb652a</onsuccess></stage><stage stageid="7cdc88ed-891c-4f88-a51d-2da37bd56d4d" name="Search Collection" type="Code"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="-30" y="30" w="120" h="30" /><inputs><input type="collection" name="coll" expr="[Collection]" /><input type="text" name="colname" expr="[Column Name]" /><input type="text" name="exactVal" expr="[Exact Value]" /><input type="text" name="regexVal" expr="[Regex]" /></inputs><outputs><output type="flag" name="found" stage="Contains Search Term" /><output type="collection" name="groups" stage="Groups" /></outputs><onsuccess>ebc6a036-6449-4acd-ac3c-bf1c0cdb652a</onsuccess><code><![CDATA[If Not Coll.Columns.Contains(colname) Then
  Throw New ApplicationException(String.Format( _
   "The collection does not contain a field " & _
   "with the name '{0}'", colname))
End If

Dim rx as Regex
If Not String.IsNullOrEmpty(exactVal) Then
  rx = New Regex("^" & Regex.Escape(exactVal) & "$", RegexOptions.IgnoreCase)
Else
  ' If ignore case is required it can be inlined using "(?i)..rest of search"
  rx = New Regex(regexVal)
End If

' Initialise output params
found = False
groups = New DataTable()
groups.Columns.Add("Group", GetType(String))

For Each row as DataRow in coll.Rows

  Dim val as String = CStr(row(colname))
  Dim m as Match = rx.Match(val)
  If m.Success Then
    found = True
    For i as Integer = 1 to m.Groups.Count-1
      groups.Rows.Add(New Object() {m.Groups(i).Value})
    Next
    Return
  End If

Next]]></code></stage><stage stageid="365e481a-8567-48cf-babf-40039e151df7" name="Delete Column" type="SubSheetInfo"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><narrative>Deletes a field from a collection.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="4421e0d9-6181-4872-aa85-8ad310427d30" name="Start" type="Start"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collections field will have been removed." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Input Collection" narrative="The collection from which you want to delete a column from" stage="Input Collection" /><input type="text" name="Column Name" narrative="The column number to delete" stage="Column Name" /></inputs><onsuccess>000581d7-9978-4295-826f-a20472874878</onsuccess></stage><stage stageid="d0f8de6d-03ac-4a92-8658-0998d1849bdf" name="End" type="End"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Output Collection" narrative="A collection with a column removed" stage="Output Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Message" /></outputs></stage><stage stageid="000581d7-9978-4295-826f-a20472874878" name="Remove Column" type="Code"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><loginhibit /><display x="15" y="-15" w="150" h="30" /><inputs><input type="collection" name="BP Collection In" expr="[Input Collection]" /><input type="text" name="Column Name" expr="[Column Name]" /></inputs><outputs><output type="collection" name="BP Collection Out" stage="Output Collection" /><output type="text" name="Error Message" stage="Message" /><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>d0f8de6d-03ac-4a92-8658-0998d1849bdf</onsuccess><code><![CDATA[Try
	BP_Collection_Out = BP_Collection_In
	BP_Collection_Out.Columns.Remove(Column_Name)
	Success = True
Catch e as Exception
	Error_Message = e.ToString()
	Success = False
End Try
]]></code></stage><stage stageid="140b41b2-3138-4b5d-b5f3-4bddff6db48f" name="Input Collection" type="Collection"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="120" y="-105" w="90" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="1ae60809-2da8-468d-8d88-e605b185530b" name="Output Collection" type="Collection"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="120" y="90" w="90" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="787dae64-5d33-4783-84ff-db2365c12e31" name="Message" type="Data"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="-180" y="90" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a3216578-e35c-4bf0-84db-80b9d3fe07e3" name="Success" type="Data"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="-180" y="60" w="150" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="714ec185-fd95-4265-88e6-54eb452242b3" name="Column Name" type="Data"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="210" y="-105" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="25782854-2b5d-4f7d-a1f4-671555060370" name="Remove Null Rows" type="SubSheetInfo"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><narrative>Deletes rows in which a given key field is blank.</narrative><display x="-180" y="-105" w="150" h="90" /></stage><stage stageid="7b68a8ca-8280-464d-acac-807f219d226e" name="Set Column Names From First Row" type="SubSheetInfo"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><narrative>If you have a collection with the column names all in the first row, this will set the column names to the values in that row and then detete the first row.
Handy for collections read using Get Table</narrative><display x="-195" y="-105" w="270" h="60" /></stage><stage stageid="966db302-1751-4a8a-bbbf-cbfc8ff28563" name="Start" type="Start"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="collection" name="Input Collection" narrative="The collection with the column to rename" stage="Input Collection" /></inputs><onsuccess>5732b352-4376-4727-b423-13df1e00f900</onsuccess></stage><stage stageid="80cc4a73-fa55-4504-bf38-941a29fd4499" name="End" type="End"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="15" y="120" /><outputs><output type="collection" name="Output Collection" narrative="The amended collection" stage="Output Collection" /></outputs></stage><stage stageid="5732b352-4376-4727-b423-13df1e00f900" name="Set Column Name" type="Code"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="30" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Output Collection" stage="Output Collection" /></outputs><onsuccess>1129bf72-f0d4-4c3a-8823-68de39f5138b</onsuccess><code><![CDATA[
'Input_Collection.Columns(3).ColumnName="NewColumnName"
'Output_Collection = Input_Collection

Dim iThisColumn as integer = -1
For Each Column As DataColumn In Input_Collection.Columns
   iThisColumn +=1
   Column.ColumnName=CStr(Input_Collection.Rows.Item(0).Item(iThisColumn))
Next
Output_Collection = Input_Collection

'If RowIndex < 0 OrElse Coll.Rows.Count <= RowIndex Then
'	Throw New ApplicationException("The supplied row index falls outside of the valid range.")
'End If

'If Not Coll.Columns.Contains(FieldName) Then
'   Throw New ApplicationException("The collection does not contain a field with the name '" & FieldName & "'")
'End If

'Value_Read = CStr(Coll.Rows(RowIndex)(FieldName))]]></code></stage><stage stageid="83beff52-ce08-4f4c-acdd-39a43fce3528" name="Input Collection" type="Collection"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><display x="120" y="-105" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="0735b980-7ff2-49c5-a67b-41a6444db630" name="Output Collection" type="Collection"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><display x="120" y="105" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="299628df-bec6-4f77-8b4a-c6bc38824e1c" name="Remove First Row" type="Action"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><narrative>First row was actually the header row, can now be deleted</narrative><display x="15" y="60" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Output Collection&quot;" /></inputs><onsuccess>80cc4a73-fa55-4504-bf38-941a29fd4499</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Remove Row" /></stage><stage stageid="1129bf72-f0d4-4c3a-8823-68de39f5138b" name="Output Collection" type="LoopStart"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="15" y="0" /><onsuccess>299628df-bec6-4f77-8b4a-c6bc38824e1c</onsuccess><groupid>265b5de8-c5fa-44dc-bcd0-64db001c133a</groupid><looptype>ForEach</looptype><loopdata>Output Collection</loopdata></stage><stage stageid="35a49bfb-e611-4681-b332-cadbcfa74fc3" name="Output Collection" type="LoopEnd"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="-60" y="60" /><onsuccess>d0febcf9-b538-4995-85c1-02dddff5fb51</onsuccess><groupid>265b5de8-c5fa-44dc-bcd0-64db001c133a</groupid></stage><stage stageid="d0febcf9-b538-4995-85c1-02dddff5fb51" name="anchor1" type="Anchor"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="-60" y="120" w="10" h="10" /><onsuccess>80cc4a73-fa55-4504-bf38-941a29fd4499</onsuccess></stage><stage stageid="7b3c5ed5-f585-4240-a2ab-8cb996684c24" name="Set Column Names From Expected Collection" type="SubSheetInfo"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><narrative>Renames the fields of a collection to those of a collection containing expected field names.</narrative><display x="-180" y="-210" w="150" h="90" /></stage><stage stageid="ae4a6ef5-a22c-4292-8471-eb02cdd4b1cf" name="End" type="End"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Output Collection" narrative="The collection with the renamed column" stage="Output Collection" /></outputs></stage><stage stageid="130f8b77-3ec8-46c9-8826-e401399e4c92" name="Rename Column" type="Code"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="30" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /><input type="collection" name="Expected Fields/Columns" expr="[Expected Fields/Columns]" /></inputs><outputs><output type="collection" name="Output Collection" stage="Output Collection" /></outputs><onsuccess>ae4a6ef5-a22c-4292-8471-eb02cdd4b1cf</onsuccess><code><![CDATA[Dim iTotalColumns as integer = Expected_Fields_Columns.Rows.Count-1
Dim iThisColumn as integer = -1
For Each Column As DataColumn In Input_Collection.Columns
   If iThisColumn>=iTotalColumns Then Exit For
   iThisColumn +=1 
   Column.ColumnName=CStr(Expected_Fields_Columns.Rows.Item(iThisColumn).Item(0))
Next
Output_Collection = Input_Collection]]></code></stage><stage stageid="9e32e67d-d7f9-46b2-8df2-6fca9a395352" name="Input Collection" type="Collection"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><display x="-180" y="-75" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="c66d8d30-cef9-4cab-8ee8-2acb512a3129" name="Start" type="Start"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection fields will have been renamed." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Input Collection" narrative="The collection with the column to rename" stage="Input Collection" /><input type="collection" name="Expected Fields/Columns" narrative="The expected column names" stage="Expected Fields/Columns" /></inputs><onsuccess>130f8b77-3ec8-46c9-8826-e401399e4c92</onsuccess></stage><stage stageid="c865f7af-a9f9-4fb9-88da-e04e43b0bac8" name="Note1" type="Note"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-180" y="-120" w="150" h="30" /></stage><stage stageid="c29dd25d-3cf7-4435-ba56-6f735329a71a" name="Output Collection" type="Collection"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><display x="-180" y="135" w="150" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="235be3b3-8a37-4bac-b740-50cfcd6da05f" name="Note1" type="Note"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-180" y="105" w="150" h="30" /></stage><stage stageid="688d2271-65ed-4be7-84b1-cbfe018c6777" name="Expected Fields/Columns" type="Collection"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><display x="-180" y="-15" w="150" h="60" /><datatype>collection</datatype><alwaysinit /><collectioninfo><field name="Column Name" type="text" /></collectioninfo></stage><stage stageid="df1f7e11-20da-4f67-a68c-bc7c03be861a" name="Fill Blanks" type="SubSheetInfo"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><narrative>Fills a collection that has empty values with empty text.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="7908b17c-920d-4114-9fa0-cd4f161c5185" name="Start" type="Start"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have its empty values filled with empty text." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Blanks" narrative="A collection with blank text fields" stage="Blanks" /></inputs><onsuccess>06913dc6-a17f-4d64-965d-7cb7642f486f</onsuccess></stage><stage stageid="544cc959-75ad-4b6c-a150-ce414ae50424" name="End" type="End"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><loginhibit /><display x="15" y="75" /><outputs><output type="collection" name="No Blanks" narrative="The collection with empty string instead of blanks" stage="No Blanks" /></outputs></stage><stage stageid="34873761-d9a4-4a71-9c63-993645ca4e22" name="Blanks" type="Collection"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><display x="-195" y="0" w="150" h="90" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="5cfec416-7db4-4734-9a1f-76d62db9bbd9" name="No Blanks" type="Collection"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><display x="-195" y="105" w="150" h="90" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="06913dc6-a17f-4d64-965d-7cb7642f486f" name="Fill Blanks" type="Code"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="collection" name="Blanks" expr="[Blanks]" /></inputs><outputs><output type="collection" name="No Blanks" stage="No Blanks" /></outputs><onsuccess>544cc959-75ad-4b6c-a150-ce414ae50424</onsuccess><code><![CDATA[try
  for each dr as datarow in blanks.rows
    for each c as datacolumn in blanks.columns
      if isdbnull(dr(c.columnname)) then
        dr(c.columnname) = ""
      end if
    next
  next
  no_blanks = blanks
catch e as exception

end try]]></code></stage><stage stageid="c491f60e-4aa7-4abb-a203-5a78c0b64469" name="End" type="End"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Output Collection" narrative="The given input collection with all the null rows removed" stage="Output Collection" /></outputs></stage><stage stageid="c8499a69-da78-40b1-9e30-3b2b66b78a63" name="Start" type="Start"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The rows with blank keys will have been deleted." /><condition narrative="" /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Input Collection" narrative="The collection from which you want null rows to be removed" stage="Input Collection" /><input type="text" name="Key Field" narrative="The key field to check, if blank the row will be deleted.  The field that is referred to as the key field in the collection must be a text data type as well." stage="Key Field" /></inputs><onsuccess>85077240-20a2-46ad-81ba-a1eca720ae81</onsuccess></stage><stage stageid="e14452d8-589d-478a-ab1b-309897b8560b" name="End" type="End"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Output Collection" narrative="The given input collection with all the null rows removed" stage="Output Collection" /></outputs></stage><stage stageid="13091eb3-458e-46d2-a20e-59eb5eb5d748" name="Input Collection" type="Collection"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="120" y="-105" w="90" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6ab2855e-0511-49ff-ac26-c731dbf8c432" name="Output Collection" type="Collection"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="120" y="90" w="90" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="cab44f8f-583a-4529-911c-392030a2dee3" name="Message" type="Data"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="-165" y="15" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e1203642-ce03-48bd-ba00-aad2a0dcde1e" name="Success" type="Data"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="-165" y="-15" w="150" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1478eda2-b43b-4609-aef4-ff3ad3c2a708" name="Key Field" type="Data"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="225" y="-105" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="85077240-20a2-46ad-81ba-a1eca720ae81" name="Remove Null rows from collection" type="Code"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><narrative>can't loop through the core customer details table collection as some of the rows are NULL.</narrative><display x="15" y="-45" w="150" h="30" /><inputs><input type="collection" name="CCD Table In" expr="[Input Collection]" /><input type="text" name="Key Field" expr="[Key Field]" /></inputs><outputs><output type="collection" name="CCD Table Out" stage="Output Collection" /><output type="text" name="Error Message" stage="Message" /><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>2e050fc0-fed0-49b4-bafc-a33a0aee5ad9</onsuccess><code><![CDATA[Try
CCD_Table_In.AcceptChanges()

	For Each row As DataRow in CCD_Table_In.Rows
			If String.IsNullOrEmpty(row(Key_Field).ToString().Trim()) Then
				row.Delete()
			End If
	Next

CCD_Table_In.AcceptChanges()

	CCD_Table_Out = CCD_Table_In
	Success = True

Catch ex as Exception
	Error_Message = ex.ToString()
	Success = False
End Try

]]></code></stage><stage stageid="9e92c3e9-666f-47a3-b5a4-712191368127" name="Remove dots from headers" type="SubSheetInfo"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><narrative>Collections with dots in the field names cannot be properly indexed so this functinon renames the headers so that the fields contain no dots.</narrative><display x="-165" y="-195" w="150" h="90" /></stage><stage stageid="9e9143b5-5aa7-475d-a944-466bfbc2c71d" name="Rename Column1" type="Code"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><display x="0" y="-15" w="90" h="30" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Output Collection" stage="Output Collection" /></outputs><onsuccess>ce865562-7be4-4739-95c5-3b5e05d7901f</onsuccess><code><![CDATA[For Each Column As DataColumn In Input_Collection.Columns
   Column.ColumnName=Microsoft.Visualbasic.Replace(Column.ColumnName,".","")
Next
Output_Collection = Input_Collection]]></code></stage><stage stageid="ce865562-7be4-4739-95c5-3b5e05d7901f" name="End" type="End"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><display x="0" y="90" /><outputs><output type="collection" name="Output Collection" narrative="The collection with the renamed column" stage="Output Collection" /></outputs></stage><stage stageid="c2200054-2838-45a0-a8b2-c1da235391b0" name="Input Collection" type="Collection"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><display x="-195" y="-75" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="c865c672-39f2-4b5d-b96c-f44c5f3b9a89" name="Start" type="Start"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have fields with no dots." /></postconditions><display x="0" y="-105" /><inputs><input type="collection" name="Input Collection" narrative="The collection with the column to rename" stage="Input Collection" /></inputs><onsuccess>9e9143b5-5aa7-475d-a944-466bfbc2c71d</onsuccess></stage><stage stageid="02864eb4-432c-4b37-9199-c28dd7fe654b" name="Note1" type="Note"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-195" y="-120" w="150" h="30" /></stage><stage stageid="99cb4759-fd39-4084-a262-e2ac589fdc28" name="Output Collection" type="Collection"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><display x="-195" y="135" w="150" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="c1388967-ebc6-462c-bad7-66359084fab0" name="Note1" type="Note"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-195" y="105" w="150" h="30" /></stage><stage stageid="4e265aee-0021-418d-8655-61d995e170a0" name="Append Field (Text)" type="SubSheetInfo"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><narrative>Appends a field to a collection and allows you to provide a default value as text fot the field.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="c8bd0a3b-3343-43fd-bef7-1414593f62b6" name="Field Name" type="Data"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><display x="-195" y="30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ddaf3d76-462d-41ac-8cdd-92050ea01b79" name="Append Text" type="Code"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="collection" name="Collection" expr="[Collection In]" /><input type="text" name="Column" expr="[Field Name]" /><input type="text" name="Value" expr="[Value]" /></inputs><outputs><output type="collection" name="New Collection" stage="Collection Out" /></outputs><onsuccess>072e40e3-3858-4528-aa1b-7b4cfb7861f9</onsuccess><code><![CDATA[
If Not Collection.Columns.Contains(Column) Then
	Collection.Columns.Add(Column, Type.GetType("System.String"))
End If

For Each dr As System.Data.DataRow In Collection.Rows
	dr(Column) = Value
Next

New_Collection = Collection
]]></code></stage><stage stageid="7c2f4495-6f2c-4dc5-845c-58f3036c5ec9" name="Collection Out" type="Collection"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><display x="-195" y="120" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="8493982d-24c5-4d6b-96c0-060ed614f8c3" name="Collection In" type="Collection"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><display x="-195" y="-15" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6542d3cd-7831-4ebb-93dc-09b64ff85bbf" name="Value" type="Data"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><display x="-195" y="60" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6c1475ad-07b2-4993-abb1-4060046ce8eb" name="Start" type="Start"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have a new field appended to it." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Collection" narrative="The collection to append a field to." stage="Collection In" /><input type="text" name="Field Name" narrative="The name of the new field." stage="Field Name" /><input type="text" name="Value" narrative="The value to be put in the new field." stage="Value" /></inputs><onsuccess>ddaf3d76-462d-41ac-8cdd-92050ea01b79</onsuccess></stage><stage stageid="072e40e3-3858-4528-aa1b-7b4cfb7861f9" name="End" type="End"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Appended Collection" narrative="The collection with field appended." stage="Collection Out" /></outputs></stage><stage stageid="4c0d7072-e36c-465b-89f0-fbe7e21e95fb" name="Append Field (Number)" type="SubSheetInfo"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><narrative>Appends a field to a collection and allows you to provide a default number value for the field.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="433e0a45-d9b6-48e5-b62f-67815cc1461a" name="Start" type="Start"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have the new field appended to it." /></postconditions><display x="30" y="-105" /><inputs><input type="collection" name="Collection" narrative="The collection to append a field to." stage="Collection In" /><input type="text" name="Field Name" narrative="The name of the new field." stage="Field Name" /><input type="number" name="Value" narrative="The value to be put in the new field." stage="Value" /></inputs><onsuccess>560df05e-a20c-4c85-addb-accc35d19f0e</onsuccess></stage><stage stageid="5dc78a95-36a2-4324-a366-ccd5f941ea7b" name="End" type="End"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><loginhibit /><display x="30" y="90" /><outputs><output type="collection" name="Appended Collection" narrative="The collection with field appended." stage="Collection Out" /></outputs></stage><stage stageid="560df05e-a20c-4c85-addb-accc35d19f0e" name="Append Number" type="Code"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><loginhibit /><display x="30" y="-15" /><inputs><input type="collection" name="Collection" expr="[Collection In]" /><input type="text" name="Column" expr="[Field Name]" /><input type="number" name="Value" expr="[Value]" /></inputs><outputs><output type="collection" name="New Collection" stage="Collection Out" /></outputs><onsuccess>5dc78a95-36a2-4324-a366-ccd5f941ea7b</onsuccess><code><![CDATA[
If Not Collection.Columns.Contains(Column) Then
	Collection.Columns.Add(Column, Type.GetType("System.Decimal"))
End If

For Each dr As System.Data.DataRow In Collection.Rows
	dr(Column) = Value
Next

New_Collection = Collection
]]></code></stage><stage stageid="a8f65fc6-9524-4ba5-ab7c-4bf16b825bb8" name="Collection Out" type="Collection"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><display x="-180" y="120" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="1265e994-416c-4b2d-ab0c-c81e1288f072" name="Field Name" type="Data"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><display x="-180" y="30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4ac81567-c224-4270-a0ef-e57562e06fb5" name="Collection In" type="Collection"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><display x="-180" y="-15" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="f9a670a2-2e34-4e79-a184-369ddc70c75e" name="Value" type="Data"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><display x="-180" y="60" w="150" h="30" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5979fe4e-6f4d-4683-8d7f-bb932ec88a2e" name="Rename Field" type="SubSheetInfo"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><narrative>Renames a field within a collection.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="5030c234-e021-4ff1-b9ea-751e186a63a8" name="Start" type="Start"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collections field will be renamed." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Collection In" narrative="The collection to rename a field in." stage="Collection In" /><input type="text" name="Field Name" narrative="The name of the existing field to rename." stage="Field Name" /><input type="text" name="New Name" narrative="The new name for the field." stage="New Name" /></inputs><onsuccess>278ed0f4-d7d0-4ca7-908e-55569a965852</onsuccess></stage><stage stageid="404be5b2-7ad7-429a-9e8b-b6a561112f47" name="End" type="End"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Collection Out" narrative="The collection with field renamed." stage="Collection Out" /></outputs></stage><stage stageid="67c49160-5821-48b0-82fd-371ecbaea386" name="Collection In" type="Collection"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><display x="-195" y="-15" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="f0ef8f48-7f60-47fc-89b2-3aa04ef39792" name="Field Name" type="Data"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><display x="-195" y="30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8c1db25c-d091-4900-8b9e-529d60df0f8f" name="Collection Out" type="Collection"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><display x="-195" y="105" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="278ed0f4-d7d0-4ca7-908e-55569a965852" name="Rename" type="Code"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="collection" name="Collection In" expr="[Collection In]" /><input type="text" name="Field_Name" expr="[Field Name]" /><input type="text" name="New Name" expr="[New Name]" /></inputs><outputs><output type="collection" name="Collection Out" stage="Collection Out" /></outputs><onsuccess>404be5b2-7ad7-429a-9e8b-b6a561112f47</onsuccess><code><![CDATA[
Collection_Out = Collection_In.Copy

For Each c As DataColumn in Collection_Out.Columns
	If c.ColumnName = Field_Name Then
		c.ColumnName = New_Name
		Exit For
	End If
Next
]]></code></stage><stage stageid="b2e64d6d-9ac8-43b9-aeed-e58e65d8067c" name="New Name" type="Data"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><display x="-195" y="60" w="150" h="30" /><datatype>text</datatype><initialvalue /><alwaysinit /></stage><stage stageid="c935b0c8-a0cb-4251-9e63-af4ed27f9a91" name="Delete Field" type="SubSheetInfo"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><narrative>Deletes a field from a collection.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="a7662efd-3d51-4d9a-adbc-1a2e626613e5" name="Start" type="Start"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collections field will have been removed." /></postconditions><display x="30" y="-105" /><inputs><input type="collection" name="Collection In" narrative="The collection to delete the field from." stage="Collection In" /><input type="text" name="Field Name" narrative="The field to delete." stage="Field Name" /></inputs><onsuccess>b52dad46-ca6d-4860-82c7-f1d9320f66bc</onsuccess></stage><stage stageid="4e6ae3ea-d232-4ff3-b93b-ab90f6e93c1b" name="End" type="End"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><loginhibit /><display x="30" y="90" /><outputs><output type="collection" name="Collection Out" narrative="The collection with the field removed." stage="Collection Out" /></outputs></stage><stage stageid="4eb487df-f7e9-4146-a35f-e5e7c6461d01" name="Collection In" type="Collection"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><display x="-180" y="-15" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="719f7d25-ec64-43bd-9466-c822213aa069" name="Field Name" type="Data"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><display x="-180" y="30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0b32e1ce-deb0-4107-ac7c-c4af81ceedaf" name="Collection Out" type="Collection"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><display x="-180" y="105" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="b52dad46-ca6d-4860-82c7-f1d9320f66bc" name="Delete Column1" type="Code"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><loginhibit /><display x="30" y="-15" /><inputs><input type="collection" name="Collection In" expr="[Collection In]" /><input type="text" name="Field_Name" expr="[Field Name]" /></inputs><outputs><output type="collection" name="Collection Out" stage="Collection Out" /></outputs><onsuccess>4e6ae3ea-d232-4ff3-b93b-ab90f6e93c1b</onsuccess><code><![CDATA[
Collection_Out = Collection_In.Copy

For Each c As DataColumn in Collection_Out.Columns
	If c.ColumnName = Field_Name Then
		Collection_Out.Columns.Remove(c)
		Exit For
	End If
Next
]]></code></stage><stage stageid="63e447be-76ae-4566-a7e9-ead3373b7fe6" name="Merge Collection" type="SubSheetInfo"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><narrative>Merges two collections with different structures (and where the field names across both collections are unique) and forms a single collection with a combination  of the two structures and associated data values.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="d427bb44-b573-475a-aa7d-176f2803e033" name="Start" type="Start"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><loginhibit /><preconditions><condition narrative="The merge will fail if both collections contain any field names which are identical." /></preconditions><postconditions><condition narrative="The collections will have been merged." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Collection 1" narrative="The first collection to be merged." stage="Collection 1" /><input type="collection" name="Collection 2" narrative="The second collection to be merged." stage="Collection 2" /></inputs><onsuccess>6459a0e3-6f86-4efa-8b87-a9eb0b9a8460</onsuccess></stage><stage stageid="570e4b26-4aa8-48ac-b435-1ca8fe10f2cd" name="End" type="End"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Collection 3" narrative="The resulting merged collection." stage="Collection 3" /></outputs></stage><stage stageid="6459a0e3-6f86-4efa-8b87-a9eb0b9a8460" name="Merge" type="Code"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="collection" name="c1" expr="[Collection 1]" /><input type="collection" name="c2" expr="[Collection 2]" /></inputs><outputs><output type="collection" name="c3" stage="Collection 3" /></outputs><onsuccess>570e4b26-4aa8-48ac-b435-1ca8fe10f2cd</onsuccess><code><![CDATA[
For Each c As DataColumn in c2.Columns
	c1.Columns.Add(CloneColumn(c))
Next

For r As Integer = 0 To c1.Rows.Count - 1
	If r < c2.Rows.Count Then
		For Each c As DataColumn in c2.Columns
			c1.Rows(r)(c.ColumnName) = c2.Rows(r)(c.ColumnName)
		Next
	Else
		Exit For
	End If
Next

c3 = c1]]></code></stage><stage stageid="c325b6be-e358-4eab-8e9b-0b74a98490f3" name="Collection 1" type="Collection"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><display x="-195" y="-15" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="61e7bd9a-18d4-475d-b131-95dc839d1518" name="Collection 2" type="Collection"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><display x="-195" y="45" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="3ff4ed5f-abbc-4668-9ebb-816c8f0884db" name="Collection 3" type="Collection"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><display x="-195" y="120" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="741d8892-31ef-497b-a1ab-dca99ebd1f06" name="Split Collection" type="SubSheetInfo"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><narrative>Splits a collection into two colllections containing the fields as defined by templates.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="61860248-5b8d-41de-8e28-092ca8b989e5" name="Split" type="Code"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="300" /><inputs><input type="collection" name="c1" expr="[Collection 1]" /><input type="collection" name="c2t" expr="[Collection 2 Template]" /><input type="collection" name="c3t" expr="[Collection 3 Template]" /></inputs><outputs><output type="collection" name="c2" stage="Collection 2" /><output type="collection" name="c3" stage="Collection 3" /></outputs><onsuccess>e08e6b18-850a-427c-9eba-5065c9c619dd</onsuccess><code><![CDATA[
c2 = c2t.Clone()

c3 = c3t.Clone()

Dim r2, r3 As DataRow
Dim bAdd2, bAdd3 As Boolean

For Each r1 As DataRow In c1.Rows

	r2 = c2.NewRow()
	r3 = c3.NewRow()
	bAdd2 = False
	bAdd3 = False

	For Each c As DataColumn In c1.Columns

		If c2.Columns.Contains(c.ColumnName) Then
			r2(c.ColumnName) = r1(c.ColumnName)
			bAdd2 = True
		End If
		If c3.Columns.Contains(c.ColumnName) Then
			r3(c.ColumnName) = r1(c.ColumnName)
			bAdd3 = True
		End If

	Next

	If bAdd2 Then
		c2.Rows.Add(r2)
	End If
	If bAdd3 Then
		c3.Rows.Add(r3)
	End If

Next]]></code></stage><stage stageid="d00a67c4-977f-49ab-ac41-225ebdb3ad8d" name="Collection 3 Template" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="105" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="e2ce96fd-e590-46fa-a95d-effcca153782" name="Start" type="Start"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><preconditions><condition narrative="None." /><condition narrative="" /></preconditions><postconditions><condition narrative="Collections will be split." /><condition narrative="" /></postconditions><display x="15" y="-120" /><inputs><input type="collection" name="Collection 1" stage="Collection 1" /><input type="collection" name="Collection 2 Template" stage="Collection 2 Template" /><input type="collection" name="Collection 3 Template" stage="Collection 3 Template" /></inputs><onsuccess>2c7d51f8-a340-4629-9d93-0526f6ed07cc</onsuccess></stage><stage stageid="e08e6b18-850a-427c-9eba-5065c9c619dd" name="End" type="End"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="105" y="300" /><outputs><output type="collection" name="Collection 2" stage="Collection 2" /><output type="collection" name="Collection 3" stage="Collection 3" /></outputs></stage><stage stageid="67449419-0f6c-463b-bf1a-2d94b16c5be3" name="Collection 2" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="285" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="78bbd50d-b3cd-4066-80e3-d4cb236662b8" name="Collection 3" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="345" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="2c7d51f8-a340-4629-9d93-0526f6ed07cc" name="Count Template 2 Rows" type="Action"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Collection 2 Template&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Row Count" /></outputs><onsuccess>2dbb3bb5-1526-4f1c-818d-aa4eb0acc677</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="5a6c9426-a48f-4861-b7fe-b020ea824cc5" name="Row Count" type="Data"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="165" w="150" h="30" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="2dbb3bb5-1526-4f1c-818d-aa4eb0acc677" name="Rows?" type="Decision"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="0" /><decision expression="[Row Count]&gt;0" /><ontrue>17c0ae90-3784-40c5-816f-a0dfb4c97eab</ontrue><onfalse>6a04f2d4-b2f3-4afd-b837-ddaf0d40a9d5</onfalse></stage><stage stageid="17c0ae90-3784-40c5-816f-a0dfb4c97eab" name="Count Template 3 Rows" type="Action"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="60" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Collection 3 Template&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Row Count" /></outputs><onsuccess>525e699d-df7d-4c61-b5fd-0ae540b94a94</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="525e699d-df7d-4c61-b5fd-0ae540b94a94" name="Rows?" type="Decision"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="120" /><decision expression="[Row Count]&gt;0" /><ontrue>01cbd6ed-952e-4ae8-8420-496581701364</ontrue><onfalse>c7cd5499-3bd2-49c8-a5e0-2c190b350abe</onfalse></stage><stage stageid="74cfea1c-af9f-4c0b-86aa-ac76097c3940" name="Collection 1" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="-15" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="2af4b9c5-d3f3-4ecc-9a3a-4b52f1cee481" name="Collection 2 Template" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="45" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="c7cd5499-3bd2-49c8-a5e0-2c190b350abe" name="System Exception" type="Exception"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="105" y="120" /><exception type="System Exception" detail="&quot;Template collection cannot be empty&quot;" /></stage><stage stageid="6a04f2d4-b2f3-4afd-b837-ddaf0d40a9d5" name="anchor1" type="Anchor"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="105" y="0" w="10" h="10" /><onsuccess>c7cd5499-3bd2-49c8-a5e0-2c190b350abe</onsuccess></stage><stage stageid="01cbd6ed-952e-4ae8-8420-496581701364" name="Count Data Rows" type="Action"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="180" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Collection 1&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Row Count" /></outputs><onsuccess>69ae2e43-547a-4cef-abc9-a57284282b82</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="69ae2e43-547a-4cef-abc9-a57284282b82" name="Rows?" type="Decision"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="240" /><decision expression="[Row Count]&gt;0" /><ontrue>61860248-5b8d-41de-8e28-092ca8b989e5</ontrue><onfalse>4cffbd60-ffb8-4da0-aa50-3639bc6ff8ef</onfalse></stage><stage stageid="4cffbd60-ffb8-4da0-aa50-3639bc6ff8ef" name="Assign Outputs" type="Code"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="105" y="240" /><inputs><input type="collection" name="c2t" expr="[Collection 2 Template]" /><input type="collection" name="c3t" expr="[Collection 3 Template]" /></inputs><outputs><output type="collection" name="c2" stage="Collection 2" /><output type="collection" name="c3" stage="Collection 3" /></outputs><onsuccess>e08e6b18-850a-427c-9eba-5065c9c619dd</onsuccess><code><![CDATA[
c3 = c3t

c2 = c2t
]]></code></stage><stage stageid="8140b508-3840-4291-8122-7d9633f50e96" name="Collection In" type="Collection"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-180" y="-15" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="cc074354-584f-4eba-ab53-2f96462259a0" name="Filter Collection" type="SubSheetInfo"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><narrative>Filters a collection using the given query.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="4ee491db-1747-4f76-a969-78ebc05942c3" name="Start" type="Start"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will be filtered." /></postconditions><display x="15" y="-105" /><inputs><input type="collection" name="Collection In" narrative="The collection to filter." stage="Collection In" /><input type="text" name="Filter" narrative="The filter query." stage="Filter" /></inputs><onsuccess>0c063487-d7ee-42db-8059-92687b655e7d</onsuccess></stage><stage stageid="bda88544-a5a8-4bf6-9c9b-c645f76b7fed" name="End" type="End"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Collection Out" narrative="The filtered collection." stage="Collection Out" /></outputs></stage><stage stageid="0c063487-d7ee-42db-8059-92687b655e7d" name="Filter Collection1" type="Code"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="collection" name="Collection In" expr="[Collection In]" /><input type="text" name="Select Condition" expr="[Filter]" /></inputs><outputs><output type="collection" name="Collection Out" stage="Collection Out" /></outputs><onsuccess>bda88544-a5a8-4bf6-9c9b-c645f76b7fed</onsuccess><code><![CDATA[Dim NewRow As DataRow

Collection_Out = Collection_In.Clone

For Each parentRow As DataRow In Collection_In.Select(Select_Condition)
	NewRow = Collection_Out.NewRow
	For Each c As DataColumn In NewRow.Table.Columns
		NewRow(c.ColumnName) = parentRow(c.ColumnName)
	Next
	Collection_Out.Rows.Add(NewRow)
Next

NewRow = Nothing
Collection_In = Nothing]]></code></stage><stage stageid="ab9df972-dcc0-4384-ae57-8f0207f70978" name="Collection Out" type="Collection"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><display x="-195" y="105" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="ee8d1e79-1554-41d5-9dec-d9cb9153d483" name="Collection In" type="Collection"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><display x="-195" y="-15" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="7b601fa9-308d-4e40-8366-62ebe909f792" name="Filter" type="Data"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><display x="-195" y="30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6f60641e-4454-45d1-b678-62b0a6c6b784" name="Start" type="Start"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><loginhibit /><display x="-15" y="-120" /><inputs><input type="number" name="Start Row" narrative="The row index to start copying from. The index is from 0 to N-1 (where N is the total number of rows in the collection)." stage="Start Row" /><input type="number" name="Number of Rows to Copy" narrative="The number of rows to copy." stage="Number of Rows to Copy" /><input type="collection" name="Source Collection" narrative="The collection to copy." stage="Source Collection" /></inputs><onsuccess>25337bba-f357-42a8-bc61-876a9582d5d0</onsuccess></stage><stage stageid="002b5c58-ec2b-4e02-91e5-68fbeffe2b84" name="End" type="End"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><loginhibit /><display x="-15" y="75" /><outputs><output type="collection" name="Output Collection" narrative="The copied collection." stage="Output Collection" /></outputs></stage><stage stageid="1cd8f0a3-e382-4ad5-8948-7f0dc5cd17cd" name="Start Row" type="Data"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="60" y="-120" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="abc78fcd-9654-47c6-9aa9-5cd8f505bd60" name="Number of Rows to Copy" type="Data"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="135" y="-120" w="90" h="30" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="c3aa2821-e68a-4985-9fd7-e0330638a935" name="Source Collection" type="Collection"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="255" y="-120" w="120" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="25337bba-f357-42a8-bc61-876a9582d5d0" name="Copy Rows1" type="Code"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><loginhibit /><display x="-15" y="-30" w="120" h="30" /><inputs><input type="collection" name="Source Collection" expr="[Source Collection]" /><input type="number" name="Start Row" expr="[Start Row]" /><input type="number" name="Number of Rows to Copy" expr="[Number of Rows to Copy]" /></inputs><outputs><output type="collection" name="Output Collection" stage="Output Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>ff821741-f1ec-47ff-bd26-00c56a44a6c7</onsuccess><code><![CDATA[Try
	If Start_Row < 0 Then
		Throw New ApplicationException("Start Row must be at least zero.")
	End If
	Dim LastIndex As Integer = Source_Collection.Rows.Count -1
	If Start_Row > LastIndex Then
		Throw New ApplicationException("Start Row must not point beyond the end of the collection.")
	End If
	If Start_Row + Number_of_Rows_to_Copy -1 > LastIndex Then
		Throw New ApplicationException("The number of requested rows extends beyond the end of the collection (based on a start row of " & Start_Row.ToString() & ").")
	End If

	'Set up the new collection with columns
	Output_Collection = Source_Collection.Clone()

	'copy the requested rows one by one
	For I As integer = Start_Row To Start_Row + Number_of_Rows_to_Copy - 1
		Dim Values(Source_Collection.Columns.Count - 1) As Object
		For J As Integer = 0 To Source_Collection.Columns.Count - 1
			Values(J) = Source_Collection.Rows(I)(J)
		Next
		Output_collection.Rows.Add(Values)
	Next	
	
	Success = True
Catch Ex As Exception
	Success = False
	Error_Message = Ex.ToString()
End Try]]></code></stage><stage stageid="33698fa1-b8d8-467c-bb0d-b8e838d42c69" name="Output Collection" type="Collection"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="-180" y="45" w="150" h="90" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="4f882206-da67-4422-ac01-a53a5d765354" name="Success" type="Data"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="60" y="75" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6551589d-b7f2-48b7-a867-b398647d0180" name="Error Message" type="Data"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="120" y="75" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ff821741-f1ec-47ff-bd26-00c56a44a6c7" name="Success?" type="Decision"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><loginhibit /><display x="-15" y="30" /><decision expression="[Success]" /><ontrue>002b5c58-ec2b-4e02-91e5-68fbeffe2b84</ontrue><onfalse>fd5c51f5-e900-44ce-a169-84565580d402</onfalse></stage><stage stageid="fd5c51f5-e900-44ce-a169-84565580d402" name="System Exception" type="Exception"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="90" y="30" /><exception type="System Exception" detail="[Error Message]" /></stage><stage stageid="c6165073-bfc9-495f-98e5-62a224f52226" name="Start" type="Start"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collections will be combined." /></postconditions><display x="15" y="-120" /><inputs><input type="collection" name="Main Collection" narrative="The collection to append to." stage="Main Collection" /><input type="collection" name="Collection to Append" narrative="The collection to append." stage="Collection to Append" /></inputs><onsuccess>77e19cde-e0fa-40aa-8bea-05c4743275c2</onsuccess></stage><stage stageid="5d1a3d8d-2e99-49b5-9863-6a866e2e03dd" name="End" type="End"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><loginhibit /><display x="15" y="75" /><outputs><output type="collection" name="Combined Collection" narrative="The combined collection." stage="Combined Collection" /></outputs></stage><stage stageid="e3a95b76-e1ba-4bf1-92c1-653ae937120a" name="Main Collection" type="Collection"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="90" y="-120" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="320afdfe-675f-44a8-b563-5cf2cf3212d3" name="Collection to Append" type="Collection"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="150" y="-120" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="77e19cde-e0fa-40aa-8bea-05c4743275c2" name="Combine Collections" type="Code"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="60" /><inputs><input type="collection" name="Main Collection" expr="[Main Collection]" /><input type="collection" name="Collection to Append" expr="[Collection to Append]" /></inputs><outputs><output type="collection" name="Combined Collection" stage="Combined Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>35415fae-0f6d-4f78-b7b9-b39a6e3095ff</onsuccess><code><![CDATA[Success = False

If Main_Collection.Columns.Count > 0 AndAlso Main_Collection.Columns.Count <> Collection_to_Append.Columns.Count Then
	Error_Message = "Field definitions do not match - the number of columns in each is different."
	Exit Sub
End If

For Each Col1 As DataColumn In Main_Collection.Columns

	If Not Collection_to_Append.Columns.Contains(Col1.ColumnName) Then
		Error_Message = "The Main Collection does not contain '" & Col1.ColumnName & "'"
		Exit Sub
	End If

	If Collection_to_Append.Columns(Col1.ColumnName).DataType.Name <> Col1.DataType.Name Then
		Error_Message = "The data type of '" & Col1.ColumnName & "' do not match."
		Exit Sub
	End If

Next

If Main_Collection.Columns.Count = 0 Then
	Combined_Collection = Collection_to_Append
Else
	'We can now assume that fields match and start copying rows
	For Each R As DataRow in Collection_to_Append.Rows
		Main_Collection.ImportRow(R)
	Next
	Combined_Collection = Main_Collection
End If

Success = True]]></code></stage><stage stageid="d0521477-9847-4a70-834b-9c1d315bd817" name="Combined Collection" type="Collection"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="-90" y="75" w="120" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="35415fae-0f6d-4f78-b7b9-b39a6e3095ff" name="Success?" type="Decision"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><loginhibit /><display x="15" y="15" /><decision expression="[Success]" /><ontrue>5d1a3d8d-2e99-49b5-9863-6a866e2e03dd</ontrue><onfalse>e4269f55-7633-4d19-9ebf-299956a4a5ec</onfalse></stage><stage stageid="e4269f55-7633-4d19-9ebf-299956a4a5ec" name="System Exception" type="Exception"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="120" y="15" /><exception type="System Exception" detail="[Error Message]" /></stage><stage stageid="7923c865-f484-411d-815a-24fe9832f941" name="Success" type="Data"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="90" y="75" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="710fce6c-64f2-4e2d-8c89-9c2c41b9e9cb" name="Error Message" type="Data"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="150" y="75" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bdd84939-c1c2-4ec3-9ec2-f19a6b55f056" name="Remove Empty Rows" type="SubSheetInfo"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><narrative>Removes empty rows from a collection.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="46ac86fc-42a2-49f4-a2be-86a452176e2b" name="Start" type="Start"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have empty rows removed." /></postconditions><display x="-15" y="-105" /><inputs><input type="collection" name="Collection In" narrative="The collection to remove empty rows from" stage="Collection In" /></inputs><onsuccess>6c450e6a-55ae-4382-a419-e4c6d59fc580</onsuccess></stage><stage stageid="0e663c5b-fb8a-4f15-999d-feb951956864" name="End" type="End"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><loginhibit /><display x="-15" y="90" /><outputs><output type="collection" name="Collection Out" narrative="The collection with the empty rows removed" stage="Collection Out" /></outputs></stage><stage stageid="613bed47-0c41-4155-93a3-5b31823f6048" name="Collection In" type="Collection"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><display x="60" y="-105" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="af6c216c-aac3-4b4e-b7cb-bbf0a7863c49" name="Collection Out" type="Collection"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><display x="60" y="90" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6c450e6a-55ae-4382-a419-e4c6d59fc580" name="Remove empty rows" type="Code"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><loginhibit /><display x="-15" y="-15" w="90" h="30" /><inputs><input type="collection" name="Collection In" expr="[Collection In]" /></inputs><outputs><output type="collection" name="Collection Out" stage="Collection Out" /></outputs><onsuccess>0e663c5b-fb8a-4f15-999d-feb951956864</onsuccess><code><![CDATA[
Dim bRemove as Boolean
Dim iRow as integer
' Loop through each row
For iRow = Collection_In.Rows.Count - 1 to 0 step -1
'For each Row as DataRow in Collection_In.Rows
	bRemove=True
	' Loop through every column for this row
	For each Column as DataColumn in Collection_In.Columns
		if Trim(Collection_In.Rows(iRow)(Column.ColumnName).ToString()) & "" <> "" then
			bRemove=False
			exit for
		end if
	Next

	if bRemove=True then
		Collection_In.Rows.Remove(Collection_In.Rows(iRow))
	end if
Next

Collection_Out = Collection_In.Copy]]></code></stage><stage stageid="28f98de9-8408-4312-9e37-37197c2d8822" name="Transpose Collection" type="SubSheetInfo"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><narrative>Creates a new collection with the fields Name and Value and for each row in the original collection creates an entry for each column.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="26ce26e2-1a34-4a20-97d8-34ab15954720" name="Start" type="Start"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will be transposed." /></postconditions><display x="30" y="-120" /><inputs><input type="collection" name="Collection" narrative="The collection to transpose." stage="Collection In" /></inputs><onsuccess>c3e45cac-9a76-4b70-a119-ffed9ceeaeac</onsuccess></stage><stage stageid="c9852e45-8999-4b73-a581-4a3f66b95b3a" name="End" type="End"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><loginhibit /><display x="30" y="75" /><outputs><output type="collection" name="Appended Collection" narrative="The transposed collection." stage="Collection Out" /></outputs></stage><stage stageid="c3e45cac-9a76-4b70-a119-ffed9ceeaeac" name="Transpose" type="Code"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><loginhibit /><display x="30" y="-30" /><inputs><input type="collection" name="Collection" expr="[Collection In]" /></inputs><outputs><output type="collection" name="New Collection" stage="Collection Out" /></outputs><onsuccess>c9852e45-8999-4b73-a581-4a3f66b95b3a</onsuccess><code><![CDATA[
New_Collection = GetDataTable("Name,Value", "System.String,System.String")
Dim New_Row As System.Data.DataRow

For Each r As System.Data.DataRow In Collection.Rows
	For Each c As System.Data.DataColumn In Collection.Columns
		New_Row = New_Collection.NewRow()
		New_Row("Name") = c.ColumnName
		New_Row("Value") = GetStringValue(r, c.ColumnName)
		New_Collection.Rows.Add(New_Row)
	Next
Next
]]></code></stage><stage stageid="d2f68cb8-90cf-4414-8554-daf4fa4c9f29" name="Collection Out" type="Collection"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><display x="-180" y="60" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="99b09a03-6901-47ee-af4d-d43bfcf3bb42" name="Collection In" type="Collection"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><display x="-180" y="0" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="90d519f8-3075-478e-a49f-b681d1ddd033" name="Field Exists" type="SubSheetInfo"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><narrative>Finds out whether the collection contatins a given field.</narrative><display x="-135" y="-120" w="150" h="90" /></stage><stage stageid="8605b0b2-ff16-473b-ba5d-1956390f48bd" name="Start" type="Start"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><display x="75" y="-105" /><inputs><input type="collection" name="Input Collection" narrative="The collection to check." stage="Input Collection" /><input type="text" name="Field" narrative="The field to check for." stage="Field" /></inputs><onsuccess>da5abfb8-f52a-4a03-8f9f-ec5e42dd4566</onsuccess></stage><stage stageid="26b8ca01-8895-483f-93ef-66df5bbb0a34" name="End" type="End"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="255" /><outputs><output type="flag" name="Exists" narrative="True if the collection contains the field." stage="Exists" /></outputs></stage><stage stageid="da5abfb8-f52a-4a03-8f9f-ec5e42dd4566" name="Get Collection Fields" type="SubSheet"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="-30" w="90" h="60" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Collection Fields" stage="Field Names" /></outputs><onsuccess>470c6c27-3ed4-43b7-8c01-3fc7415ec55e</onsuccess><processid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</processid></stage><stage stageid="a910c0ad-5130-4073-8f3a-8cf76bc7d74e" name="Input Collection" type="Collection"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><display x="-135" y="15" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="66e1609e-c3e7-4e35-82df-90254a0d842f" name="Field" type="Data"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><display x="-135" y="-30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="470c6c27-3ed4-43b7-8c01-3fc7415ec55e" name="Field Names" type="LoopStart"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="45" w="120" h="30" /><onsuccess>eb7af2be-1265-40b6-8ea7-89fdda2b0ab1</onsuccess><groupid>755a928d-1109-4393-b44a-e265a1395a22</groupid><looptype>ForEach</looptype><loopdata>Field Names</loopdata></stage><stage stageid="54fa6a7b-f874-43d4-ac4a-4c16f28d1a9f" name="Field Names" type="LoopEnd"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="195" w="120" h="30" /><onsuccess>26b8ca01-8895-483f-93ef-66df5bbb0a34</onsuccess><groupid>755a928d-1109-4393-b44a-e265a1395a22</groupid></stage><stage stageid="15f784c0-4879-4a2e-ab6f-c44f5c384d85" name="Field Names" type="Collection"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><display x="-135" y="120" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Field Name" type="text" /><field name="Data Type" type="text" /></collectioninfo></stage><stage stageid="905724f1-237f-4641-9511-289841ec3498" name="Exists" type="Data"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><display x="-135" y="255" w="150" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="eb7af2be-1265-40b6-8ea7-89fdda2b0ab1" name="Match?" type="Decision"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="120" w="90" h="60" /><decision expression="[Field Names.Field Name] = Trim([Field])" /><ontrue>c4532590-c3c0-4014-98f4-bc3e1f30e5df</ontrue><onfalse>54fa6a7b-f874-43d4-ac4a-4c16f28d1a9f</onfalse></stage><stage stageid="d656772f-8ec9-4848-8f30-a4bda4f01837" name="anchor2" type="Anchor"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="210" y="255" w="10" h="10" /><onsuccess>26b8ca01-8895-483f-93ef-66df5bbb0a34</onsuccess></stage><stage stageid="c4532590-c3c0-4014-98f4-bc3e1f30e5df" name="Exists" type="Calculation"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="210" y="120" /><onsuccess>d656772f-8ec9-4848-8f30-a4bda4f01837</onsuccess><calculation expression="True" stage="Exists" /></stage><stage stageid="2e050fc0-fed0-49b4-bafc-a33a0aee5ad9" name="Success?" type="Decision"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><display x="15" y="15" /><decision expression="[Success]" /><ontrue>c491f60e-4aa7-4abb-a203-5a78c0b64469</ontrue><onfalse>510a1b6e-59d7-40a0-8886-483ef66093e9</onfalse></stage><stage stageid="510a1b6e-59d7-40a0-8886-483ef66093e9" name="FAIL" type="Exception"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="120" y="15" w="30" h="30" /><exception type="UtilityException" detail="&quot;Error occurred removing null rows: &quot; &amp; [Message]" /></stage><stage stageid="ab1e2f81-e705-47df-a41a-2aa91acf6639" name="Note2" type="Note"><narrative>‘The MIT License’

© 2020 Blue Prism Limited

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
</narrative><display x="225" y="-15" w="300" h="270" /><font family="Segoe UI" size="10" style="Regular" color="0000FF" /></stage></process></object>
        <object id="3a5f7760-1621-4a03-bd1e-c7477b5a6de4" name="Utility - File Management" xmlns="http://www.blueprism.co.uk/product/process"><process name="Utility - File Management" version="6.5.0.12573" bpversion="6.10.1.35171" narrative="Utility methods for interacting with the file System.&#xD;&#xA;&#xD;&#xA;v6.9" byrefcollection="true" type="object" runmode="Background"><appdef><element name="Application Root"><id>b30f5d67-5c3c-49c9-8f9b-66d573097498</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>20</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="9a74af4c-280a-4e30-bdbb-21295b6256ca" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>149</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d2530b0d-5530-4692-8a60-1f91d1c5a9c9" type="Normal" published="True"><name>Append to Text File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="c80dea92-57e8-4e2e-8df4-f3ee6ceeb717" type="Normal" published="True"><name>Combine Path</name><view><camerax>202</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="1e3c209b-a109-46a0-9ff0-e2dc6b8791fb" type="Normal" published="True"><name>Configure</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e9dd304c-7d26-40f5-b193-eef36f0a370c" type="Normal" published="True"><name>Copy File</name><view><camerax>49</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="1ff30a41-e177-40c5-a756-a6b466004f32" type="Normal" published="True"><name>Create Directory</name><view><camerax>0</camerax><cameray>-21</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d68f192f-eeb7-420e-b156-9636503b6082" type="Normal" published="True"><name>Delete Directory</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="70940cba-8680-4eb9-8066-9e383fc5b39b" type="Normal" published="True"><name>Delete File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ed509af2-4b4a-447d-8196-18105ed12739" type="Normal" published="True"><name>Delete Files</name><view><camerax>106</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea" type="Normal" published="True"><name>Download File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="20e6a636-d89b-4c08-b90d-8852894005a4" type="Normal" published="True"><name>Directory Exists</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="60b8a01d-1f74-4169-b192-5e363a7b5e61" type="Normal" published="True"><name>File Exists</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f7fa43ec-67e2-4acb-8d13-ced3c5027761" type="Normal" published="True"><name>Get CSV Text As Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="7ca00106-fe4e-46c0-bffc-0dda1561434f" type="Normal" published="True"><name>Get File Size</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="3a12dbad-57fd-45a4-b859-62df514a34d3" type="Normal" published="True"><name>Get Files</name><view><camerax>106</camerax><cameray>16</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0bafee17-a81a-40f0-9b6b-80b78142dd87" type="Normal" published="True"><name>Get Folders</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="40c6e605-9948-429a-ac84-d2810bca75fc" type="Normal" published="True"><name>Get Special Folder Path</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="85156833-c61c-4c78-916f-0b75a9a83e8d" type="Normal" published="True"><name>Move File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8043916d-2ef9-45b8-ab66-f4c20ef1b8e3" type="Normal" published="False"><name>Raise Exception If Appropriate</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8eb61369-ddab-4205-9a55-81054c2e4afb" type="Normal" published="True"><name>Read All Text from File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="6a9cff0d-c7c5-440a-bd8d-0007e15eae4d" type="Normal" published="True"><name>Read Lines From File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="b3050915-ad2e-446e-a1d6-99d11506f55e" type="Normal" published="True"><name>Split Path</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8" type="Normal" published="True"><name>Sub Directory Exists</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="842c79f8-aa64-4781-ad18-3982e21f0fd1" type="Normal" published="True"><name>Write Binary Data</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="602b7aad-2626-40ba-8c4b-1ec926ae9098" type="Normal" published="True"><name>Write Text File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="d8c547cc-60d0-459b-876f-90bf696a5757" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><onsuccess>807e7d33-91e2-4241-a85e-ea0718fc487d</onsuccess></stage><stage stageid="807e7d33-91e2-4241-a85e-ea0718fc487d" name="End" type="End"><loginhibit /><display x="15" y="90" /></stage><stage stageid="1a8c9ebd-54e1-442f-a6c7-e87df3b59232" name="Stage1" type="ProcessInfo"><display x="-180" y="-105" w="180" h="90" /><references><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Data</import><import>System.IO</import><import>System.XML</import><import>System.Diagnostics</import><import>Microsoft.VisualBasic</import><import>System.Data</import><import>system.text.regularexpressions</import><import>System.Data.OleDB</import></imports><language>visualbasic</language><globalcode><![CDATA[
]]></globalcode><code><![CDATA[Public Function GetDataTable(ByVal ColumnNamesCSV As String, ByVal ColumnTypesCSV As String) As DataTable

	Dim objTable As DataTable
	Dim objColumn As DataColumn
	Dim aColumnNames As String() = ColumnNamesCSV.Split(",")
	Dim aColumnTypes As String() = ColumnTypesCSV.Split(",")

	Try
		objTable = New DataTable
		For i As Integer = 0 To aColumnNames.Length - 1
			objColumn = New DataColumn 
			objColumn.DataType = System.Type.GetType(aColumnTypes(i).Trim)
			If objColumn.DataType = GetType(DateTime) Then
				objColumn.DateTimeMode = DataSetDateTime.Utc
			End If
			objColumn.ColumnName = aColumnNames(i).Trim
			objTable.Columns.Add(objColumn)
		Next
		
	Catch e As Exception
		objTable = nothing	
	End Try

	Return objTable

End Function

]]></code></stage><stage stageid="0bf7814a-647b-4bcb-b6a6-3d24dfd5b736" name="Clean Up" type="SubSheetInfo"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="0c56e2f8-68ce-48a3-97ad-81e1f076e9ce" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="07048754-58c7-4201-9869-e206f1d6c32a" name="Get Files" type="SubSheetInfo"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><narrative>Gets all files in the specified folder matching the supplied file type pattern string.

Patterns - A comma-separated list of file patterns identifying the type(s) of files sought. Eg "*.jpg, *.png" retrieves all jpg and png files. The pattern "*.*" will return all files. It does not matter whether you leave a space between each pattern, or not. Where a comma is required in a file pattern it should be escaped out using the backslash character, e.g. a pattern of "*\,November.xlsx" will return all files that end with ",November.xlsx"</narrative><display x="-195" y="-105" w="150" h="60" /></stage><stage stageid="8448350e-b6a9-4a15-a3d0-501c4967c0f9" name="Start" type="Start"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="All matching files will be returned." /></postconditions><display x="15" y="-105" /><inputs><input type="text" name="Folder" narrative="The folder in which to look for files" stage="Folder" /><input type="text" name="Patterns CSV" narrative="The comma seperated list of wildcard patterns" stage="Patterns CSV" /></inputs><onsuccess>acbbbddf-8b42-4353-8b0a-83eaeb216a63</onsuccess></stage><stage stageid="acbbbddf-8b42-4353-8b0a-83eaeb216a63" name="Get Files" type="Code"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="Folder" expr="[Folder]" /><input type="text" name="Patterns CSV" expr="[Patterns CSV]" /></inputs><outputs><output type="collection" name="Files" stage="Files" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>9cdf0f78-05d1-44d4-80a0-9f78ca0b22ae</onsuccess><code><![CDATA[
Dim objTable As DataTable
Dim objRow As DataRow
Dim aFiles As FileInfo()
Dim aPatterns As String()
Dim oDirectory As New DirectoryInfo(Folder)

Try

	'Create a data table to output as a collection
	objTable = GetDataTable( _
		"Path," _
		& "Folder," _
		& "Name," _
		& "Extension," _
		& "Created," _
		& "Last Accessed," _
		& "Last Written," _
		& "Read Only," _
		& "Bytes", _
		"System.String," _
		& "System.String," _
		& "System.String," _
		& "System.String," _
		& "System.DateTime," _
		& "System.DateTime," _
		& "System.DateTime," _
		& "System.Boolean," _
		& "System.Double")
		
	Patterns_CSV = Patterns_CSV.replace("\,", "?")
	aPatterns = Patterns_CSV.split(",")

	For each sPattern As String in aPatterns
		sPattern = sPattern.replace("?", ",")
		aFiles = oDirectory.GetFiles(sPattern.Trim)
		For each oFile as FileInfo in aFiles
			objRow = objTable.NewRow()
			objRow("Path") = oFile.FullName
			objRow("Folder") = oFile.DirectoryName
			objRow("Name") = oFile.Name
			objRow("Extension") = oFile.Extension
			objRow("Created") = oFile.CreationTimeUtc
			objRow("Last Accessed") = oFile.LastAccessTimeUtc
			objRow("Last Written") = oFile.LastWriteTimeUtc
			objRow("Read Only") = oFile.IsReadOnly
			objRow("Bytes") = oFile.Length

			objTable.Rows.Add(objRow)
		Next
	Next

	objTable = objTable.DefaultView.ToTable(True, _
		"Path", _
		"Folder", _
		"Name", _
		"Extension", _
		"Created", _
		"Last Accessed", _
		"Last Written", _
		"Read Only", _
		"Bytes")

	Files = objTable
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="913867cd-7535-4857-b6b9-1b1ead2bc67f" name="Folder" type="Data"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="-15" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\temp</initialvalue><private /><alwaysinit /></stage><stage stageid="624240c2-02c8-48c3-9040-e9388fddf1b1" name="Patterns CSV" type="Data"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="15" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">*.jpg</initialvalue><private /><alwaysinit /></stage><stage stageid="95f234d2-8c1a-466c-b8a6-fb7dc34de936" name="Files" type="Collection"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="75" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="3764ae17-85d7-4ebb-99b5-502b95d7abd6" name="End" type="End"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><loginhibit /><display x="15" y="30" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="A message if unsuccessful" stage="Message" /><output type="collection" name="Files" narrative="The collection of files found" stage="Files" /></outputs></stage><stage stageid="8e80cc1d-27ed-43d9-985e-90d828191fb7" name="Success" type="Data"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="135" w="150" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="950111b1-7b05-4076-a673-b07166b76cdb" name="Message" type="Data"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="165" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="32964141-871e-474a-a1f8-eea0b10c5df2" name="Delete Files" type="SubSheetInfo"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><narrative>Deletes all files in the specified folder, matching the supplied file extension pattern.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="82b919fe-64b2-4c2b-8173-5706f671c5ce" name="End" type="End"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><loginhibit /><display x="15" y="0" /></stage><stage stageid="ea337dc4-4fd9-4d31-8cc6-23da41cd5665" name="Start" type="Start"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><loginhibit /><preconditions><condition narrative="The named folder must exist." /></preconditions><postconditions><condition narrative="All files within the named folder which match the supplied pattern will have been deleted." /></postconditions><display x="15" y="-135" /><inputs><input type="text" name="Folder" narrative="The path from which to delete the files" stage="Folder" /><input type="text" name="Pattern" narrative="The wildcard pattern of files to delete" stage="Pattern" /></inputs><onsuccess>202c81a6-fd90-46ed-9eee-73c24863b69b</onsuccess></stage><stage stageid="202c81a6-fd90-46ed-9eee-73c24863b69b" name="Delete Files" type="Code"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><loginhibit /><display x="15" y="-90" /><inputs><input type="text" name="Folder" expr="[Folder]" /><input type="text" name="Pattern" expr="[Pattern]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>d0021635-222d-46f1-93ad-a7435640cf9f</onsuccess><code><![CDATA[Dim aFiles As String()

Try

	aFiles = Directory.GetFiles(Folder, Pattern)

	For each f as String in aFiles
		File.Delete(f)
	Next

	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try
]]></code></stage><stage stageid="119002ff-ee61-4f32-b096-f3953ad107e1" name="Folder" type="Data"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><display x="-195" y="-15" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\temp\Blue Prism</initialvalue><private /><alwaysinit /></stage><stage stageid="121b4fd7-a9da-4498-a8d5-6a0ab2dae758" name="Pattern" type="Data"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><display x="-195" y="15" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">*.TIF</initialvalue><private /><alwaysinit /></stage><stage stageid="623ad5b5-f965-4f97-9d46-435717e70b25" name="Success" type="Data"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><display x="-195" y="60" w="150" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="77c8238b-c415-496f-87c3-50033ec4d2a5" name="Message" type="Data"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><display x="-195" y="90" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7891b89f-2307-4444-8b6e-17e25e53501f" name="Append to Text File" type="SubSheetInfo"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><narrative>Appends some text to the specified file.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="83010bd2-019e-4b04-af0b-b401efe8d128" name="Start" type="Start"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><preconditions><condition narrative="There must be sufficient disk space to accommodate the new data. The destination file need not exist already. If it does not exist then it will be created." /></preconditions><postconditions><condition narrative="The supplied text will have been appended." /></postconditions><display x="15" y="-105" /><inputs><input type="text" name="File Name" narrative="The full path of the text file to append to" stage="File Name" /><input type="text" name="Text" narrative="The text to append to the file" stage="Text" /></inputs><onsuccess>eeb7f0eb-73fc-4849-96a9-35f410bbde67</onsuccess></stage><stage stageid="39862014-df78-414b-9ccd-5c0d392aa282" name="End" type="End"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="15" y="30" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="f9d3e8a1-7f67-4991-b9f1-e8ec160de075" name="Success" type="Data"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="2ef09390-e450-4d10-a32b-4448a65b0aaf" name="Message" type="Data"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4e77fcf2-8d12-4f3b-acf3-e15dccb8e90a" name="Text" type="Data"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><display x="-195" y="0" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f599b6ac-5574-438b-8617-8821d9800cf7" name="File Name" type="Data"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><display x="-195" y="-30" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="eeb7f0eb-73fc-4849-96a9-35f410bbde67" name="Append" type="Code"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="File Name" expr="[File Name]" /><input type="text" name="Text" expr="[Text]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>1e441202-3878-4eb6-b156-6f517be6de00</onsuccess><code><![CDATA[Try

	Dim sw As StreamWriter

	If File.Exists(File_Name) = False Then
		sw = File.CreateText(File_Name)
	Else
		sw = File.AppendText(File_Name)
	End If

	sw.WriteLine(Text)
	sw.Flush()
	sw.Close()
	
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="6428e7b4-8ed6-4930-bc8f-636cc71e955a" name="Read All Text from File" type="SubSheetInfo"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><narrative>Reads the entire contents of a file as text.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="a783ee6f-6425-4420-9b9f-759c781f3544" name="Start" type="Start"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><preconditions><condition narrative="The file must exist." /></preconditions><postconditions><condition narrative="The full text of the file will be read." /></postconditions><display x="15" y="-105" /><inputs><input type="text" name="File Name" narrative="The full path the file to read the text from" stage="File Name" /></inputs><onsuccess>8107f164-7ef3-4164-8a2c-500055c7b374</onsuccess></stage><stage stageid="0a76495e-bc0d-4cea-bae0-85da1e15c74f" name="End" type="End"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="15" y="30" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /><output type="text" name="Text" narrative="The text of the file" stage="Text" /></outputs></stage><stage stageid="995662eb-baf3-436e-a2c1-2cc3ccfcf8fb" name="Success" type="Data"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="ee454760-e4c3-44cc-b071-30cdafbe8355" name="Message" type="Data"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2dbbbe6e-0b94-4d90-940a-c99f9671b774" name="Text" type="Data"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><display x="-195" y="0" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="265e14ba-8649-477d-9d21-092a9bc9ad2d" name="File Name" type="Data"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><display x="-195" y="-30" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8107f164-7ef3-4164-8a2c-500055c7b374" name="Read Text" type="Code"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="File Name" expr="[File Name]" /></inputs><outputs><output type="text" name="Text" stage="Text" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>7419fb71-5c79-4fb6-9e59-b9fbc1d63e45</onsuccess><code><![CDATA[Try
   If File.Exists(File_Name) Then
   	Dim sr As New StreamReader(File_Name)
   	Text = sr.ReadToEnd
   	sr.Close()
   	Success = True
   	Message = ""
   Else
      Throw New ApplicationException("The file at " & File_Name & " does not exist")
   End If
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="a3f9a500-e2f0-4f48-9bb2-38ad1a4592b9" name="Write Text File" type="SubSheetInfo"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><narrative>Writes text to a file. Any existing text in the file (if it exists) will be replaced.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="3f408f78-c150-49f6-9f52-a3fb59ce307e" name="Start" type="Start"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><preconditions><condition narrative="There must be sufficient disk space to accommodate the new data." /></preconditions><postconditions><condition narrative="The supplied text will have been written to the destination file." /></postconditions><display x="-30" y="-135" /><inputs><input type="text" name="File Name" narrative="The full path to the file to write the text to" stage="File Name" /><input type="text" name="Text" narrative="The text to write to the file" stage="Text" /></inputs><onsuccess>7d5efe35-64fc-48a0-b5a7-a5b787e90578</onsuccess></stage><stage stageid="1aab3a10-a813-470b-97c8-57938a0d0024" name="End" type="End"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-30" y="0" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="e85add3f-f65a-47dd-8be7-5ee764878dee" name="Success" type="Data"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="3ba21666-440e-40ea-80e4-bb02ff535775" name="Message" type="Data"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="951ed278-f157-450e-90d0-06cc330e358c" name="Text" type="Data"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><display x="-195" y="0" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20ca70ee-ce56-4594-90ca-a03ba1934f47" name="File Name" type="Data"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><display x="-195" y="-30" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7d5efe35-64fc-48a0-b5a7-a5b787e90578" name="Write" type="Code"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-30" y="-90" /><inputs><input type="text" name="File Name" expr="[File Name]" /><input type="text" name="Text" expr="[Text]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>9219c3c4-effd-4dfc-9020-8dafd054ea8f</onsuccess><code><![CDATA[Try
	File.WriteAllText(File_Name, Text)
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="7dfd4754-e49a-447b-b9c3-c36266dfa2e8" name="File Exists" type="SubSheetInfo"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><narrative>Determines whether the specified file exsts. The full path must be specified.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="da1de8a5-b06c-4fc0-b316-2fec1a802056" name="End" type="End"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><loginhibit /><display x="-60" y="-45" /><outputs><output type="flag" name="Exists" narrative="True if the file exists" stage="Exists" /></outputs></stage><stage stageid="6b0d4683-2748-485e-88ed-cdf57c76992d" name="Start" type="Start"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The existence of the file of interest will have been determined." /></postconditions><display x="-60" y="-135" /><inputs><input type="text" name="File Name" narrative="The name of the file to check" stage="File Name" /></inputs><onsuccess>7cc66b68-5ab8-4f99-95fa-fde9dbfa38ed</onsuccess></stage><stage stageid="f92a43a8-74e6-4f49-bf65-dc7663017f2b" name="File Name" type="Data"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><display x="-195" y="-30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7cc66b68-5ab8-4f99-95fa-fde9dbfa38ed" name="File Exists" type="Code"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><loginhibit /><display x="-60" y="-90" /><inputs><input type="text" name="File Name" expr="[File Name]" /></inputs><outputs><output type="flag" name="Exists" stage="Exists" /></outputs><onsuccess>da1de8a5-b06c-4fc0-b316-2fec1a802056</onsuccess><code><![CDATA[Try
	Exists = File.Exists(File_Name)
Catch
	Exists = False
End Try]]></code></stage><stage stageid="817167f9-bb73-4622-9254-e249dff5369f" name="Exists" type="Data"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><display x="-195" y="0" w="150" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="2271a79e-27e5-4434-b5be-146e02946317" name="new" type="Note"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="c50578e4-df15-4b21-8a4c-469dae40724d" name="Copy File" type="SubSheetInfo"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><narrative>Copies a file to the named destination.</narrative><display x="-195" y="-135" w="150" h="90" /></stage><stage stageid="30f8df38-bbc1-4b94-916b-ce06a40b630c" name="Start" type="Start"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><preconditions><condition narrative="The file to be copied must exist. The full destination path must be specified. There must be sufficient free disk space to complete the operation." /></preconditions><postconditions><condition narrative="The file will have been copied to the specified destination." /><condition narrative="" /></postconditions><display x="15" y="-105" /><inputs><input type="text" name="File Path" narrative="The full path to the file to be copied" stage="File Path" /><input type="text" name="Destination Path" narrative="The path of the directory to copy the file to" stage="Destination Path" /></inputs><onsuccess>8de7d816-2984-4b8f-a1f0-dfdf25b3f108</onsuccess></stage><stage stageid="53e1058f-89a5-4172-b9b5-89530de8ef51" name="Success" type="Data"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="471fd171-54c1-4c9b-aa1d-6f471b939942" name="Message" type="Data"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8de7d816-2984-4b8f-a1f0-dfdf25b3f108" name="Copy" type="Code"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="File Path" expr="[File Path]" /><input type="text" name="Destination" expr="[Destination Path]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>acf72cc7-cf73-466f-8c22-9fb633ed3c24</onsuccess><code><![CDATA[Try

	Dim sSourceFolder As String = Mid(File_Path, 1, File_Path.LastIndexOf("\") + 1)
	Dim sSourceFileName As String = Mid(File_Path, File_Path.LastIndexOf("\") + 2)
 
	Dim sDestinationFolder As String
	Dim sDestinationFile As String
	If Directory.Exists(Destination) Then
		sDestinationFolder = Destination
		If Not sDestinationFolder.EndsWith("\") Then
			sDestinationFolder &= "\"
		End If
		sDestinationFile = ""
	Else
		sDestinationFolder = ""
		sDestinationFile = Destination
	End If
 
	Dim objDirectoryInfo As DirectoryInfo = New DirectoryInfo(sSourceFolder)
	Dim aFiles As FileInfo() = objDirectoryInfo.GetFiles(sSourceFileName)

	If aFiles Is Nothing OrElse aFiles.Length <= 0 Then
		Success = False
		Message = "No files found"
		Return
	End If

	For Each oFile As FileInfo In aFiles
		If sDestinationFolder = "" Then
			oFile.CopyTo(sDestinationFile, True)
		Else
			oFile.CopyTo(sDestinationFolder & oFile.Name, True)
		End If
	Next

	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="f12e4bba-1185-469f-aea9-0b8954cbed77" name="File Path" type="Data"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><display x="-195" y="-30" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="30982d9d-8e54-4d64-af7e-2a7df861c94f" name="Destination Path" type="Data"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><display x="-195" y="0" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6d608807-5c80-49f5-a177-05a15f6d0ff7" name="Get File Size" type="SubSheetInfo"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><narrative>Gets the size of the specified file.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="d07f9435-79c9-4cd5-b803-1cde78f5262c" name="End" type="End"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><loginhibit /><display x="15" y="75" /><outputs><output type="number" name="Size" narrative="The size of the file in bytes" stage="Bytes" /></outputs></stage><stage stageid="d573bf14-6cce-4455-ae05-908d9a527dcb" name="Start" type="Start"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><loginhibit /><preconditions><condition narrative="The specified file must exist." /></preconditions><postconditions><condition narrative="The file size will have been determined." /></postconditions><display x="15" y="-105" /><inputs><input type="text" name="File Path" narrative="Full path to the file to get the file size" stage="File Path" /></inputs><onsuccess>6543595a-59fb-4304-b9f3-1acf662a1237</onsuccess></stage><stage stageid="0c8b0631-90f5-4646-b0cf-8fab74f80999" name="File Path" type="Data"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><display x="-195" y="-30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6543595a-59fb-4304-b9f3-1acf662a1237" name="Get Byte Count" type="Code"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="File Path" expr="[File Path]" /></inputs><outputs><output type="number" name="Bytes" stage="Bytes" /></outputs><onsuccess>d07f9435-79c9-4cd5-b803-1cde78f5262c</onsuccess><code><![CDATA[Try

	Bytes = File.ReadAllBytes(File_Path).Length

Catch e As Exception
	Bytes = 0
End Try]]></code></stage><stage stageid="3eb7673c-2193-4d7f-ac06-85b1da9ce046" name="Bytes" type="Data"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><display x="-195" y="15" w="150" h="30" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="36451c72-b274-4817-a153-beb1e8a6e76a" name="Start" type="Start"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="-120" /><onsuccess>9a8c4505-8606-4a0c-b118-09a6b9932b3b</onsuccess></stage><stage stageid="9a8c4505-8606-4a0c-b118-09a6b9932b3b" name="End" type="End"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="90" /></stage><stage stageid="d1f13191-1583-4a03-865c-3f0758139ca3" name="Delete File" type="SubSheetInfo"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><narrative>Deletes a single file from the file system.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="31d32d9a-4f5c-4793-afc7-d84f096922b9" name="Start" type="Start"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><loginhibit /><preconditions><condition narrative="The file to be deleted must exist." /></preconditions><postconditions><condition narrative="The named file will have been deleted." /></postconditions><display x="15" y="-105" /><inputs><input type="text" name="File Name" narrative="The full path to the file to delete" stage="File Name" /></inputs><onsuccess>b6262d8e-0c7b-459d-b177-37ae4d226ddf</onsuccess></stage><stage stageid="cd763cbc-81c0-42b1-9d9d-b2b7d325235d" name="File Name" type="Data"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><display x="-195" y="-30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b6262d8e-0c7b-459d-b177-37ae4d226ddf" name="Delete File" type="Code"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="File Name" expr="[File Name]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>249acd28-3283-498f-aca8-76c67cb2295c</onsuccess><code><![CDATA[Try
   If Not File.Exists(File_Name) Then
      Throw New ApplicationException("The specified file at " & File_Name & " does not exist.")
   Else
	   File.Delete(File_Name)
	   Success = True
   End If
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="1cd4abb9-4dc3-494c-86a7-d85877a1827a" name="Success" type="Data"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><display x="-195" y="30" w="150" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bc5b5c19-fe76-4278-95d2-f89c3588893c" name="Message" type="Data"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><display x="-195" y="0" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a7bae4fd-01fc-4447-8cf4-fbfd04353f72" name="End" type="End"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="15" y="30" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="576295b9-757e-4588-948e-34aac5140c29" name="End" type="End"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><loginhibit /><display x="15" y="30" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="cef63c98-a65d-4862-9d1d-ff02fbfc92f5" name="Get Folders" type="SubSheetInfo"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><narrative>Gets a collection of all subfolders in the specified file system folder.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="f90df4f3-71ee-4470-b90b-1e8a0513cad8" name="Start" type="Start"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><loginhibit /><preconditions><condition narrative="The named folder must exist." /></preconditions><postconditions><condition narrative="All sub-folders will be returned, if any exist." /></postconditions><display x="15" y="-105" /><inputs><input type="text" name="Folder" narrative="The folder in which to look for sub-folders" stage="Folder" /></inputs><onsuccess>ff503eb2-2cb7-4dbb-90fe-2ab47a5e4a43</onsuccess></stage><stage stageid="ff503eb2-2cb7-4dbb-90fe-2ab47a5e4a43" name="Get Folders" type="Code"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="Folder" expr="[Folder]" /></inputs><outputs><output type="collection" name="Folders" stage="Folders" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>3dde4f26-00a8-4e1a-af12-b8a14178d89c</onsuccess><code><![CDATA[
Dim objTable As DataTable
Dim objRow As DataRow
Dim aFolders As DirectoryInfo()
Dim oDirectory As New DirectoryInfo(Folder)

Try

	'Create a data table to output as a collection
	objTable = GetDataTable( _
		"Path," _
		& "Name," _
		& "Created," _
		& "Last Accessed," _
		& "Last Written", _
		"System.String," _
		& "System.String," _
		& "System.DateTime," _
		& "System.DateTime," _
		& "System.DateTime")
		
	aFolders = oDirectory.GetDirectories()
	For each oFolder as DirectoryInfo in aFolders
		objRow = objTable.NewRow()
		objRow("Path") = oFolder.FullName
		objRow("Name") = oFolder.Name
		objRow("Created") = oFolder.CreationTimeUtc
		objRow("Last Accessed") = oFolder.LastAccessTimeUtc
		objRow("Last Written") = oFolder.LastWriteTimeUtc

		objTable.Rows.Add(objRow)
	Next

	Folders = objTable
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="f72d7f92-f944-412b-8890-737f3be3b0a1" name="Folder" type="Data"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><display x="-195" y="-15" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\</initialvalue><private /><alwaysinit /></stage><stage stageid="1384f5ee-e382-4900-9900-e2e2eb7a9a78" name="Folders" type="Collection"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><display x="-195" y="75" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="aa67216d-b83f-4c14-9f71-5ec6df626c08" name="End" type="End"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><loginhibit /><display x="15" y="30" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /><output type="collection" name="Folders" narrative="A collection of the sub-folders found within the folder" stage="Folders" /></outputs></stage><stage stageid="759f9ebb-96f6-432b-a21e-6673b71cac22" name="Success" type="Data"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><display x="-195" y="135" w="150" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5afbf383-4ea5-42f7-a298-d02bf6dc267a" name="Message" type="Data"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><display x="-195" y="165" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="076db864-0743-4339-b606-174f056c63f9" name="Move File" type="SubSheetInfo"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><narrative>Moves the specified file to a new location.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="8c383fb0-b58b-44cd-8dec-c5934289e107" name="Start" type="Start"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><preconditions><condition narrative="The file to be moved must exist. There must be sufficient disk space to move the file." /></preconditions><display x="15" y="-105" /><inputs><input type="text" name="File Path" narrative="The full path to the file to move" stage="File Path" /><input type="text" name="Destination Path" narrative="The path to the folder to move the file to" stage="Destination Path" /></inputs><onsuccess>8cb5b945-a1c1-451f-b39e-fba3e2b5ab1b</onsuccess></stage><stage stageid="2c8abe9a-1466-4283-999a-c5c7838a0e27" name="End" type="End"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="15" y="30" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="a980280c-98cd-41d0-8a54-734c9bfacc5c" name="Success" type="Data"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="779e3dfa-a01e-47f9-98c4-9ac10fcd5a11" name="Message" type="Data"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8cb5b945-a1c1-451f-b39e-fba3e2b5ab1b" name="Move" type="Code"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="File Path" expr="[File Path]" /><input type="text" name="Destination" expr="[Destination Path]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>acbc8cd8-d4ad-4eae-a7c3-ebbac1d3f4c7</onsuccess><code><![CDATA[Try

	Dim sSourceFolder As String = Mid(File_Path, 1, File_Path.LastIndexOf("\") + 1)
	Dim sSourceFileName As String = Mid(File_Path, File_Path.LastIndexOf("\") + 2)
 
	Dim sDestinationFolder As String
	Dim sDestinationFile As String
	If Directory.Exists(Destination) Then
		sDestinationFolder = Destination
		If Not sDestinationFolder.EndsWith("\") Then
			sDestinationFolder &= "\"
		End If
		sDestinationFile = ""
	Else
		sDestinationFolder = ""
		sDestinationFile = Destination
	End If
 
	Dim objDirectoryInfo As DirectoryInfo = New DirectoryInfo(sSourceFolder)
	Dim aFiles As FileInfo() = objDirectoryInfo.GetFiles(sSourceFileName)

	If aFiles Is Nothing OrElse aFiles.Length <= 0 Then
		Success = False
		Message = "No files found"
		Return
	End If

	For Each oFile As FileInfo In aFiles
		If sDestinationFolder = "" Then
			oFile.MoveTo(sDestinationFile)
		Else
			oFile.MoveTo(sDestinationFolder & oFile.Name)
		End If
	Next

	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="ba83bbd5-0c51-49b0-ac63-de9e754aab48" name="File Path" type="Data"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><display x="-195" y="-30" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="57b074ac-98b9-40d1-a342-36dc0a514f77" name="Destination Path" type="Data"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><display x="-195" y="0" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c83a23da-bc05-4aa4-8a8e-6c09524e2baf" name="Split Path" type="SubSheetInfo"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><narrative>Splits a file path into its component parts - the filename and the folder path. The trailing backslash is omitted from the directory part.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="6c655f85-fb96-448d-be05-5f6c833e1882" name="Start" type="Start"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><loginhibit /><preconditions><condition narrative="The specified path must correspond to a file which exists on disk." /></preconditions><postconditions><condition narrative="The path will have been separated." /></postconditions><display x="90" y="-105" /><inputs><input type="text" name="File Path" narrative="The path to split" stage="File Path" /></inputs><onsuccess>138061d1-d866-403d-af52-37ea509c7e78</onsuccess></stage><stage stageid="138061d1-d866-403d-af52-37ea509c7e78" name="Split Path" type="Code"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><loginhibit /><display x="90" y="-45" /><inputs><input type="text" name="File Path" expr="[File Path]" /></inputs><outputs><output type="text" name="Folder" stage="Folder" /><output type="text" name="File Name" stage="File Name" /></outputs><onsuccess>0e35cb6c-257d-40a6-ba20-d661c3ad83fe</onsuccess><code><![CDATA[
Folder = Path.GetDirectoryName(File_Path)
File_Name = Path.GetFileName(File_Path)
]]></code></stage><stage stageid="69bae4e1-98fe-460c-807d-30657ae18ebf" name="File Name" type="Data"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><display x="-120" y="60" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="de3608a3-9cb7-41c3-ae88-da3dad92053e" name="Folder" type="Data"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><display x="-120" y="30" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e0497cae-7418-46ec-a442-ac21369c7a2f" name="File Path" type="Data"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><display x="-120" y="0" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0e35cb6c-257d-40a6-ba20-d661c3ad83fe" name="End" type="End"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><loginhibit /><display x="90" y="15" /><outputs><output type="text" name="File Name" narrative="The filename" stage="File Name" /><output type="text" name="Folder" narrative="The folder" stage="Folder" /></outputs></stage><stage stageid="3068b898-6d19-4469-8efd-f355853fda4e" name="Directory Exists" type="SubSheetInfo"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><narrative>Determines whether the specified directory exsts. The full path must be specified.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="14e7b70b-4620-4b05-a9f8-5c31396209bd" name="Start" type="Start"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><loginhibit /><display x="-60" y="-135" /><inputs><input type="text" name="Directory Name" narrative="The directory to check exists" stage="Directory Name" /></inputs><onsuccess>50ef1149-8307-4080-9028-d6bec6eafd78</onsuccess></stage><stage stageid="4f5a5ea1-9bcf-4b0d-b58b-fb6b18580e44" name="End" type="End"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><loginhibit /><display x="-60" y="-45" /><outputs><output type="flag" name="Exists" narrative="True if the directory exists" stage="Exists" /></outputs></stage><stage stageid="50ef1149-8307-4080-9028-d6bec6eafd78" name="Directory Exists" type="Code"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><loginhibit /><display x="-60" y="-90" /><inputs><input type="text" name="Directory Name" expr="[Directory Name]" /></inputs><outputs><output type="flag" name="Exists" stage="Exists" /></outputs><onsuccess>4f5a5ea1-9bcf-4b0d-b58b-fb6b18580e44</onsuccess><code><![CDATA[Try
	Exists = Directory.Exists(Directory_Name)
Catch
	Exists = False
End Try]]></code></stage><stage stageid="89cff60a-371d-476b-bc55-f0e56150ef45" name="Exists" type="Data"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><display x="30" y="-90" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a9da119d-dbd9-4320-90e1-ca33fae50a91" name="Directory Name" type="Data"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><display x="30" y="-135" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a1f89739-7f1c-4179-82ea-b123ecfc2854" name="Write Binary Data" type="SubSheetInfo"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><narrative>Writes binary data to a file. Any existing data in the file (if it exists) will be replaced.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="067fe5ce-ad15-436e-92fa-11e920e00501" name="Start" type="Start"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="binary" name="Binary Data" narrative="The data to write to the file" stage="Binary Data" /><input type="text" name="File Name" narrative="The full path of the file to write to" stage="FileName" /></inputs><onsuccess>48430903-e8af-4e4a-8544-8b04afc3478b</onsuccess></stage><stage stageid="83dc26e0-402d-403d-a18c-0d3ca147ba6d" name="Binary Data" type="Data"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><display x="90" y="-105" /><datatype>binary</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="48430903-e8af-4e4a-8544-8b04afc3478b" name="Write Binary Data" type="Code"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="binary" name="Binary Data" expr="[Binary Data]" /><input type="text" name="FileName" expr="[FileName]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>aed480e9-2938-4d36-b400-a3bd2580921a</onsuccess><code><![CDATA[Try
	File.WriteAllBytes(FileName, Binary_Data)
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="709d1a16-f19e-4504-ae79-4a48d1e058c7" name="End" type="End"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="15" y="30" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="43cbdbc2-6fdc-4080-b257-af95daad3fe4" name="Success" type="Data"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="-120" y="45" w="90" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="0aebe753-5358-4cf3-982a-a9f0a9870be7" name="Message" type="Data"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="-120" y="75" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5e035935-d499-4706-8ba0-78fdee0a782f" name="FileName" type="Data"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><display x="-60" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c7604000-e2fb-4a03-b8b4-caac4c6b9f9b" name="Combine Path" type="SubSheetInfo"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><narrative>Takes a file and folder and combines them into a full path.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="71908284-0a93-418a-9205-32dc4780032c" name="Start" type="Start"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The path will have been combined." /></postconditions><display x="120" y="-105" /><inputs><input type="text" name="Folder" narrative="The folder to combine" stage="Folder" /><input type="text" name="File Name" narrative="The file to combine" stage="File Name" /></inputs><onsuccess>39d35633-fc08-4dd1-a13a-1bfc9a0a9bd1</onsuccess></stage><stage stageid="39d35633-fc08-4dd1-a13a-1bfc9a0a9bd1" name="Combine Path" type="Code"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><loginhibit /><display x="120" y="-45" /><inputs><input type="text" name="Folder" expr="[Folder]" /><input type="text" name="File Name" expr="[File Name]" /></inputs><outputs><output type="text" name="Path" stage="Path" /></outputs><onsuccess>b4d82bcb-e011-4728-a3ec-4c052dcebaaf</onsuccess><code><![CDATA[
Path = IO.Path.Combine(Folder, File_Name)
]]></code></stage><stage stageid="dca04a3f-b696-45b1-95c8-63dce520abe3" name="File Name" type="Data"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><display x="-90" y="60" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e27e592f-8a2e-4df9-9453-1cdc8621051b" name="Folder" type="Data"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><display x="-90" y="30" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b4d82bcb-e011-4728-a3ec-4c052dcebaaf" name="End" type="End"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><loginhibit /><display x="120" y="15" /><outputs><output type="text" name="Path" narrative="The combined full path" stage="Path" /></outputs></stage><stage stageid="ef4fc19c-8897-431e-8688-11a52561113f" name="Path" type="Data"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><display x="195" y="15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a664d6c1-8951-4309-95b7-b7ae2edced0d" name="Create Directory" type="SubSheetInfo"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><narrative>Creates a directory under the given path.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="82e63828-72ff-4705-8c88-89c3316aa73e" name="Start" type="Start"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="Directory Path" narrative="The path in which to create the directory" stage="Directory Path" /><input type="flag" name="Error If Already Exists" narrative="True to generate an error if the directory already exists" stage="Error If Already Exists" /></inputs><onsuccess>98af3f34-4ec7-49c5-a6cc-1cf6192b0e05</onsuccess></stage><stage stageid="e061382f-4149-485b-9668-f2fc0ca334bd" name="End" type="End"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><loginhibit /><display x="15" y="30" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Error Message" /></outputs></stage><stage stageid="800212c5-6bfb-4df9-b501-39f55906a7b2" name="Directory Path" type="Data"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><display x="120" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e00501ce-6aa6-4616-9bf2-3904d515656c" name="Error If Already Exists" type="Data"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><display x="180" y="-105" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="98af3f34-4ec7-49c5-a6cc-1cf6192b0e05" name="Create Directory" type="Code"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><loginhibit /><display x="15" y="-60" /><inputs><input type="text" name="Directory Path" expr="[Directory Path]" /><input type="flag" name="ErrorIfAlreadyExists" expr="[Error If Already Exists]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>060a1fdb-6243-40f1-96e0-1c0b54382bfa</onsuccess><code><![CDATA[Try
   If Not Directory.Exists(Directory_Path) Then
   	Directory.CreateDirectory(Directory_Path)
   Else
      If ErrorIfAlreadyExists Then Throw New ApplicationException("Directory already exists")
   End If

	Success = True
Catch Ex as Exception
	Success = False
	Error_Message = Ex.ToString()
End Try]]></code></stage><stage stageid="3b33d39b-1c7c-4664-ab8b-859aa2e15836" name="Success" type="Data"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><display x="120" y="-60" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9cbff7ae-931b-479f-b70f-7773ddda315c" name="Error Message" type="Data"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><display x="180" y="-60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20cbacd9-1e17-4fc0-85de-64615b1f3d18" name="Delete Directory" type="SubSheetInfo"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><narrative>Deletes a directory and if Recursive is True will delete all subdirectories if present</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="df3458a7-2e7e-451c-b27a-efc3737c22a4" name="Start" type="Start"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><loginhibit /><display x="-45" y="-135" /><inputs><input type="text" name="Directory Path" narrative="The path of the directory to delete" stage="Directory Path" /><input type="flag" name="Error If Not Exists" narrative="Set True to raise an error if the path does not exist" stage="Error If Not Exists" /><input type="flag" name="Recursive" narrative="Set True to delete all sub-directories of the path aswell" stage="Recursive" /></inputs><onsuccess>ef40ac3e-3a06-4ca9-a3be-daae97b8c700</onsuccess></stage><stage stageid="09677c01-2e36-4330-ae33-defa66a1e7b1" name="End" type="End"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><loginhibit /><display x="-45" y="0" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Error Message" /></outputs></stage><stage stageid="3afa3efd-a788-4410-a16c-5e2ecfc599d8" name="Directory Path" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="75" y="-135" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ef40ac3e-3a06-4ca9-a3be-daae97b8c700" name="Delete Directory" type="Code"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><loginhibit /><display x="-45" y="-90" /><inputs><input type="text" name="Directory Path" expr="[Directory Path]" /><input type="flag" name="Recursive" expr="[Recursive]" /><input type="flag" name="ErrorIfNotExists" expr="[Error If Not Exists]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>8db31208-966a-494a-9315-8a4add93c64c</onsuccess><code><![CDATA[Try
   If Directory.Exists(Directory_Path) Then

		Dim SubDirectories As Boolean
		SubDirectories = False

		Dim SubdirectoryEntries As String() 
		SubdirectoryEntries = Directory.GetDirectories(Directory_Path) 
		
		If SubdirectoryEntries.Length > 0 Then SubDirectories = True

		If SubDirectories And Not Recursive Then Throw New ApplicationException("Directory has sub directories and will not be deleted")
   	
		Directory.Delete(Directory_Path, Recursive) 
   
Else
      If ErrorIfNotExists Then Throw New ApplicationException("Directory does not exist")
   End If

	Success = True


Catch UAEx as UnauthorizedAccessException
	Success = False
	Error_Message = "The caller does not have the required permission to delete this directory or sub directories"

Catch ANEx as ArgumentNullException
	Success = False
	Error_Message = "Please check Directory Path parameter is not null"

Catch AEx as ArgumentException
	Success = False
	Error_Message = "Please check Directory Path parameter is a valid string"

Catch PTLEx as PathTooLongException
	Success = False
	Error_Message = "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."

Catch Ex as Exception
	Success = False
	Error_Message = Ex.ToString()

End Try]]></code></stage><stage stageid="1ea4ba58-4e52-4229-9f95-9f91c0fda672" name="Success" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="105" y="-75" w="120" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cd89d345-b43b-43b1-a112-d69cd7b07387" name="Error Message" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="240" y="-45" w="180" h="90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="498faab3-e919-4560-a284-8303f82f3c54" name="Recursive" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="180" y="-135" w="120" h="30" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="c7f09a8a-5e8c-4bd8-ae1c-03c88a61bc8b" name="Error If Not Exists" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="285" y="-135" w="120" h="30" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="1a001ca1-2f75-4d52-8668-8537da4738b3" name="Sub Directory Exists" type="SubSheetInfo"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><narrative>Checks if a directory contains sub directories</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="9d21f26b-5ccc-4f2f-b6f3-3443cb23a95f" name="Start" type="Start"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><loginhibit /><display x="-15" y="-150" /><inputs><input type="text" name="Directory Path" narrative="The path of the directory to check for sub directories" stage="Directory Path" /></inputs><onsuccess>9bd1eb97-f903-4b5b-bdb0-9aa7d84feead</onsuccess></stage><stage stageid="167ee595-8609-4b40-9cbb-70394613201b" name="End" type="End"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><loginhibit /><display x="-15" y="-15" /><outputs><output type="flag" name="Exists" narrative="True if sub directories exist" stage="Exists" /><output type="flag" name="Success" narrative="True if the check was successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Error Message" /></outputs></stage><stage stageid="9bd1eb97-f903-4b5b-bdb0-9aa7d84feead" name="Get Sub Directories" type="Code"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><loginhibit /><display x="-15" y="-105" /><inputs><input type="text" name="Directory Path" expr="[Directory Path]" /></inputs><outputs><output type="flag" name="Exists" stage="Exists" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>33ba9e06-b05b-4e51-baa6-7f6c9165c558</onsuccess><code><![CDATA[Try
   
Exists = False
If Directory.Exists(Directory_Path) Then
   	Dim subdirectoryEntries As String() 
		
		subdirectoryEntries = Directory.GetDirectories(Directory_Path) 
		
		If subdirectoryEntries.Length > 0 Then Exists = True

   Else
      Throw New ApplicationException("Directory does not exist")
   End If

	Success = True
Catch Ex as Exception
	Success = False
	Error_Message = Ex.ToString()
End Try
]]></code></stage><stage stageid="50a0102e-8884-426d-b94f-ed07f6b9eb46" name="Exists" type="Data"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><display x="225" y="-15" w="120" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c52a3808-5f20-4498-a5a6-6e8bd391e41c" name="Directory Path" type="Data"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><display x="225" y="-105" w="120" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\TEMP\Test Directory\A\c</initialvalue><private /><alwaysinit /></stage><stage stageid="227470b6-fe82-4351-a497-6094c99e4193" name="Success" type="Data"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><display x="330" y="-15" w="120" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="586142aa-051e-4ec9-8b60-fe063eb60b77" name="Error Message" type="Data"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><display x="450" y="-15" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="12caee97-e82e-461c-8b22-dabe4248d7a8" name="Get CSV Text As Collection" type="SubSheetInfo"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><narrative>Turns a comma seperated values file into a collection</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="939139f9-83c3-4076-85ca-1daa3e637601" name="Start" type="Start"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><loginhibit /><display x="-15" y="-135" /><inputs><input type="text" name="CSV File Path" narrative="The full path to the CSV file" stage="CSV Location" /><input type="flag" name="First Line Is Header" narrative="Set True if you want to treat the first line as a header" stage="First Line Is Header" /></inputs><onsuccess>dd7efc8a-65d0-432e-a205-643037779b8d</onsuccess></stage><stage stageid="c85955cf-695f-4e82-acdb-72332a337fc7" name="End" type="End"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><loginhibit /><display x="-15" y="-45" /><outputs><output type="collection" name="CSV Values" narrative="The collection populated with the values of the CSV file" stage="CSV Values" /></outputs></stage><stage stageid="96016690-fb73-49d3-bcfc-56b25dd9d3db" name="CSV Location" type="Data"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><display x="60" y="-135" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\BluePrism\Medalytix\iGrading\Test_Suite\ImagesIndex.csv</initialvalue><private /><alwaysinit /></stage><stage stageid="dd7efc8a-65d0-432e-a205-643037779b8d" name="Parse CSV" type="Code"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><loginhibit /><display x="-15" y="-90" w="90" h="30" /><inputs><input type="text" name="CSV Location" expr="[CSV Location]" /><input type="flag" name="First_Line_Is_Header" expr="[First Line Is Header]" /></inputs><outputs><output type="collection" name="Values" stage="CSV Values" /></outputs><onsuccess>c85955cf-695f-4e82-acdb-72332a337fc7</onsuccess><code><![CDATA[Dim HDRString As String = "No"
If First_Line_Is_Header Then HDRSTring = "Yes"


Dim Folder as String = nothing
Dim FileName As String = Nothing
Split_Path(CSV_Location, Folder, Filename)

Dim cn As New OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=" & Folder & ";Extended Properties=""Text;HDR=" & HDRString & ";Format=Delimited""")
Dim da As New OleDbDataAdapter()
Dim ds As New DataSet()
Dim cd As New OleDbCommand("SELECT * FROM [" & Filename & "]", cn)

cn.Open()
da.SelectCommand = cd
ds.Clear()
da.Fill(ds, "CSV")
Values = ds.Tables(0)
cn.Close()]]></code></stage><stage stageid="5fe33334-21a0-4751-931d-92622545fe5d" name="CSV Values" type="Collection"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><display x="75" y="-30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="1dc002ef-16ce-4e9b-9eed-1c4c8a375f11" name="First Line Is Header" type="Data"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><display x="120" y="-135" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="e1836bd9-a0bc-45e9-9f62-2835fb1f6144" name="Get Special Folder Path" type="SubSheetInfo"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><narrative>Gets the path of a special folder.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="984cc49d-2710-42f2-85cc-b02b1af6ff97" name="Start" type="Start"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><loginhibit /><display x="-30" y="-135" /><inputs><input type="text" name="Special Folder Name" narrative="The name of the special folder. Supported values include ApplicationData, DesktopDirectory, MyDocuments, ProgramFiles. The values correspond to the .NET Environment.SpecialFolder enumeration." stage="Special Folder Name" /></inputs><onsuccess>548052a7-4e77-4da0-a80e-07ce9d38ecba</onsuccess></stage><stage stageid="f77e4b56-0c20-4361-b1ac-7fbae4cebd0a" name="End" type="End"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><loginhibit /><display x="-30" y="-30" /><outputs><output type="text" name="Folder Path" narrative="The corresponding path of the requested special folder" stage="Folder Path" /></outputs></stage><stage stageid="1eb8ae16-c4b3-4a26-9476-974fec0fb4c4" name="Special Folder Name" type="Data"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><display x="75" y="-135" w="120" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">InternetCache</initialvalue><private /><alwaysinit /></stage><stage stageid="548052a7-4e77-4da0-a80e-07ce9d38ecba" name="Get Folder Path" type="Code"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><loginhibit /><display x="-30" y="-90" w="120" h="30" /><inputs><input type="text" name="Special Folder" expr="[Special Folder Name]" /></inputs><outputs><output type="text" name="Folder Path" stage="Folder Path" /></outputs><onsuccess>f77e4b56-0c20-4361-b1ac-7fbae4cebd0a</onsuccess><code><![CDATA[Dim EnumVal as Environment.SpecialFolder
Try
	EnumVal = Ctype(System.Enum.Parse(GetType(Environment.SpecialFolder), Special_Folder), Environment.SpecialFolder)
Catch Ex As Exception
	Throw New ApplicationException("Value '" & Special_Folder & "' is not recognised as a special folder")
End Try

Folder_Path = Environment.GetFolderPath(EnumVal)]]></code></stage><stage stageid="394a43a7-79f9-4edb-887f-d051122fa5f0" name="Folder Path" type="Data"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><display x="75" y="-30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f9a81b69-65ad-4194-8361-a2e49aab6c2c" name="Download File" type="SubSheetInfo"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><narrative>Downloads a file from a web URL and saves it in a folder on disk.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="ce6133ff-352a-4e74-b9a9-a2bb5d8c8858" name="Start" type="Start"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><display x="0" y="-135" /><inputs><input type="text" name="Source URL" narrative="The URL of the file that is to be downloaded" stage="Source URL" /><input type="text" name="Destination Path" narrative="The location of the folder where the file is to be saved" stage="Destination Path" /></inputs><onsuccess>a9bb95cf-84c0-42b2-9fac-e36252a56808</onsuccess></stage><stage stageid="00124bb2-c920-40c3-92e1-efb49b029dc0" name="End" type="End"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><loginhibit /><display x="0" y="-45" /></stage><stage stageid="5b30cabb-184c-427b-860e-a315e03763ba" name="Destination Path" type="Data"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><display x="-195" y="0" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1ee09d3b-a12d-48c7-89a2-7a947d431ac5" name="Source URL" type="Data"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><display x="-195" y="-30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a9bb95cf-84c0-42b2-9fac-e36252a56808" name="Download File" type="Code"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><loginhibit /><display x="0" y="-90" w="90" h="30" /><inputs><input type="text" name="Url" expr="[Source URL]" /><input type="text" name="Path" expr="[Destination Path]" /></inputs><onsuccess>00124bb2-c920-40c3-92e1-efb49b029dc0</onsuccess><code><![CDATA[Using wc As New System.Net.WebClient()
	wc.DownloadFile(Url, Path)
End Using]]></code></stage><stage stageid="744e3f22-df5c-4d9e-984b-eceb276cbb95" name="Read Lines From File" type="SubSheetInfo"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><narrative>Reads a range of lines fom a text file</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="09ef75fb-7cbe-4b43-900b-bd0112866589" name="File Path" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="-30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b3721f65-c0fd-4187-9e61-da35cecde126" name="Start Line" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="0" w="150" h="30" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3444d260-8bd2-44b4-91c8-1f4dc3a07e1d" name="End Line" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="30" w="150" h="30" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="de2f0517-71e7-4bfa-b20b-0f6049ee064d" name="EOF" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="225" w="150" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e19c2d2b-f05b-48b3-a6c0-e6c368a0720b" name="Success" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-195" y="90" w="150" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="2814638b-191d-44de-9e9d-e38ce3a2bdb5" name="Message" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-195" y="120" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="677752c3-298c-4ea1-abaf-244b239d65d0" name="Lines" type="Collection"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="180" w="150" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="e5bbb949-f610-4f45-bcb7-10a0fc6b123d" name="Line Count" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="255" w="150" h="30" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="bf17d04b-65f1-4bf3-a12c-7121e3c2a075" name="Start" type="Start"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><preconditions><condition narrative="The text file exists and the user has appropriate privileges to allow reading it" /><condition narrative="The Start Line argument is less than or equal to the End Line argument" /></preconditions><postconditions><condition narrative="The lines between and including Start Line and End Line are returned" /><condition narrative="EOF will indicate if the end of the file was reached before End Line was reached" /></postconditions><display x="-15" y="-135" /><inputs><input type="text" name="File Path" narrative="The file to read" stage="File Path" /><input type="number" name="Start Line" narrative="The first line to read" stage="Start Line" /><input type="number" name="End Line" narrative="The last line to read" stage="End Line" /></inputs><onsuccess>4942f615-9ff9-497d-b3ff-dd697860c232</onsuccess></stage><stage stageid="76661ec7-b5b7-4cf5-9b34-27ca45c70b40" name="Read Lines" type="Code"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-15" y="-45" w="90" h="30" /><inputs><input type="text" name="File Path" expr="[File Path]" /><input type="number" name="Start Line" expr="[Start Line]" /><input type="number" name="End Line" expr="[End Line]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /><output type="collection" name="Lines" stage="Lines" /><output type="number" name="Line Count" stage="Line Count" /><output type="flag" name="EOF" stage="EOF" /></outputs><onsuccess>7d20fad4-4b50-4841-94e9-5f38571de063</onsuccess><code><![CDATA[' Assume success
Success = True
Message = ""

Try
	Lines = New DataTable()
	Lines.Columns.Add("Line", GetType(String))

	Using sr As New StreamReader(File_Path)

		EOF = False
		Start_Line = Math.Max(1, Start_Line)

		Dim line as String
		Dim lineNo As Integer = 0
		Do
			line = sr.ReadLine()
			lineNo += 1

			If line Is Nothing Then EOF = True : Exit Do
			If lineNo >= Start_Line Then Lines.Rows.Add(line)
			If lineNo = End_Line Then Exit Do

		Loop Until line Is Nothing
		Line_Count = Lines.Rows.Count

	End Using

Catch ex As Exception
	Success = False
	Message = ex.Message

End Try
]]></code></stage><stage stageid="bcb21a17-13b7-404f-b11f-16d75385411f" name="End" type="End"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-15" y="45" /><outputs><output type="flag" name="Success" narrative="True is the read was successful" stage="Success" /><output type="text" name="Message" narrative="The exception detail if the read was unsuccessful" stage="Message" /><output type="collection" name="Lines" narrative="The lines read - the collection contains a single text column 'Line'" stage="Lines" /><output type="number" name="Line Count" narrative="The number of lines read" stage="Line Count" /><output type="flag" name="End of File" narrative="True if the end of the file was reached before the 'End Line' was reached" stage="EOF" /></outputs></stage><stage stageid="4942f615-9ff9-497d-b3ff-dd697860c232" name="Start Line &gt; End Line?" type="Decision"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-15" y="-90" w="120" h="30" /><decision expression="[Start Line] &gt; [End Line]" /><ontrue>fb13e8fc-442c-4cbb-87c1-b4ec596ee962</ontrue><onfalse>76661ec7-b5b7-4cf5-9b34-27ca45c70b40</onfalse></stage><stage stageid="fb13e8fc-442c-4cbb-87c1-b4ec596ee962" name="Semi-Exception" type="MultipleCalculation"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="105" y="-90" /><onsuccess>362c841e-8d1e-4972-b0b5-710b7bdb1f27</onsuccess><steps><calculation expression="False" stage="Success" /><calculation expression="&quot;Start Line (&quot; &amp; [Start Line] &amp; &quot;) cannot be later than End Line (&quot; &amp; [End Line] &amp; &quot;)&quot;" stage="Message" /></steps></stage><stage stageid="362c841e-8d1e-4972-b0b5-710b7bdb1f27" name="anchor1" type="Anchor"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="105" y="0" w="10" h="10" /><onsuccess>7d20fad4-4b50-4841-94e9-5f38571de063</onsuccess></stage><stage stageid="d049bf7c-ac22-489e-bf3d-f62d1b4b744a" name="Configure" type="SubSheetInfo"><subsheetid>1e3c209b-a109-46a0-9ff0-e2dc6b8791fb</subsheetid><narrative>Configures this instance of the utility VBO. Calling it with no parameters will cause the configuration to be reset to default values.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="1f64d939-b1af-4604-a33c-d730215d51aa" name="Start" type="Start"><subsheetid>1e3c209b-a109-46a0-9ff0-e2dc6b8791fb</subsheetid><loginhibit /><display x="15" y="-135" /><inputs><input type="flag" name="Raise exception on any failure" narrative="Flag indicating if failure should cause an exception to be raised rather than a return of a success output value" stage="Raise exception on any failure" /></inputs><onsuccess>63f0aaf5-553d-43fd-b40d-6b3196b7c075</onsuccess></stage><stage stageid="63f0aaf5-553d-43fd-b40d-6b3196b7c075" name="End" type="End"><subsheetid>1e3c209b-a109-46a0-9ff0-e2dc6b8791fb</subsheetid><loginhibit /><display x="15" y="90" /></stage><stage stageid="9e00cf6f-bf06-484e-bcc5-5c0ea5f2dcf1" name="Raise exception on any failure" type="Data"><subsheetid>1e3c209b-a109-46a0-9ff0-e2dc6b8791fb</subsheetid><display x="-195" y="-30" w="180" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><alwaysinit /></stage><stage stageid="e8d8821c-ea33-4e7e-a499-9095f71ab91f" name="Raise Exception If Appropriate" type="SubSheetInfo"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="360a869a-24fc-4d19-abbe-b1444dd28c58" name="Start" type="Start"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" stage="Success" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" stage="Error Message" /></inputs><onsuccess>f72ef338-2cee-4c45-8a9a-31011244644f</onsuccess></stage><stage stageid="94d641fc-9887-40ca-8919-8613e5fafda0" name="End" type="End"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><loginhibit /><display x="15" y="-15" /></stage><stage stageid="af41ccc8-b3bd-4925-84ba-5df075402e08" name="Success" type="Data"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><display x="-195" y="-30" w="120" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fd0e1bfa-b960-4e5e-b8e5-9a24adfd36e1" name="Error Message" type="Data"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><display x="-195" y="0" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f72ef338-2cee-4c45-8a9a-31011244644f" name="Should Raise Exception?" type="Decision"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><loginhibit /><display x="15" y="-60" w="90" h="30" /><decision expression="[Success] = False AND [Raise exception on any failure]" /><ontrue>f42fee03-c39b-416a-b55f-3d69a9ebe812</ontrue><onfalse>94d641fc-9887-40ca-8919-8613e5fafda0</onfalse></stage><stage stageid="f42fee03-c39b-416a-b55f-3d69a9ebe812" name="FAIL" type="Exception"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><display x="90" y="-60" w="30" h="30" /><exception type="Action Failed" detail="[Error Message]" /></stage><stage stageid="9cdf0f78-05d1-44d4-80a0-9f78ca0b22ae" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>3764ae17-85d7-4ebb-99b5-502b95d7abd6</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="3dde4f26-00a8-4e1a-af12-b8a14178d89c" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>aa67216d-b83f-4c14-9f71-5ec6df626c08</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="060a1fdb-6243-40f1-96e0-1c0b54382bfa" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Error Message]" /></inputs><onsuccess>e061382f-4149-485b-9668-f2fc0ca334bd</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="8db31208-966a-494a-9315-8a4add93c64c" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><loginhibit /><display x="-45" y="-45" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Error Message]" /></inputs><onsuccess>09677c01-2e36-4330-ae33-defa66a1e7b1</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="33ba9e06-b05b-4e51-baa6-7f6c9165c558" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><loginhibit /><display x="-15" y="-60" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Error Message]" /></inputs><onsuccess>167ee595-8609-4b40-9cbb-70394613201b</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="d0021635-222d-46f1-93ad-a7435640cf9f" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>82b919fe-64b2-4c2b-8173-5706f671c5ce</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="249acd28-3283-498f-aca8-76c67cb2295c" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>576295b9-757e-4588-948e-34aac5140c29</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="acf72cc7-cf73-466f-8c22-9fb633ed3c24" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>a7bae4fd-01fc-4447-8cf4-fbfd04353f72</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="acbc8cd8-d4ad-4eae-a7c3-ebbac1d3f4c7" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>2c8abe9a-1466-4283-999a-c5c7838a0e27</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="1e441202-3878-4eb6-b156-6f517be6de00" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>39862014-df78-414b-9ccd-5c0d392aa282</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="7419fb71-5c79-4fb6-9e59-b9fbc1d63e45" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>0a76495e-bc0d-4cea-bae0-85da1e15c74f</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="7d20fad4-4b50-4841-94e9-5f38571de063" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-15" y="0" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>bcb21a17-13b7-404f-b11f-16d75385411f</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="9219c3c4-effd-4dfc-9020-8dafd054ea8f" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-30" y="-45" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>1aab3a10-a813-470b-97c8-57938a0d0024</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="aed480e9-2938-4d36-b400-a3bd2580921a" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>709d1a16-f19e-4504-ae79-4a48d1e058c7</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="66ca6e8f-1361-4e22-886f-e00c72ac2250" name="Note2" type="Note"><narrative>‘The MIT License’

© 2020 Blue Prism Limited

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
</narrative><display x="225" y="-15" w="300" h="270" /><font family="Segoe UI" size="10" style="Regular" color="0000FF" /></stage></process></object>
        <object id="1b13f5b8-01d1-441e-bd7f-54884a24d71f" name="Utility - Strings" xmlns="http://www.blueprism.co.uk/product/process"><process name="Utility - Strings" version="6.5.1.14401" bpversion="6.10.1.35171" narrative="Utility functions for manipulating text." byrefcollection="true" type="object" runmode="Background"><appdef><element name="Application Root"><id>b30f5d67-5c3c-49c9-8f9b-66d573097498</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>60</camerax><cameray>-35</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="9a74af4c-280a-4e30-bdbb-21295b6256ca" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="527ca986-a03f-4231-880e-5b1c244b035e" type="Normal" published="True"><name>Compare Font Text</name><view><camerax>150</camerax><cameray>139</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e70e8f13-02df-4b14-bb74-6fd5c4c95928" type="Normal" published="True"><name>Delete Characters</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="040cc29a-27ac-402c-8a66-328554dd4bc0" type="Normal" published="True"><name>Escape Sendkeys String</name><view><camerax>0</camerax><cameray>5</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="06780f7c-9622-4d84-9db3-bb56a2ff9f36" type="Normal" published="True"><name>Extract Regex Values</name><view><camerax>70</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="5110b353-010b-4874-97bd-8b7621c24384" type="Normal" published="True"><name>Format Number</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d8fea7a8-24d9-41c8-9397-a3839e6ffdc1" type="Normal" published="True"><name>Generate New GUID</name><view><camerax>0</camerax><cameray>-84</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f9add4d4-31de-4c0f-a109-0b51fa576a23" type="Normal" published="True"><name>Get Collection as CSV</name><view><camerax>0</camerax><cameray>2</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f34fc98d-a02f-4f58-92d4-c4688513439b" type="Normal" published="True"><name>Get Collection as Delimited Text</name><view><camerax>-118</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f5b26213-5463-4b2d-b10f-b188876b436f" type="Normal" published="True"><name>Get CSV As Collection</name><view><camerax>-74</camerax><cameray>14</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="b30fe729-3663-4fd9-b97a-505752b1e33f" type="Normal" published="True"><name>Get Delimited Text As Collection</name><view><camerax>-9</camerax><cameray>3</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="fcddf4bf-83af-4431-88db-cc2c88390cec" type="Normal" published="True"><name>Get Newline Character</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e8af11f7-dfd4-4c86-9935-e83828b9e711" type="Normal" published="True"><name>Get XML Attribute</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="818441a5-ffec-4841-b0ea-00712caf63aa" type="Normal" published="True"><name>Get XML Elements</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0244396a-1d3d-4892-b6cb-461468f4c7e1" type="Normal" published="True"><name>InStr</name><view><camerax>0</camerax><cameray>-2</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="9ab28c01-86eb-458d-b8d9-74f98926d266" type="Normal" published="True"><name>InStrRev</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a854bb6a-4399-4e51-8fc3-64f9e1d4f896" type="Normal" published="True"><name>Join Lines</name><view><camerax>152</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a2c09338-7850-4daf-a545-8972d333b826" type="Normal" published="True"><name>Join Text</name><view><camerax>65</camerax><cameray>75</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ef8de52d-842b-45f0-8f1b-619bc97d4bbc" type="Normal" published="True"><name>PadLeft</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="65117a41-f7ff-4f3f-abd1-7a3cbe18cfda" type="Normal" published="True"><name>Remove Non-word Characters</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="052cf5ee-03af-4a55-b198-6caa90b8c5ed" type="Normal" published="True"><name>Replace Characters</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e6bab90c-ddfd-48c0-af38-804fe4f770ed" type="Normal" published="True"><name>Split Lines</name><view><camerax>0</camerax><cameray>-6</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="6a710d42-8f41-45d0-9e74-1eddf74c0e75" type="Normal" published="True"><name>Split Lines by Length</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a5871062-5ad2-4950-afbc-cb5b1b7a7f0b" type="Normal" published="True"><name>Split Text</name><view><camerax>0</camerax><cameray>-56</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a6b6398e-c21a-4c4e-9742-65ccad8370d9" type="Normal" published="True"><name>Test Regex Match</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="d8c547cc-60d0-459b-876f-90bf696a5757" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><onsuccess>807e7d33-91e2-4241-a85e-ea0718fc487d</onsuccess></stage><stage stageid="807e7d33-91e2-4241-a85e-ea0718fc487d" name="End" type="End"><loginhibit /><display x="15" y="90" /></stage><stage stageid="1a8c9ebd-54e1-442f-a6c7-e87df3b59232" name="Stage1" type="ProcessInfo"><display x="-180" y="-105" w="180" h="90" /><references><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Data</import><import>System.IO</import><import>System.XML</import><import>System.Diagnostics</import><import>Microsoft.VisualBasic</import><import>System.Data</import><import>system.text.regularexpressions</import><import>System.Text</import><import>System.Collections.Generic</import><import>Microsoft.VisualBasic.FileIO</import></imports><language>visualbasic</language><globalcode><![CDATA[


]]></globalcode><code><![CDATA[Public Function GetDataTable(ByVal ColumnNamesCSV As String, ByVal ColumnTypesCSV As String) As DataTable

	Dim objTable As DataTable
	Dim objColumn As DataColumn
	Dim aColumnNames As String() = ColumnNamesCSV.Split(",")
	Dim aColumnTypes As String() = ColumnTypesCSV.Split(",")

	Try
		objTable = New DataTable
		For i As Integer = 0 To aColumnNames.Length - 1
			objColumn = New DataColumn 
			objColumn.DataType = System.Type.GetType(aColumnTypes(i).Trim)
			objColumn.ColumnName = aColumnNames(i).Trim
			objTable.Columns.Add(objColumn)
		Next
		
	Catch e As Exception
		objTable = nothing	
	End Try

	Return objTable

End Function

Private Function SplitStringInto( _
 ByVal fldName As String, _
 ByVal txt As String, _
 ByVal ParamArray splitters() As String) As DataTable
	Dim dt As New DataTable()
	dt.Columns.Add(fldName, GetType(String))

	For Each s As String In txt.Split(splitters, StringSplitOptions.None)
		dt.Rows.Add(New Object() {s})
	Next

	Return dt
End Function

Public Shared Function ParseCsvToList(ByVal csv As String, ByVal delimiter As String) As List(Of String())
	Dim result = New List(Of String())()

	Using sr As New StringReader(csv)
		Using lineParser As New TextFieldParser(sr)
			lineParser.TextFieldType = FieldType.Delimited
			lineParser.SetDelimiters(delimiter)
			While Not lineParser.EndOfData

				Dim fields As String() = lineParser.ReadFields()
				result.Add(fields)
			End While
		End Using
	End Using

	Return result
End Function


''' -----------------------------------------------------------------------------
''' <summary>
''' Serialises a datatable to the supplied stream.
''' </summary>
''' <param name="Writer">The stream writr to which the datatable should
''' be serialised. Eg this may correspond to a file stream.</param>
''' <param name="Table">The datatable to be serialised.</param>
''' <param name="IncludeHeaderRow">When true, the column headers will
''' be wrtten out on the first row.</param>
''' -----------------------------------------------------------------------------
Public Shared Sub WriteDataTable(ByVal Writer As StringBuilder, ByVal Table As DataTable, ByVal IncludeHeaderRow As Boolean, ByVal delimiter As String)
	If (delimiter.Trim().Length = 0)
		delimiter = ","
	End If

	If IncludeHeaderRow Then
		For i As Integer = 0 To Table.Columns.Count - 1
			WriteItem(Writer, Table.Columns(i).ColumnName)
			If i < Table.Columns.Count - 1 Then
				Writer.Append(delimiter)
			Else
				Writer.Append(vbCrLf)
			End If
		Next
	End If

	For Each Row As DataRow In Table.Rows
		For i As Integer = 0 To Table.Columns.Count - 1
			WriteItem(Writer, Row(i).ToString)
			If i < Table.Columns.Count - 1 Then
				Writer.Append(delimiter)
			Else
				Writer.Append(vbCrLf)
			End If
		Next
	Next
End Sub



''' -----------------------------------------------------------------------------
''' <summary>
''' Writes a csv data cell, escaping quotes and new lines where necessary.
''' </summary>
''' <param name="Writer">The writer to which the item should be written.</param>
''' <param name="Value">The value to be written.</param>
''' -----------------------------------------------------------------------------
Private Shared Sub WriteItem(ByVal Writer As StringBuilder, ByVal Value As String)
	If Value.IndexOfAny(("""," & vbCrLf).ToCharArray) > -1 Then
		Writer.Append("""" & Value.Replace("""", """""") & """")
	Else
		Writer.Append(Value)
	End If
End Sub


'Splits text into lines of approximately equal length, looking for
'gaps between words as splitting points in order to avoid ugly
'line splitting in the middle of words. Useful for mainframe memos
'where a long message needs to be broken into lines of up to 80
'characters.
'
Private Shared Function SplitTextByLengthEngine(Texttosplit As String, MaxLineLength As Integer) As List(of String)
	Dim RetVal as New List(Of String)
	MaxLineLength =  Math.Min(MaxLineLength, TexttoSplit.Length)

	'We look for the last space within (MaxLineLength + 1) and then work backwards
	'(always by at least one) to find the last non-space character. We can then
	'chop at this point, assuming such exists. Otherwise we just chop at the
	'requested line length accepting we will be splitting a word.
	Dim LastIndex as integer = TexttoSplit.Substring(0, Math.Min(MaxLineLength + 1, TextToSplit.Length)).LastIndexOf(" ")

	If TextToSplit.Length <= MaxLineLength OrElse LastIndex = -1 Then
		RetVal.Add(TexttoSplit.Substring(0, MaxLineLength))
		Dim RemainingText As String = TexttoSplit.SubString(MaxLineLength,TextToSplit.Length - MaxLineLength).Trim()
		If RemainingText.Length > 0 Then RetVal.AddRange(SplitTextByLengthEngine(RemainingText, MaxLineLength))
	Else
		'Track backwards to find previous non-space character
		Dim Index As Integer = LastIndex - 1
		While Index >= 0 Andalso TextToSplit.SubString(Index, 1) = " "
			Index -=1
		End While
		If Index >= 0 Then
			RetVal.Add(TextToSplit.SubString(0, Index + 1))
			Dim RemainingText As String = TexttoSplit.SubString(Index + 1, TextToSplit.Length - (Index + 1)).Trim()
			If RemainingText.Length > 0 Then RetVal.AddRange(SplitTextByLengthEngine(RemainingText, MaxLineLength))
		Else
			'Must all be spaces. We assume this are to be ignored
		End If
	End If

	Return RetVal
End Function

]]></code></stage><stage stageid="0bf7814a-647b-4bcb-b6a6-3d24dfd5b736" name="Clean Up" type="SubSheetInfo"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="b6df3b6c-090d-4126-a16c-8caa889b0646" name="Generate New GUID" type="SubSheetInfo"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><narrative>Generates a new globally unique identifier as text.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="0c56e2f8-68ce-48a3-97ad-81e1f076e9ce" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="be35a29d-2b71-42e1-9ca7-4534046d5dfc" name="Start" type="Start"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>bd80e756-d12c-4dc7-9d64-bbde733f60b7</onsuccess></stage><stage stageid="bd80e756-d12c-4dc7-9d64-bbde733f60b7" name="Get GUID" type="Code"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><loginhibit /><display x="15" y="-45" /><outputs><output type="text" name="id" stage="GUID" /></outputs><onsuccess>4930704e-00c1-456a-8aad-02220fd81c99</onsuccess><code><![CDATA[dim g as new Guid
id = guid.newguid.tostring]]></code></stage><stage stageid="695dad7d-b634-454c-9171-baf489698067" name="GUID" type="Data"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><display x="-60" y="-45" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4930704e-00c1-456a-8aad-02220fd81c99" name="End1" type="End"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><loginhibit /><display x="15" y="15" /><outputs><output type="text" name="GUID" narrative="The new guid" stage="GUID" /></outputs></stage><stage stageid="2271a79e-27e5-4434-b5be-146e02946317" name="new" type="Note"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="36451c72-b274-4817-a153-beb1e8a6e76a" name="Start" type="Start"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="-120" /><onsuccess>9a8c4505-8606-4a0c-b118-09a6b9932b3b</onsuccess></stage><stage stageid="9a8c4505-8606-4a0c-b118-09a6b9932b3b" name="End" type="End"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="90" /></stage><stage stageid="a130f3e8-fad5-413c-a068-75ac20600244" name="Remove Non-word Characters" type="SubSheetInfo"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><narrative>Trims non word characters from the begining and end of the text. Non word characters are any character that is NOT in the ranges a-z A-Z _ and 0-9</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="dd85470c-e10b-4f0b-b729-c006136517eb" name="Start" type="Start"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="Text" narrative="The text to remove the non word characters from" stage="Text" /></inputs><onsuccess>a2426b0a-eab8-4571-a6d9-fa89c49559be</onsuccess></stage><stage stageid="3eae8050-c325-49f6-9e3f-ee12400ca5d4" name="End" type="End"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="text" name="Trimmed Text" narrative="The text with the non word characters removed" stage="Trimmed Text" /></outputs></stage><stage stageid="a2426b0a-eab8-4571-a6d9-fa89c49559be" name="Trim" type="Code"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="Text" expr="[Text]" /></inputs><outputs><output type="text" name="Trimmed Text" stage="Trimmed Text" /></outputs><onsuccess>3eae8050-c325-49f6-9e3f-ee12400ca5d4</onsuccess><code><![CDATA[
dim r as new regex("^\W*|\W*$")
Trimmed_Text = r.replace(text, "")
]]></code></stage><stage stageid="1f3570bd-8411-4e92-8fd3-1dd418411570" name="Text" type="Data"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><display x="90" y="-105" /><datatype>text</datatype><initialvalue xml:space="preserve">    qwerqwer    </initialvalue><private /><alwaysinit /></stage><stage stageid="0967c44a-1a53-49a7-8bb4-e1f6733a41b0" name="Trimmed Text" type="Data"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><display x="90" y="-15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="00a08897-25f2-48e0-aa88-e40bb27b94e7" name="Split Lines" type="SubSheetInfo"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><narrative>Splits multiple line text into a collection text values with a single row per line.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="5f6c9d2f-247d-42a7-bc18-8b4283b21c80" name="Start" type="Start"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="Text to Split" narrative="The text to split" stage="Text to Split" /></inputs><onsuccess>ee14a8f3-9fd3-4342-abcf-3cbe1d57431a</onsuccess></stage><stage stageid="370a75cf-d54f-438d-b7b1-0f931038d7a2" name="End" type="End"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="collection" name="Split Values" narrative="The resulting collection containing the split values" stage="Split Values" /></outputs></stage><stage stageid="b655e5fa-2cb9-487a-b4e8-8faf44531e8d" name="Text to Split" type="Data"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><display x="90" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ee14a8f3-9fd3-4342-abcf-3cbe1d57431a" name="Split" type="Code"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><loginhibit /><display x="15" y="0" /><inputs><input type="text" name="Text to Split" expr="[Text to Split]" /></inputs><outputs><output type="collection" name="Split Values" stage="Split Values" /></outputs><onsuccess>370a75cf-d54f-438d-b7b1-0f931038d7a2</onsuccess><code><![CDATA[Split_Values = SplitStringInto("Value", _
 Text_to_Split, vbCrLf, vbLf, vbCr)]]></code></stage><stage stageid="5c6c7749-e4c1-45ef-9fb7-a7b7ca77214d" name="Split Values" type="Collection"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><display x="120" y="90" w="90" h="60" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Value" type="text" /></collectioninfo></stage><stage stageid="99d3d4f8-598b-44be-9744-5142537aff99" name="Split Text" type="SubSheetInfo"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><narrative>Splits text with a given delimiter into a collection of text values.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="97069dc2-f2a1-4f61-a3f6-e26e88d1da58" name="Start" type="Start"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><loginhibit /><display x="120" y="-105" /><inputs><input type="text" name="Text to Split" narrative="The text to split" stage="Text to Split" /><input type="text" name="Split Char" narrative="The split delimiter" stage="Split Char" /><input type="text" name="Collection Field Name" narrative="The name of the field for the resulting collection" stage="Collection Field Name" /></inputs><onsuccess>d1694d87-2fff-467b-9a07-5f5dd570bd41</onsuccess></stage><stage stageid="2972f0ee-292a-4bb0-bed5-c9a19f8945f6" name="End" type="End"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><loginhibit /><display x="120" y="90" /><outputs><output type="collection" name="Split Values" narrative="The resulting collection containing the split values" stage="Split Values" /></outputs></stage><stage stageid="33bff0c5-22b9-4ab3-ac0a-c352221a4f79" name="Text to Split" type="Data"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><display x="195" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d1694d87-2fff-467b-9a07-5f5dd570bd41" name="Split Text" type="Code"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><loginhibit /><display x="120" y="0" /><inputs><input type="text" name="Text to Split" expr="[Text to Split]" /><input type="text" name="Split Char" expr="[Split Char]" /><input type="text" name="Collection Field Name" expr="[Collection Field Name]" /></inputs><outputs><output type="collection" name="Split Values" stage="Split Values" /></outputs><onsuccess>2972f0ee-292a-4bb0-bed5-c9a19f8945f6</onsuccess><code><![CDATA[Split_Values = SplitStringInto( _
 Collection_Field_Name, _
 Text_to_Split, Split_Char)]]></code></stage><stage stageid="17ffca42-be51-4343-90e3-035d29366b7f" name="Split Values" type="Collection"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><display x="225" y="90" w="90" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="05ba6aed-e91b-4383-9001-69b78a2e474d" name="Split Char" type="Data"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><display x="255" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20afce2f-59e1-4fc1-896c-ab71d2f871b2" name="Collection Field Name" type="Data"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><display x="45" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="786d2d47-37c8-4324-8e43-8fc75f0eca95" name="Join Text" type="SubSheetInfo"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><narrative>Joins values from a collection into a single line of text using a given delimiter between values.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="ccd8aec8-19c3-4d48-a184-a8895ed1ebbf" name="Start" type="Start"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><inputs><input type="collection" name="Values" narrative="The text values collection to join" stage="Values" /><input type="text" name="Join Character" narrative="The delimeter between text values" stage="Join Character" /><input type="flag" name="Trim Values" narrative="Set true to apply trimming to the values" stage="Trim Values" /></inputs><onsuccess>b05ea94b-f0d1-4047-b854-04877801ef0b</onsuccess></stage><stage stageid="7dbff5b3-7cd4-406a-9650-265fb88988ef" name="End" type="End"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="285" /><outputs><output type="text" name="Joined Text" narrative="The resulting joined text" stage="Joined Text" /></outputs></stage><stage stageid="13059fce-ee5a-4fbc-a76c-efc5db5d1240" name="Values" type="Collection"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><display x="90" y="-105" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Item Value" type="text" /></collectioninfo></stage><stage stageid="b0cf2931-5486-4779-b457-e8af03062df8" name="Join Character" type="Data"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><display x="150" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="019a4343-9b5c-4400-8b76-5efbf2156032" name="Join Lines" type="SubSheetInfo"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><narrative>Joins values from a collection into multiline text.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="6f376101-4dd4-43b4-85a0-19dd1090df02" name="Start" type="Start"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><loginhibit /><display x="15" y="-75" /><inputs><input type="collection" name="Values" narrative="The text values collection to join" stage="Values" /><input type="flag" name="Trim Lines" narrative="Set true to apply trimming to the lines" stage="Trim Lines" /></inputs><onsuccess>816591dd-a42d-436b-9fd0-4ca095d78e29</onsuccess></stage><stage stageid="f2d9cbef-9cdb-4daa-bbb6-5d3dc0548c2e" name="Values" type="Collection"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><display x="90" y="-75" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="579d0466-882d-47ce-a2c3-d4a7f25eaa8c" name="Joined Text" type="Data"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><display x="90" y="285" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="724a0223-71bd-48d0-bcca-f4d554fcf91b" name="End" type="End"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><loginhibit /><display x="15" y="135" /><outputs><output type="text" name="Joined Text" narrative="The resulting joined text" stage="Joined Text" /></outputs></stage><stage stageid="8bcc24ca-f588-4c3c-b09b-fe08b425b5db" name="Joined Text" type="Data"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><display x="90" y="135" w="90" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e3b84350-20a1-442e-bebb-0232a5b73299" name="Join Text" type="SubSheet"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><loginhibit /><display x="15" y="60" /><inputs><input type="collection" name="Values" expr="[Values]" /><input type="text" name="Join Character" expr="[Join Character]" /><input type="flag" name="Trim Values" expr="[Trim Lines]" /></inputs><outputs><output type="text" name="Joined Text" stage="Joined Text" /></outputs><onsuccess>724a0223-71bd-48d0-bcca-f4d554fcf91b</onsuccess><processid>a2c09338-7850-4daf-a545-8972d333b826</processid></stage><stage stageid="816591dd-a42d-436b-9fd0-4ca095d78e29" name="Get Carriage Return" type="Code"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><loginhibit /><display x="15" y="0" w="90" h="30" /><outputs><output type="text" name="Join Character" stage="Join Character" /></outputs><onsuccess>e3b84350-20a1-442e-bebb-0232a5b73299</onsuccess><code><![CDATA[Join_Character = vbcrlf]]></code></stage><stage stageid="9a8e3b40-f136-4397-b62b-4a69cd010c37" name="Join Character" type="Data"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><display x="105" y="0" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="13a0e17b-9b82-4dd6-8e3a-313890d8caf3" name="For Each Value" type="LoopStart"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="15" w="90" h="30" /><onsuccess>e4c0da52-0523-4109-b705-3fadd035597b</onsuccess><groupid>fffab271-8052-4aaf-9a1e-1402d77939ea</groupid><looptype>ForEach</looptype><loopdata>Values</loopdata></stage><stage stageid="98f2416b-599a-42d1-a76f-d41ea3e23572" name="Next Value" type="LoopEnd"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="195" w="90" h="30" /><onsuccess>7dbff5b3-7cd4-406a-9650-265fb88988ef</onsuccess><groupid>fffab271-8052-4aaf-9a1e-1402d77939ea</groupid></stage><stage stageid="b05ea94b-f0d1-4047-b854-04877801ef0b" name="Reset Output" type="Calculation"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="-45" /><onsuccess>13a0e17b-9b82-4dd6-8e3a-313890d8caf3</onsuccess><calculation expression="&quot;&quot;" stage="Joined Text" /></stage><stage stageid="49168356-8449-4cb3-9798-0796b15b77a3" name="Append Value" type="Calculation"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="150" /><onsuccess>98f2416b-599a-42d1-a76f-d41ea3e23572</onsuccess><calculation expression="[Joined Text] &amp; [Values.Item Value] &amp; [Join Character]" stage="Joined Text" /></stage><stage stageid="54cf1a89-b26c-4916-ab45-8f1e80b9b86f" name="Trim Lines" type="Data"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><display x="150" y="-75" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6aa04814-e2fd-4630-b391-bfe892ddc8df" name="Trim Values" type="Data"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><display x="210" y="-105" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="e4c0da52-0523-4109-b705-3fadd035597b" name="Trim?" type="Decision"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="75" /><decision expression="[Trim Values]" /><ontrue>91ef5da4-e47e-4442-98ec-d46cbd8d8692</ontrue><onfalse>49168356-8449-4cb3-9798-0796b15b77a3</onfalse></stage><stage stageid="91ef5da4-e47e-4442-98ec-d46cbd8d8692" name="Do Trim" type="Calculation"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="105" y="75" /><onsuccess>10ac89cc-d24c-4622-ad92-34ebe2365083</onsuccess><calculation expression="Trim([Values.Item Value])" stage="Values.Item Value" /></stage><stage stageid="10ac89cc-d24c-4622-ad92-34ebe2365083" name="anchor1" type="Anchor"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="105" y="150" w="10" h="10" /><onsuccess>49168356-8449-4cb3-9798-0796b15b77a3</onsuccess></stage><stage stageid="b837f601-57e9-4136-8dee-db8ca9ebf15f" name="Format Number" type="SubSheetInfo"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><narrative>Formats a number into comma-delimited triplets, as appropriate. Eg 123456.789 becomes 123,456.789</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="df1e573a-3e89-43a8-8e6a-61f1840b3869" name="Start" type="Start"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><loginhibit /><preconditions><condition narrative="None" /></preconditions><postconditions><condition narrative="The number will have been formatted." /></postconditions><display x="15" y="-105" /><inputs><input type="number" name="Input Number" narrative="The number to format" stage="Input Number" /></inputs><onsuccess>df4ce97f-4b9c-4087-a9bf-c6e35eba156b</onsuccess></stage><stage stageid="dd89bdff-2f14-4268-98f4-7ef3747a5233" name="End" type="End"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="text" name="Formatted Currency Numbers" narrative="The resulting formatted number" stage="Formatted Currency Value" /></outputs></stage><stage stageid="b0f25370-1f87-4edd-b03a-0a3ac16537fb" name="Input Number" type="Data"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><display x="90" y="-105" /><datatype>number</datatype><initialvalue>987654123456.789</initialvalue><private /><alwaysinit /></stage><stage stageid="df4ce97f-4b9c-4087-a9bf-c6e35eba156b" name="Format" type="Code"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><loginhibit /><display x="15" y="-30" /><inputs><input type="number" name="Input" expr="[Input Number]" /></inputs><outputs><output type="text" name="Output" stage="Formatted Currency Value" /></outputs><onsuccess>dd89bdff-2f14-4268-98f4-7ef3747a5233</onsuccess><code><![CDATA[Output = Input.ToString("N")]]></code></stage><stage stageid="a6d6d631-89c5-4460-9771-6a15a0e1d7d5" name="Formatted Currency Value" type="Data"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><display x="90" y="90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b3013d63-9017-4dd9-bcf6-5e0d09ab372f" name="PadLeft" type="SubSheetInfo"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><narrative>Ensures that a string (usually a number) is of fixed width, by padding with a special character on the left.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="af05cd75-42db-4c09-875d-3fedfc3ca0a2" name="Start" type="Start"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><preconditions><condition narrative="None" /></preconditions><postconditions><condition narrative="The supplied text will have been padded to be at least the number of desired characters." /></postconditions><display x="15" y="-105" /><inputs><input type="text" name="Input String" narrative="The string to pad" stage="Input String" /><input type="number" name="Target Width" narrative="The total number of characters required after padding" stage="Target Width" /><input type="text" name="Padding Character" narrative="The character to pad with" stage="Padding Character" /></inputs><onsuccess>6527cdd9-47d7-4784-bd96-e63afa4ec955</onsuccess></stage><stage stageid="f432b972-ae44-4485-943b-87848fd43487" name="End" type="End"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="15" y="165" /><outputs><output type="text" name="Padded String" narrative="The resultant padded string" stage="Input String" /></outputs></stage><stage stageid="888a814c-a03d-43f0-b6d6-30501b8b3250" name="Input String" type="Data"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><display x="90" y="-105" /><datatype>text</datatype><initialvalue xml:space="preserve">123</initialvalue><private /><alwaysinit /></stage><stage stageid="ea8d90c7-c341-4859-919c-4ecc076162eb" name="Target Width" type="Data"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><display x="150" y="-105" /><datatype>number</datatype><initialvalue>5</initialvalue><private /><alwaysinit /></stage><stage stageid="56c037f3-4ff0-4923-974c-e925c84e69c8" name="Padding Character" type="Data"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><display x="210" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6527cdd9-47d7-4784-bd96-e63afa4ec955" name="Blank Padding Character?" type="Decision"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="30" /><decision expression="Len([Padding Character]) = 0" /><ontrue>26f66718-649a-4472-965d-0e1e125e7473</ontrue><onfalse>b6b30eec-0ee3-4316-a9af-d0a55d5ec137</onfalse></stage><stage stageid="26f66718-649a-4472-965d-0e1e125e7473" name="Use Space for Padding" type="Calculation"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="135" y="-45" w="90" h="30" /><onsuccess>6acfdd2b-9298-4841-9111-003fc203edd0</onsuccess><calculation expression="&quot; &quot;" stage="Padding Character" /></stage><stage stageid="6acfdd2b-9298-4841-9111-003fc203edd0" name="anchor2" type="Anchor"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="135" y="0" w="10" h="10" /><onsuccess>b6b30eec-0ee3-4316-a9af-d0a55d5ec137</onsuccess></stage><stage stageid="b6b30eec-0ee3-4316-a9af-d0a55d5ec137" name="anchor3" type="Anchor"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="15" y="0" w="10" h="10" /><onsuccess>e13c9c2d-2cbe-4262-828c-6307a805d9c1</onsuccess></stage><stage stageid="e13c9c2d-2cbe-4262-828c-6307a805d9c1" name="Long Enough?" type="Decision"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="15" y="60" /><decision expression="Len([Input String]) &gt;= [Target Width]" /><ontrue>f432b972-ae44-4485-943b-87848fd43487</ontrue><onfalse>87af11ea-fa7e-45cf-b02a-fd6edeae0b85</onfalse></stage><stage stageid="87af11ea-fa7e-45cf-b02a-fd6edeae0b85" name="Insert Padding" type="Calculation"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="135" y="60" /><onsuccess>6acfdd2b-9298-4841-9111-003fc203edd0</onsuccess><calculation expression="[Padding Character] &amp; [Input String]" stage="Input String" /></stage><stage stageid="92edef27-4b78-40dd-97bd-e5a4f9169214" name="Get XML Elements" type="SubSheetInfo"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><narrative>Gets a collection of xml elements with a given name from an xml document.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="04bec0f1-e8bb-4c30-a5d1-b7eee243e6f9" name="Start" type="Start"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="135" y="-120" /><inputs><input type="text" name="XML" narrative="The xml to get elements from" stage="XML" /><input type="text" name="Element Name" narrative="The name of the xml elements to get" stage="Element Name" /></inputs><onsuccess>17f4a862-c7e3-44c3-a373-5b325fdaab8a</onsuccess></stage><stage stageid="e4b99f55-7171-46d6-992b-db797e99b1ed" name="End" type="End"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="135" y="165" /><outputs><output type="collection" name="Elements" narrative="The collection of xml elements that match the given name and for each element its outer xml" stage="Elements" /></outputs></stage><stage stageid="31472749-70ee-477e-a042-fcf5a25a4099" name="XML" type="Data"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><display x="-75" y="60" w="120" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;PotentialGrading&gt;  &lt;ServiceIdentifier&gt;ABC&lt;/ServiceIdentifier&gt;  &lt;Episode ID="a97fe424-0d1f-4e7c-9e9a-9b3c9e03d594"&gt;   &lt;Patient DateOfBirth="18/02/1970" Gender="M" PartPostcode="YO51" EthnicOrigin="W" Country="United Kingdom"    Region="North Yorkshire" RegisteredBlind="0" RegisteredPartiallySighted="1" HealthProvider="PCT"    Insurance="Cheap as Chips Insurance"&gt;The patient ID goes here&lt;/Patient&gt;   &lt;Screening Date="2007/09/06" GradingCodeSet="NGC" ImageCount="4"&gt;    &lt;Item Code="Examiner Classification" Value="1" /&gt;    &lt;Item Code="Eye Screening Urgency" Value="2" /&gt;    &lt;Item Code="Opthalmologist Care" Value="2" /&gt;    &lt;Item Code="Technical Gradability Code" Value="1" /&gt;    &lt;Item Code="01 Visual Acuity Pinhole" Value="0" Laterality="right" /&gt;    &lt;Item Code="01 Visual Acuity Pinhole" Value="0" Laterality="left" /&gt;    &lt;Item Code="02 Visual Acuity Spectacles" Value="0" Laterality="right" /&gt;    &lt;Item Code="02 Visual Acuity Spectacles" Value="0" Laterality="left" /&gt;    &lt;Item Code="03 Visual Acuity Standard" Value="1" Laterality="right" /&gt;    &lt;Item Code="03 Visual Acuity Standard" Value="1" Laterality="left" /&gt;    &lt;Item Code="04 Visual Acuity" Value="" Laterality="right"&gt;Free text entry&lt;/Item&gt;    &lt;Item Code="04 Visual Acuity" Value="" Laterality="left"&gt;Free text entry&lt;/Item&gt;    &lt;Item Code="06 Dilation" Value="1" Laterality="right" /&gt;    &lt;Item Code="06 Dilation" Value="1" Laterality="left" /&gt;    &lt;Image Length="104644" CameraID="Camera1" CameraModelID="CameraModel1" CaptureDateTime="2007/09/06T01:54:59"     Eye="L"&gt;1121017(5)L.jpg&lt;/Image&gt;    &lt;Image Length="107565" CameraID="Camera2" CameraModelID="CameraModel2" CaptureDateTime="2007/09/06T01:54:59"     Eye="L"&gt;1121017(6)L.jpg&lt;/Image&gt;    &lt;Image Length="107441" CameraID="Camera3" CameraModelID="CameraModel3" CaptureDateTime="2007/09/06T01:54:59"     Eye="R"&gt;1121017(5)R.jpg&lt;/Image&gt;    &lt;Image Length="112472" CameraID="Camera4" CameraModelID="CameraModel4" CaptureDateTime="2007/09/06T01:54:59"     Eye="R"&gt;1121017(6)R.jpg&lt;/Image&gt;   &lt;/Screening&gt;   &lt;Notes&gt;Free text notes go here&lt;/Notes&gt;  &lt;/Episode&gt; &lt;/PotentialGrading&gt; </initialvalue><private /><alwaysinit /></stage><stage stageid="68a0eeb2-9377-4b12-8f31-5ae52e7109e4" name="Element Name" type="Data"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><display x="-75" y="90" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">Image</initialvalue><private /><alwaysinit /></stage><stage stageid="7b46fe82-142a-411b-bf80-b2f0047952da" name="Get Elements" type="Code"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="135" y="60" /><inputs><input type="text" name="XML" expr="[XML]" /><input type="text" name="Element" expr="[Element Name]" /></inputs><outputs><output type="collection" name="Elements" stage="Elements" /></outputs><onsuccess>e4b99f55-7171-46d6-992b-db797e99b1ed</onsuccess><code><![CDATA[
dim table as datatable = GetDataTable("XML", "System.String")
dim row as datarow
dim doc as new xmldocument
dim list as xmlnodelist

doc.loadxml(xml)
list = doc.getelementsbytagname(element)

for each n as xmlnode in list
	row = table.newrow()
	row("XML") = n.outerxml
	table.rows.Add(row)
next

Elements = table
]]></code></stage><stage stageid="d693d2fb-a196-4ddc-b2e9-b41cbe618fc3" name="Elements" type="Collection"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><display x="-75" y="165" w="150" h="90" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="17f4a862-c7e3-44c3-a373-5b325fdaab8a" name="Blank XML?" type="Decision"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="135" y="-30" /><decision expression="Len(Trim([XML])) = 0" /><ontrue>6eb4f747-35c0-4e57-acbf-be93ac0a1bbb</ontrue><onfalse>7b46fe82-142a-411b-bf80-b2f0047952da</onfalse></stage><stage stageid="6eb4f747-35c0-4e57-acbf-be93ac0a1bbb" name="anchor1" type="Anchor"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="240" y="-30" w="10" h="10" /><onsuccess>a460ec9b-8afb-4b37-8ae0-7545448b025d</onsuccess></stage><stage stageid="a460ec9b-8afb-4b37-8ae0-7545448b025d" name="anchor2" type="Anchor"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="240" y="165" w="10" h="10" /><onsuccess>e4b99f55-7171-46d6-992b-db797e99b1ed</onsuccess></stage><stage stageid="97b59270-9eda-4994-9fce-24d8b5d856a4" name="Get XML Attribute" type="SubSheetInfo"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><narrative>Gets the value of an xml attribute with a given name from an xml document fragment.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="802dd6e8-6b25-42b9-9af6-931049d4062a" name="Start" type="Start"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><loginhibit /><display x="120" y="-105" /><inputs><input type="text" name="XML" narrative="The xml document to get attributes from" stage="XML" /><input type="text" name="Attribute Name" narrative="The name of the xml attribute to get" stage="Attribute Name" /></inputs><onsuccess>76737597-b716-4a52-8cbc-dfe9b5ad1f0c</onsuccess></stage><stage stageid="bc64fcfd-4386-47ec-b799-19c5454d8374" name="End" type="End"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><loginhibit /><display x="120" y="90" /><outputs><output type="text" name="Value" narrative="The text value of the requested attribute" stage="Attribute Value" /></outputs></stage><stage stageid="18f2ae57-8ed9-457b-8763-82dedb14a5e0" name="XML" type="Data"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><display x="-90" y="75" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">&lt;iGrading&gt;&lt;Response transactionID="de3dc0b1-6b22-4b67-a13a-d42fff6188b9" status="Success" method="SubmitPotentialGradingWithImages" description="" /&gt;&lt;/iGrading&gt;</initialvalue><private /><alwaysinit /></stage><stage stageid="1941e7f9-164d-4aa2-b06e-cb3a579a30e4" name="Attribute Name" type="Data"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><display x="-90" y="105" w="150" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">method</initialvalue><private /><alwaysinit /></stage><stage stageid="c9ec2a39-8f5d-42cc-856f-33bdb2c16477" name="Attribute Value" type="Data"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><display x="-90" y="135" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="76737597-b716-4a52-8cbc-dfe9b5ad1f0c" name="Get Attribute" type="Code"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><loginhibit /><display x="120" y="-15" /><inputs><input type="text" name="XML" expr="[XML]" /><input type="text" name="Attribute" expr="[Attribute Name]" /></inputs><outputs><output type="text" name="Value" stage="Attribute Value" /></outputs><onsuccess>bc64fcfd-4386-47ec-b799-19c5454d8374</onsuccess><code><![CDATA[
dim i as integer = XML.indexof(Attribute)

if i > 0 then
	i += Attribute.length + 2
	value = XML.substring(i)
	value = value.substring(0, value.indexof(""""))
else
	value = ""
end if]]></code></stage><stage stageid="ebd306f5-f0a3-46cf-8a04-9bde5bf5cc3d" name="Get Collection as CSV" type="SubSheetInfo"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><narrative>Turns a collection into a list of comma seperated values.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="47ea7760-3b58-442b-8271-c90d3c08f114" name="Split Lines by Length" type="SubSheetInfo"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><narrative>Splits text into lines of a given length using word boundries to find the split point.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="51996cc8-b76e-4de1-899a-66c678dbe1f3" name="Start" type="Start"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><loginhibit /><display x="0" y="-135" /><inputs><input type="text" name="Text to Split" narrative="The single line of text that needs to be split" stage="Text to Split" /><input type="number" name="Maximum Line Length" narrative="The maximum length of the line" stage="Maximum Line Length" /><input type="flag" name="Split Strictly by Length" narrative="Set true if the line should be split at character boundries instead of words" stage="Split Strictly by Length" /></inputs><onsuccess>0fd3f2cd-7fff-49c7-b4d9-4cfc3476793a</onsuccess></stage><stage stageid="52e75580-936a-4647-a154-e984ab8d199a" name="End" type="End"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><loginhibit /><display x="0" y="60" /><outputs><output type="number" name="Line Count" stage="Line Count" /><output type="collection" name="Split Lines" stage="Split Lines" /></outputs></stage><stage stageid="0fd3f2cd-7fff-49c7-b4d9-4cfc3476793a" name="Split Lines By Length" type="Code"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><loginhibit /><display x="0" y="-45" w="90" h="60" /><inputs><input type="text" name="Text to Split" expr="[Text to Split]" /><input type="number" name="Maximum Line Length" expr="[Maximum Line Length]" /><input type="flag" name="Strict Split" expr="[Split Strictly by Length]" /></inputs><outputs><output type="collection" name="Split Lines" stage="Split Lines" /><output type="number" name="Line Count" stage="Line Count" /></outputs><onsuccess>52e75580-936a-4647-a154-e984ab8d199a</onsuccess><code><![CDATA[Dim Values as List(Of String) = Nothing
If Strict_Split Then
      Values = New List(Of String)
      While Text_to_Split.Length > 0
            Dim NewLine As String = Text_to_Split.SubString(0, Math.Min(Maximum_Line_Length, Text_to_Split.Length))
            NewLine = NewLine.Trim()
            Values.Add(NewLine)

            If Text_to_Split.Length > NewLine.Length Then
                  Text_to_Split = Text_to_Split.SubString(NewLine.Length, Text_to_Split.Length - NewLine.Length)
            Else
                  Text_to_Split = ""
            End If
            Text_to_Split = Text_to_Split.Trim()
      End While
Else
      Values = SplitTextByLengthEngine(Text_to_Split, Maximum_Line_length)
End If

Split_Lines = New DataTable()
Split_Lines.Columns.Add("Line Text", GetType(String))
For Each s as String in Values
      Split_Lines.Rows.Add(New Object() {s})
Next

Line_Count = Values.Count]]></code></stage><stage stageid="c20b3e81-de90-46c1-a347-f094034ff28c" name="Text to Split" type="Data"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="75" y="-135" /><datatype>text</datatype><initialvalue xml:space="preserve">aaaa bbbb cccc dddd eeee ffff gggg hhhh iiii jjjj kkkk llll mmmm nnnn oooo pppp</initialvalue><private /><alwaysinit /></stage><stage stageid="e329d1c6-7a17-4af0-aa33-d6fb517adb68" name="Split Lines" type="Collection"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="135" y="45" w="120" h="90" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Line Text" type="text" /></collectioninfo></stage><stage stageid="50f47d4a-73f4-46d2-93e1-24a2470d2df9" name="Maximum Line Length" type="Data"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="150" y="-135" /><datatype>number</datatype><initialvalue>6</initialvalue><private /><alwaysinit /></stage><stage stageid="d1f11813-b465-4a95-9194-630fb1424d37" name="Line Count" type="Data"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="90" y="-60" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="89c59225-5fb8-45a8-9fb8-a102420ddbc5" name="Split Strictly by Length" type="Data"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="225" y="-135" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="8d911bb3-c87f-4748-b226-9d2faaf45c95" name="Get CSV As Collection" type="SubSheetInfo"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><narrative>Turns a list of comma seperated values into a collection.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="e1587123-3967-4743-b475-5499f8c41803" name="Get Newline Character" type="SubSheetInfo"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><narrative>Gets the text representing the two newline characters used under windows (Carriage return followed by Line feed)</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="b09f1e76-fb7c-4ef1-9a47-db4a1377d056" name="Start" type="Start"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>af411d25-0e83-4e28-b4f3-30f43beb9b88</onsuccess></stage><stage stageid="bee4d44f-957c-415f-be9c-614e97d6f255" name="End" type="End"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="text" name="Newline Character" narrative="The new line text" stage="Newline Character" /></outputs></stage><stage stageid="af411d25-0e83-4e28-b4f3-30f43beb9b88" name="Get Newline Character" type="Code"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><loginhibit /><display x="15" y="0" w="90" h="60" /><outputs><output type="text" name="Newline Character" stage="Newline Character" /></outputs><onsuccess>bee4d44f-957c-415f-be9c-614e97d6f255</onsuccess><code><![CDATA[Newline_Character = VbCrLf]]></code></stage><stage stageid="dde302f4-2b62-45c0-a8f3-190c52116470" name="Newline Character" type="Data"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><display x="90" y="90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="dd7d11e6-2bc7-40ed-ab47-1180482d82ed" name="Delete Characters" type="SubSheetInfo"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><narrative>Removes the given characters from the text.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="6e15c3f7-07db-4e3d-a24d-84be7e09b06e" name="Start" type="Start"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="Text Sample" narrative="The piece of text to be operated on" stage="Text Sample" /><input type="text" name="Characters to Delete" narrative="A string of characters to be deleted from the Text Sample" stage="Characters to Delete" /></inputs><onsuccess>89bfbefd-b0a3-472a-b72c-75105d0a7895</onsuccess></stage><stage stageid="c7719606-01b9-4626-9a24-4d9cf42d1e75" name="End" type="End"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="text" name="Amended Sample" narrative="The amended sample, with the characters deleted" stage="Amended Sample" /></outputs></stage><stage stageid="78d405b1-aa60-46a6-af38-fb4bba55e752" name="Text Sample" type="Data"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><display x="90" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="66318e10-ff11-43c1-9b3c-6ce27546458f" name="Characters to Delete" type="Data"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><display x="150" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="89bfbefd-b0a3-472a-b72c-75105d0a7895" name="Delete" type="Code"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="Text Sample" expr="[Text Sample]" /><input type="text" name="Characters to Delete" expr="[Characters to Delete]" /></inputs><outputs><output type="text" name="Amended Sample" stage="Amended Sample" /></outputs><onsuccess>c7719606-01b9-4626-9a24-4d9cf42d1e75</onsuccess><code><![CDATA[For Each C as Char in Characters_To_Delete.ToCharArray()
	Text_Sample = Text_Sample.Replace(C, "")
Next

Amended_Sample = Text_Sample]]></code></stage><stage stageid="930e7d0f-68a5-4d40-a291-e2dcfa4918c6" name="Amended Sample" type="Data"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><display x="90" y="90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6a0bb945-2946-4e17-8e4a-b8d7eb5e1060" name="Escape Sendkeys String" type="SubSheetInfo"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><narrative>Escapes characters to be sent via the sendkeys method, to ensure that all characters are interpreted literally. If left unescaped, some characters such as % carry a special meaning rather than their literal value.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="5bb1d666-6ef6-4371-a0f4-111fdf5ee69e" name="Start" type="Start"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="Sendkeys Text" narrative="The text to be escaped" stage="Sendkeys Text" /></inputs><onsuccess>5ea70bdd-732c-4a8e-b5cb-a747f97e1090</onsuccess></stage><stage stageid="7bfda30d-2f75-46ec-b5e2-88a965528b49" name="End" type="End"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="text" name="Escaped Sendkeys Text" narrative="The escaped sendkeys text, which can be sent via the sendkeys method without fear of misinterpretation" stage="Escaped Sendkeys Text" /></outputs></stage><stage stageid="5ea70bdd-732c-4a8e-b5cb-a747f97e1090" name="Escape Text" type="Code"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><loginhibit /><display x="15" y="-30" w="90" h="30" /><inputs><input type="text" name="SendKeys Text" expr="[Sendkeys Text]" /></inputs><outputs><output type="text" name="Escaped Sendkeys Text" stage="Escaped Sendkeys Text" /></outputs><onsuccess>7bfda30d-2f75-46ec-b5e2-88a965528b49</onsuccess><code><![CDATA[Escaped_Sendkeys_Text = Regex.Replace(SendKeys_Text, "[\[\]{}+^%~()]", "{$0}")]]></code></stage><stage stageid="c0e80092-2acc-4552-b6ab-9e3fa5abb07a" name="Escaped Sendkeys Text" type="Data"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><display x="150" y="90" w="180" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="172f06e8-629e-434a-9bee-084a177606eb" name="Sendkeys Text" type="Data"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><display x="90" y="-105" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4e2f3e3d-72e1-4483-b79e-49e9f1387d8a" name="Compare Font Text" type="SubSheetInfo"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><narrative>Compares two items of text read using Font Recognition for equality, where "equality" means that the two text samples match following the removal of conflicting font characters.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="1a092a3a-7389-4bd7-8d31-a3ed761ff97c" name="Start" type="Start"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><preconditions><condition narrative="None" /></preconditions><postconditions><condition narrative="None" /></postconditions><display x="150" y="-30" /><inputs><input type="text" name="Sample 1" narrative="The first item to be compared" stage="Sample 1" /><input type="text" name="Sample 2" narrative="The second item to be compared" stage="Sample 2" /><input type="collection" name="Conflicting Characters" narrative="A collection of conflicting font characters, as read from a read stage for the font of interest" stage="Conflicting Characters" /></inputs><onsuccess>2aac81fd-1231-450b-94e5-3a5928ddb08b</onsuccess></stage><stage stageid="f07d147e-0807-4996-8746-e6b232b63283" name="End" type="End"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="330" /><outputs><output type="flag" name="Samples Equal" narrative="Indicates whether the samples are equal, once conflicting characters are removed" stage="Samples Equal" /><output type="text" name="Amended Sample 1" narrative="The first sample, with conflicting characters removed" stage="Sample 1" /><output type="text" name="Amended Sample 2" narrative="The second sample, with conflicting characters removed" stage="Sample 2" /></outputs></stage><stage stageid="fbb964d4-b0d6-4729-b88d-04d1cbfd0cb5" name="Sample 1" type="Data"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><display x="225" y="-30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4187bcbb-ee93-4b01-b7b6-4e4944c8967a" name="Sample 2" type="Data"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><display x="285" y="-30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="16d61c29-acde-49f1-a0dc-5b93885cb724" name="Conflicting Characters" type="Collection"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><display x="0" y="-15" w="120" h="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="2aac81fd-1231-450b-94e5-3a5928ddb08b" name="For Each Character Group" type="LoopStart"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="45" w="120" h="30" /><onsuccess>dde2966f-3ac6-4a0a-9613-7f8c83db2d3a</onsuccess><groupid>d5a546ca-79ce-4ba9-917c-4165b543a787</groupid><looptype>ForEach</looptype><loopdata>Conflicting Characters</loopdata></stage><stage stageid="5f4d2cf9-a6a3-47c1-beed-8c8912b3f81e" name="Next Character Group" type="LoopEnd"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="180" w="120" h="30" /><onsuccess>cd3e8b56-7767-489d-96de-6c9d0740de02</onsuccess><groupid>d5a546ca-79ce-4ba9-917c-4165b543a787</groupid></stage><stage stageid="cd3e8b56-7767-489d-96de-6c9d0740de02" name="Determine Equality" type="Calculation"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="240" /><onsuccess>f07d147e-0807-4996-8746-e6b232b63283</onsuccess><calculation expression="[Sample 1] = [Sample 2]" stage="Samples Equal" /></stage><stage stageid="7c680a7d-326b-4d7b-b298-02df94778092" name="Samples Equal" type="Data"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><display x="225" y="330" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a589a76f-6d45-4f76-a3d8-a7220c5409ed" name="Extract Regex Values" type="SubSheetInfo"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="e85db034-efea-43db-9f60-c5d086ce0f5a" name="Start" type="Start"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><loginhibit /><display x="45" y="-105" /><inputs><input type="text" name="Regex Pattern" narrative="The regex pattern to apply" stage="Regex Pattern" /><input type="text" name="Target String" narrative="The target string to which apply the pattern and extract values" stage="Target String" /><input type="collection" name="Named Values" narrative="A collection of named values to extract from the target string" stage="Named Values" /></inputs><onsuccess>526b7aa5-2df6-4a52-a8d5-fef9e3c9e776</onsuccess></stage><stage stageid="78d491bd-ce28-422a-8d1f-334ba9248f4e" name="End" type="End"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><loginhibit /><display x="45" y="90" /><outputs><output type="collection" name="Named Values" narrative="Results of the named values extracted from the regex" stage="Named Values" /></outputs></stage><stage stageid="e0d2e8e4-b2f1-4cab-a39c-7252cd042e68" name="Regex Pattern" type="Data"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><display x="240" y="-105" w="300" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">(?&lt;Lower&gt;\d+)\s*(-|to)\s*(?&lt;Upper&gt;\d+)</initialvalue><private /><alwaysinit /></stage><stage stageid="d1344ba9-2a6f-4a88-bc72-0188e2ead8b7" name="Target String" type="Data"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><narrative>100-200
56 to 99
400 - 600</narrative><display x="240" y="-60" w="300" h="30" /><datatype>text</datatype><initialvalue xml:space="preserve">100-200</initialvalue><private /><alwaysinit /></stage><stage stageid="70580e44-41d3-40b3-9b12-3460963b2f5f" name="Named Values" type="Collection"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><display x="240" y="30" w="150" h="90" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Name" type="text" /><field name="Value" type="text" /></collectioninfo><initialvalue><row><field name="Name" type="text" value="Lower" /><field name="Value" type="text" value="" /></row><row><field name="Name" type="text" value="Upper" /><field name="Value" type="text" value="" /></row></initialvalue></stage><stage stageid="526b7aa5-2df6-4a52-a8d5-fef9e3c9e776" name="Extract Values" type="Code"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><loginhibit /><display x="45" y="-15" /><inputs><input type="text" name="Regex Pattern" expr="[Regex Pattern]" /><input type="text" name="Target String" expr="[Target String]" /><input type="collection" name="Named Values" expr="[Named Values]" /></inputs><outputs><output type="collection" name="Named Values Out" stage="Named Values" /></outputs><onsuccess>78d491bd-ce28-422a-8d1f-334ba9248f4e</onsuccess><code><![CDATA[For Each Row As DataRow in Named_Values.Rows
	Row("Value") = ""
Next


Dim R as New Regex(Regex_Pattern, RegexOptions.SingleLine)
Dim M as Match = R.Match(Target_String)
If M IsNot Nothing AndAlso M.Success Then
	If M.Groups IsNot Nothing AndAlso M.Groups.Count > 0 Then
		For Each Row As DataRow in Named_Values.Rows
			Dim GroupName As String = CStr(Row("Name"))
			Dim G As Group = M.Groups(GroupName)
			If G.Success Then
				Row("Value") = G.Value
			End If
		Next
	End If
End If

Named_Values_Out = Named_Values]]></code></stage><stage stageid="feb4e385-2919-4066-86ad-53cb6226c867" name="InStr" type="SubSheetInfo"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><narrative>Tests to see if one peice of text contains another peice of sub text.</narrative><display x="-150" y="-180" w="150" h="90" /></stage><stage stageid="353f092b-3d6f-4fda-bdab-cd5798047c44" name="End" type="End"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><display x="15" y="60" /><outputs><output type="number" name="Position" narrative="The index of the sub text within the text or -1 if not found" stage="Position" /></outputs></stage><stage stageid="f594335d-8723-4704-a8ae-e8dbcfe492c7" name="Text" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><display x="-180" y="-30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1a43e2c2-c8c1-4dfd-b58f-2775e2ea7d0e" name="Search String" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><display x="-180" y="0" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c9bbb24e-51f9-489f-9944-30d9612c396a" name="Start Byte" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><display x="-180" y="30" w="150" h="30" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="65e660c1-4379-4323-9e01-6cd7ae38f150" name="Note1" type="Note"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-180" y="-60" w="150" h="30" /></stage><stage stageid="424c6e04-b000-4dce-8eb7-ba00b0fea671" name="InStr" type="Code"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="InText" expr="[Text]" /><input type="text" name="Search String" expr="[Search String]" /><input type="number" name="Start Byte" expr="[Start Byte]" /><input type="number" name="Compare Method" expr="[Compare Method]" /></inputs><outputs><output type="number" name="Position" stage="Position" /></outputs><onsuccess>353f092b-3d6f-4fda-bdab-cd5798047c44</onsuccess><code><![CDATA[  Position = Microsoft.VisualBasic.InStr(Start_Byte,InText, Search_String, 1)]]></code></stage><stage stageid="7f283fb0-e9fa-4e24-82d1-aae53fd5afe1" name="Position" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><display x="-165" y="165" w="150" h="30" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d00b9153-969d-4db4-b737-b1ac835c7b2a" name="Compare Method" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><narrative>1 = text, 0 = binary</narrative><display x="-180" y="60" w="150" h="30" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="4bbb2261-2d01-49a5-88e8-c8d37745fd60" name="InStrRev" type="SubSheetInfo"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><narrative>Tests to see if one peice of text contains another peice of sub text but matches in reverse.</narrative><display x="-150" y="-135" w="150" h="90" /></stage><stage stageid="3ddcb7e5-570f-430d-8374-ed9066da51c0" name="Start" type="Start"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="Text" narrative="Text to search in" stage="Text" /><input type="text" name="Search String" narrative="The text to search for" stage="Search String" /><input type="number" name="Start Byte" narrative="Where in the string to search from" stage="Start Byte" /><input type="number" name="Compare Method" narrative="1=text, 0=binary" stage="Compare Method" /></inputs><onsuccess>4991333f-9a42-4dc3-b73b-a8bc97edab6d</onsuccess></stage><stage stageid="251f9278-c41e-44a0-835b-bfc48910933d" name="Text" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><display x="-180" y="-30" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="393bbd43-ae95-438d-b358-f51cc69d5e5c" name="Search String" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><display x="-180" y="0" w="150" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a898a11a-c6ca-4a70-abcd-42f38192de24" name="Start Byte" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><display x="-180" y="30" w="150" h="30" /><datatype>number</datatype><initialvalue>-1</initialvalue><private /><alwaysinit /></stage><stage stageid="73737012-9282-4e33-9d87-c4718367216d" name="Note1" type="Note"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-180" y="-60" w="150" h="30" /></stage><stage stageid="4991333f-9a42-4dc3-b73b-a8bc97edab6d" name="InStrRev" type="Code"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="InText" expr="[Text]" /><input type="text" name="Search String" expr="[Search String]" /><input type="number" name="Start Byte" expr="[Start Byte]" /><input type="number" name="Compare Method" expr="[Compare Method]" /></inputs><outputs><output type="number" name="Position" stage="Position" /></outputs><onsuccess>ba288c3f-ff29-4df2-af77-a2823f65f60c</onsuccess><code><![CDATA[  Position = Microsoft.VisualBasic.InStrRev(InText, Search_String, Start_Byte, 1)]]></code></stage><stage stageid="63d5b70d-b54a-4451-b957-9ea177292994" name="Position" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><display x="-165" y="150" w="150" h="30" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="57a39985-6197-4f21-bdff-e46bd897faa6" name="Compare Method" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><narrative>1 = text, 0 = binary</narrative><display x="-180" y="60" w="150" h="30" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="d0bb7b29-fbb3-43cd-ab69-7f76a9c657e5" name="Note1" type="Note"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-165" y="120" w="150" h="30" /></stage><stage stageid="b27c7a93-8e3b-4ed8-b105-e08cd2c96fdf" name="Note1" type="Note"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-165" y="135" w="150" h="30" /></stage><stage stageid="bc4f3574-a096-4b9f-b836-0bc100bf2a18" name="Start" type="Start"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-90" /><inputs><input type="text" name="Text" narrative="Text to search in" stage="Text" /><input type="text" name="Search String" narrative="The text to search for" stage="Search String" /><input type="number" name="Start Byte" narrative="Where in the string to search from" stage="Start Byte" /><input type="number" name="Compare Method" narrative="1=text, 0=binary" stage="Compare Method" /></inputs><onsuccess>424c6e04-b000-4dce-8eb7-ba00b0fea671</onsuccess></stage><stage stageid="ba288c3f-ff29-4df2-af77-a2823f65f60c" name="End" type="End"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><display x="15" y="75" /><outputs><output type="number" name="Position" narrative="The index of the sub text within the text from the end or -1 if not found" stage="Position" /></outputs></stage><stage stageid="73739a66-400b-488a-bd7a-63a2f0d2a4ef" name="Test Regex Match" type="SubSheetInfo"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><narrative>Check if a given Text value matches a regular expression.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="568b67f8-4216-4af4-bea8-1c83bbff7e16" name="Start" type="Start"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><loginhibit /><display x="-30" y="-120" /><inputs><input type="text" name="Regex Pattern" narrative="The regex pattern to apply" stage="Regex Pattern" /><input type="text" name="Target String" narrative="The target string to which apply the pattern and extract values" stage="Target String" /></inputs><onsuccess>2ad0c111-6108-4ca5-945b-22aab4b6bb27</onsuccess></stage><stage stageid="46282093-d3a9-4e38-b030-95b332ec5371" name="End" type="End"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><loginhibit /><display x="-30" y="75" /><outputs><output type="flag" name="Matched?" narrative="Whether or not the regex match" stage="Regex Match" /></outputs></stage><stage stageid="32d3ef8a-d0b2-4093-afc5-98bad356c881" name="Regex Pattern" type="Data"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><display x="165" y="-120" w="300" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5747c96e-0ce3-4e78-b446-17b9cef5b655" name="Target String" type="Data"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><narrative>100-200
56 to 99
400 - 600</narrative><display x="165" y="-75" w="300" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2ad0c111-6108-4ca5-945b-22aab4b6bb27" name="Test Regex Match1" type="Code"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><loginhibit /><display x="-30" y="-30" /><inputs><input type="text" name="Regex Pattern" expr="[Regex Pattern]" /><input type="text" name="Target String" expr="[Target String]" /></inputs><outputs><output type="flag" name="Regex Match" stage="Regex Match" /></outputs><onsuccess>46282093-d3a9-4e38-b030-95b332ec5371</onsuccess><code><![CDATA[
Dim R as New Regex(Regex_Pattern, RegexOptions.SingleLine)
Dim M as Match = R.Match(Target_String)
Regex_Match =  M IsNot Nothing AndAlso M.Success]]></code></stage><stage stageid="24d6e567-f121-4d8a-a4ee-1402f8f2832d" name="Regex Match" type="Data"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><display x="45" y="-30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="dde2966f-3ac6-4a0a-9613-7f8c83db2d3a" name="Delete from Sample 1" type="SubSheet"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="90" /><inputs><input type="text" name="Text Sample" narrative="The piece of text to be operated on" expr="[Sample 1]" /><input type="text" name="Characters to Delete" narrative="A string of characters to be deleted from the Text Sample" expr="[Conflicting Characters.Character Group]" /></inputs><outputs><output type="text" name="Amended Sample" narrative="The amended sample, with the characters deleted" stage="Sample 1" /></outputs><onsuccess>50c19466-f7e4-4066-a4c1-d18f65876de0</onsuccess><processid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</processid></stage><stage stageid="50c19466-f7e4-4066-a4c1-d18f65876de0" name="Delete from Sample 2" type="SubSheet"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="135" /><inputs><input type="text" name="Text Sample" narrative="The piece of text to be operated on" expr="[Sample 2]" /><input type="text" name="Characters to Delete" narrative="A string of characters to be deleted from the Text Sample" expr="[Conflicting Characters.Character Group]" /></inputs><outputs><output type="text" name="Amended Sample" narrative="The amended sample, with the characters deleted" stage="Sample 2" /></outputs><onsuccess>5f4d2cf9-a6a3-47c1-beed-8c8912b3f81e</onsuccess><processid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</processid></stage><stage stageid="976e1ff6-abbb-41dd-b61c-e5906831327e" name="Start" type="Start"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><loginhibit /><display x="-30" y="-135" /><inputs><input type="collection" name="Input Collection" narrative="The collection to be converted to CSV" stage="Input Collection" /></inputs><onsuccess>c61bbe42-0aa1-44c6-a081-311d65351241</onsuccess></stage><stage stageid="2ab5ecf3-268e-4703-af0b-b628d074a395" name="End" type="End"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><loginhibit /><display x="-30" y="15" /><outputs><output type="text" name="Collection CSV" narrative="The CSV representation of the Input Collection" stage="Output CSV" /></outputs></stage><stage stageid="70fca360-60a6-43df-ac14-f2e89132d005" name="Input Collection" type="Collection"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><display x="-195" y="-15" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="4890c0f6-ccee-4acc-a4fb-991a6de7f430" name="Output CSV" type="Data"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><display x="-195" y="60" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="85f97df6-6547-462a-97ec-4dcf85d77897" name="Input Data Items" type="Block"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><loginhibit /><display x="-270" y="-45" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="FFCC00" /></stage><stage stageid="d74dee9e-caae-41da-af9b-a81ce7ad09c6" name="Output Data Items" type="Block"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><loginhibit /><display x="-270" y="30" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="800000" /></stage><stage stageid="c61bbe42-0aa1-44c6-a081-311d65351241" name="Get Collection as Delimited Text" type="SubSheet"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><loginhibit /><display x="-30" y="-60" w="90" h="60" /><inputs><input type="collection" name="Input Collection" friendlyname="Input Collection" narrative="The collection to be converted to CSV" expr="[Input Collection]" /><input type="text" name="Delimiter Character" friendlyname="Delimiter Character" narrative="The character used for delimiting fields in the string" expr="&quot;,&quot;" /></inputs><outputs><output type="text" name="Output Delimited Text" friendlyname="Output Delimited Text" narrative="The delimited text representation of the Input Collection" stage="Output CSV" /></outputs><onsuccess>2ab5ecf3-268e-4703-af0b-b628d074a395</onsuccess><processid>f34fc98d-a02f-4f58-92d4-c4688513439b</processid></stage><stage stageid="d2485b03-90eb-4e91-b1ef-ff830767650c" name="Get Collection as Delimited Text" type="SubSheetInfo"><subsheetid>f34fc98d-a02f-4f58-92d4-c4688513439b</subsheetid><narrative>Turns a collection into a list of values separated by the provided delimiter character.</narrative><display x="-255" y="-75" w="150" h="60" /></stage><stage stageid="026fac81-dc81-4612-8dfd-2e4a86f95ebb" name="Start" type="Start"><subsheetid>f34fc98d-a02f-4f58-92d4-c4688513439b</subsheetid><loginhibit /><display x="-60" y="-90" /><inputs><input type="collection" name="Input Collection" narrative="The collection to be converted to CSV" stage="Input Collection" /><input type="text" name="Delimiter Character" narrative="The character used for delimiting fields in the string" stage="Delimiter Character" /></inputs><onsuccess>4e202cad-2b99-4f15-88bc-b9914b0e341b</onsuccess></stage><stage stageid="5a98b789-1c80-4f08-b2bb-e638009f643c" name="End" type="End"><subsheetid>f34fc98d-a02f-4f58-92d4-c4688513439b</subsheetid><loginhibit /><display x="-60" y="90" /><outputs><output type="text" name="Output Delimited Text" narrative="The delimited text representation of the Input Collection" stage="Output Delimited Text" /></outputs></stage><stage stageid="225a4930-49aa-428f-b7e3-7dc9c2629c72" name="Input Collection" type="Collection"><subsheetid>f34fc98d-a02f-4f58-92d4-c4688513439b</subsheetid><display x="-255" y="0" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="4e202cad-2b99-4f15-88bc-b9914b0e341b" name="Serialise to Delimited Text" type="Code"><subsheetid>f34fc98d-a02f-4f58-92d4-c4688513439b</subsheetid><loginhibit /><display x="-60" y="0" w="120" h="60" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /><input type="text" name="Delimiter" expr="[Delimiter Character]" /></inputs><outputs><output type="text" name="Output CSV" stage="Output Delimited Text" /></outputs><onsuccess>5a98b789-1c80-4f08-b2bb-e638009f643c</onsuccess><code><![CDATA[
Dim SB As New StringBuilder
WriteDataTable(SB, Input_Collection, True, Delimiter)
Output_CSV = SB.ToString()]]></code></stage><stage stageid="e9fd160f-2e2e-4a5f-88fb-6fc3513e74fe" name="Output Delimited Text" type="Data"><subsheetid>f34fc98d-a02f-4f58-92d4-c4688513439b</subsheetid><display x="-255" y="105" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4744a27a-9351-4f3e-ad80-149e1689f2fa" name="Input Data Items" type="Block"><subsheetid>f34fc98d-a02f-4f58-92d4-c4688513439b</subsheetid><loginhibit /><display x="-330" y="-30" w="150" h="90" /><font family="Segoe UI" size="10" style="Regular" color="FFCC00" /></stage><stage stageid="928f8f18-5970-4f09-a329-a58be75ce629" name="Output Data Items" type="Block"><subsheetid>f34fc98d-a02f-4f58-92d4-c4688513439b</subsheetid><loginhibit /><display x="-330" y="75" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="800000" /></stage><stage stageid="640470fa-acdf-402e-90e0-9468b23d4f18" name="Delimiter Character" type="Data"><subsheetid>f34fc98d-a02f-4f58-92d4-c4688513439b</subsheetid><display x="-255" y="30" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7879714e-32e3-4741-8e03-4f6c39f8947d" name="Get Delimited Text As Collection" type="SubSheetInfo"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><narrative>Turns a list of seperated values into a collection.</narrative><display x="-240" y="-105" w="150" h="60" /></stage><stage stageid="a6279d74-31be-4cac-829f-206bcf6ec53c" name="Start" type="Start"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><loginhibit /><display x="-60" y="-120" /><inputs><input type="text" name="Delimited Text" narrative="The delimited text to be converted into a collection" stage="Delimited Text" /><input type="flag" name="First Row Is Header" narrative="Indicates whether the first row of the CSV file should be treated as headers" stage="First Row Is Header" /><input type="collection" name="Schema" narrative="Optional. A collection of column names. If left blank the column names will be taken from the first row. " stage="Schema" /><input type="text" name="Delimiter Character" narrative="The character used for delimiting fields in the string" stage="Delimiter Character" /></inputs><onsuccess>e9ffc61e-59d9-4936-a2ac-ea0e7afa1518</onsuccess></stage><stage stageid="1a304c1f-c3f0-43fc-9d73-a8d6ad98926b" name="End" type="End"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><loginhibit /><display x="-60" y="30" /><outputs><output type="collection" name="Output Collection" narrative="The collection converted from CSV" stage="Output Collection" /></outputs></stage><stage stageid="a04b094f-b7c5-4143-a738-23d3cb123fbf" name="Output Collection" type="Collection"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><loginhibit /><display x="-240" y="-30" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="e5a32658-f2aa-487f-9520-fbe3ad1d6561" name="First Row Is Header" type="Data"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><loginhibit /><display x="-240" y="0" w="120" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="068c2eb9-29cc-4798-8c12-6229866675b4" name="Schema" type="Collection"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><narrative>The columns must appear in the same order as they appear in the CSV file</narrative><display x="-240" y="30" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Column Name" type="text" /></collectioninfo></stage><stage stageid="e9ffc61e-59d9-4936-a2ac-ea0e7afa1518" name="Parse Delimited String" type="Code"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><loginhibit /><display x="-60" y="-45" w="120" h="60" /><inputs><input type="text" name="DelimitedText" expr="[Delimited Text]" /><input type="collection" name="Schema" expr="[Schema]" /><input type="flag" name="FirstRowIsHeader" expr="[First Row Is Header]" /><input type="text" name="Delimiter" expr="[Delimiter Character]" /></inputs><outputs><output type="collection" name="outputCollection" stage="Output Collection" /></outputs><onsuccess>1a304c1f-c3f0-43fc-9d73-a8d6ad98926b</onsuccess><code><![CDATA[Const SchemaColumnName As String = "Column Name"
Const DefaultColumnName As String = "Column "
Const nonSchemaHeadingIndex As Integer = 0

Dim emptySchema As Boolean = Schema Is Nothing OrElse Schema.Rows.Count = 0

Dim csvValuesList = ParseCsvToList(DelimitedText, Delimiter)

' If we want to parse with no schema and want the first row be used as headings 
' we need to know what the headings will be.
Dim nonSchemaHeadings = csvValuesList(nonSchemaHeadingIndex)

' Arrange the column headings into the table first.
If emptySchema Then
	For Each columnHeader As String In nonSchemaHeadings
		Dim colName As String = If(FirstRowIsHeader, columnHeader,
											 DefaultColumnName & outputCollection.Columns.Count)
		outputCollection.Columns.Add(colName, GetType(String))
	Next
Else
	For Each columnHeader As DataRow In Schema.Rows
		Dim colName As String = columnHeader(SchemaColumnName).ToString
		outputCollection.Columns.Add(colName, GetType(String))
	Next
End If

' If the first row is being used for headings then skip those headings / values in csvValuesList.
Dim startListIndex As Integer = If(FirstRowIsHeader, nonSchemaHeadingIndex + 1, nonSchemaHeadingIndex)

' Insert the csv values into the table row by row.
For i As Integer = startListIndex To csvValuesList.Count - 1
	Dim currentRow As Datarow = outputCollection.NewRow
	outputCollection.Rows.Add(currentRow)

	Dim csvArray = csvValuesList(i)
	For columnIndex As Integer = 0 To csvArray.Length - 1
		currentRow.Item(columnIndex) = csvArray(columnIndex)
	Next
Next]]></code></stage><stage stageid="53421100-ece2-4711-bfa9-afeeffad4baf" name="Delimiter Character" type="Data"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><display x="-240" y="60" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0cf95689-6df0-4e1c-a167-4cc146a2c016" name="Input Data Items" type="Block"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><loginhibit /><display x="-315" y="-60" w="150" h="150" /><font family="Segoe UI" size="10" style="Regular" color="FFCC00" /></stage><stage stageid="776cb146-9f13-4f86-99c1-6eed378a8f28" name="Output Data Items" type="Block"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><loginhibit /><display x="-315" y="105" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="800000" /></stage><stage stageid="fe70d981-5190-4495-a46c-fc979a57b76b" name="Delimited Text" type="Data"><subsheetid>b30fe729-3663-4fd9-b97a-505752b1e33f</subsheetid><display x="-240" y="135" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="71b888d4-11ad-46d2-ad4e-fba499f6cab1" name="Start" type="Start"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="-30" y="-135" /><inputs><input type="text" name="CSV" narrative="The CSV to be converted into a collection" stage="CSV" /><input type="flag" name="First Row Is Header" narrative="Indicates whether the first row of the CSV file should be treated as headers" stage="First Row Is Header" /><input type="collection" name="Schema" narrative="Optional. A collection of column names. If left blank the column names will be taken from the first row. " stage="Schema" /></inputs><onsuccess>d57edb5e-14a5-441c-9c36-cccd9d53e9e8</onsuccess></stage><stage stageid="ad1bb716-336e-4089-9c65-9459b70b494b" name="End" type="End"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="-30" y="15" /><outputs><output type="collection" name="Output Collection" narrative="The collection converted from CSV" stage="Output Collection" /></outputs></stage><stage stageid="b666475d-1b3c-4983-ad7c-38413df6ad58" name="CSV" type="Data"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="-195" y="-15" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5d236cf6-5519-4fb4-a438-8cbf13c17669" name="Output Collection" type="Collection"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="-195" y="120" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="3dfd39ce-9b05-4260-b1b6-055ab6c40716" name="First Row Is Header" type="Data"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="-195" y="15" w="120" h="30" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="c5fe44d4-2102-4105-b452-9727d21c254f" name="Schema" type="Collection"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><narrative>The columns must appear in the same order as they appear in the CSV file</narrative><display x="-195" y="45" w="120" h="30" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Column Name" type="text" /></collectioninfo></stage><stage stageid="d57edb5e-14a5-441c-9c36-cccd9d53e9e8" name="Get Delimited Text As Collection" type="SubSheet"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="-30" y="-60" w="90" h="60" /><inputs><input type="flag" name="First Row Is Header" friendlyname="First Row Is Header" narrative="Indicates whether the first row of the CSV file should be treated as headers" expr="[First Row Is Header]" /><input type="collection" name="Schema" friendlyname="Schema" narrative="Optional. A collection of column names. If left blank the column names will be taken from the first row. " expr="[Schema]" /><input type="text" name="Delimiter Character" friendlyname="Delimiter Character" narrative="The character used for delimiting fields in the string" expr="&quot;,&quot;" /><input type="text" name="Delimited Text" friendlyname="Delimited Text" narrative="The delimited text to be converted into a collection" expr="[CSV]" /></inputs><outputs><output type="collection" name="Output Collection" friendlyname="Output Collection" narrative="The collection converted from CSV" stage="Output Collection" /></outputs><onsuccess>ad1bb716-336e-4089-9c65-9459b70b494b</onsuccess><processid>b30fe729-3663-4fd9-b97a-505752b1e33f</processid></stage><stage stageid="5b594ddf-1941-4657-a34a-2bab652e2f21" name="Input Data Items" type="Block"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="-270" y="-45" w="150" h="120" /><font family="Segoe UI" size="10" style="Regular" color="FFCC00" /></stage><stage stageid="15a87913-2a1d-4d77-ab02-550d80a81f30" name="Output Data Items" type="Block"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="-270" y="90" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="800000" /></stage><stage stageid="9ffb8a8f-cd64-4b57-b80c-e9fea69ce920" name="Note2" type="Note"><narrative>‘The MIT License’

© 2020 Blue Prism Limited

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
</narrative><display x="240" y="0" w="300" h="270" /><font family="Segoe UI" size="10" style="Regular" color="0000FF" /></stage><stage stageid="1c60e3fa-014e-4fae-a0ea-93947f6d427f" name="Replace Characters" type="SubSheetInfo"><subsheetid>052cf5ee-03af-4a55-b198-6caa90b8c5ed</subsheetid><narrative>Replaces the specified existing characters in the text with the new characetrs.</narrative><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="45580f5a-07b0-486d-91ab-d186c0c9fa27" name="Start" type="Start"><subsheetid>052cf5ee-03af-4a55-b198-6caa90b8c5ed</subsheetid><loginhibit /><display x="15" y="-105" /><inputs><input type="text" name="Text Sample" narrative="The piece of text to be operated on" stage="Text Sample" /><input type="text" name="Characters to Replace" narrative="A string of characters to be replaced in the Text Sample" stage="Characters to Replace" /><input type="text" name="Replacement Characters" narrative="The new characters to add to the Text Sample in place the original characters." stage="Replacement Characters" /></inputs><onsuccess>b2559855-53c1-4d69-896c-b181d4b35c9a</onsuccess></stage><stage stageid="7def3868-a40b-4dda-8817-cd2d1e491957" name="End" type="End"><subsheetid>052cf5ee-03af-4a55-b198-6caa90b8c5ed</subsheetid><loginhibit /><display x="15" y="90" /><outputs><output type="text" name="Amended Sample" narrative="The amended sample, with the characters replaced" stage="Amended Sample" /></outputs></stage><stage stageid="86751a91-07a2-41b7-b4c8-fed2fa2fa2de" name="Text Sample" type="Data"><subsheetid>052cf5ee-03af-4a55-b198-6caa90b8c5ed</subsheetid><display x="-195" y="-30" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7241ca56-c2de-415d-893b-85ee41a8c112" name="Characters to Replace" type="Data"><subsheetid>052cf5ee-03af-4a55-b198-6caa90b8c5ed</subsheetid><display x="-195" y="0" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b2559855-53c1-4d69-896c-b181d4b35c9a" name="Replace" type="Code"><subsheetid>052cf5ee-03af-4a55-b198-6caa90b8c5ed</subsheetid><loginhibit /><display x="15" y="-15" /><inputs><input type="text" name="Text Sample" expr="[Text Sample]" /><input type="text" name="Characters to Replace" expr="[Characters to Replace]" /><input type="text" name="Replacement Characters" expr="[Replacement Characters]" /></inputs><outputs><output type="text" name="Amended Sample" stage="Amended Sample" /></outputs><onsuccess>7def3868-a40b-4dda-8817-cd2d1e491957</onsuccess><code><![CDATA[For Each C as Char in Characters_To_Replace.ToCharArray()
	Text_Sample = Text_Sample.Replace(C, Replacement_Characters)
Next

Amended_Sample = Text_Sample]]></code></stage><stage stageid="1d83c1a6-688b-4ebb-bfcd-41f050ea7072" name="Amended Sample" type="Data"><subsheetid>052cf5ee-03af-4a55-b198-6caa90b8c5ed</subsheetid><display x="-195" y="90" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c8ef4699-c724-47ab-bb80-c1aa55f260a8" name="Replacement Characters" type="Data"><subsheetid>052cf5ee-03af-4a55-b198-6caa90b8c5ed</subsheetid><display x="-195" y="30" w="120" h="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage></process></object>
        <work-queue id="2" name="CompanysWithoutRequest" key-field="Company ID" xmlns="http://www.blueprism.co.uk/product/work-queue" />
        <work-queue id="3" name="PotentialCompanys" key-field="Company ID" xmlns="http://www.blueprism.co.uk/product/work-queue" />
        <process-group id="647fe008-0147-4b5d-a4c8-2b8223f75ad2" name="Default" isDefaultGroup="True" xmlns="http://www.blueprism.co.uk/product/process-group">
            <members>
                <process id="9034042e-7131-4a79-946d-d9e79127d946" />
                <process id="e6c0a04c-3ddf-4119-b065-a3e1781caeff" />
                <process id="9bf22891-0c3c-4b2e-9e1b-5b135ccc57b7" />
                <process id="dd2807f6-9126-4428-8363-0f77b2a1ad6c" />
            </members>
        </process-group>
        <object-group id="7dfabad4-c716-47dc-a063-8345cc49f8dd" name="Default" isDefaultGroup="True" xmlns="http://www.blueprism.co.uk/product/object-group">
            <members>
                <object id="b953edbf-b0e0-4d4c-9ee5-d723397f9e45" />
                <object id="b99d5b9f-f5b7-45a4-b7b2-17a2cce2ac4c" />
                <object id="3feba356-3bae-4dbb-a887-cae9b90a7922" />
                <object id="e559fb86-9b63-4e0b-9399-972227189995" />
                <object id="6f9680f1-616c-4884-b58c-42ed51446377" />
                <object id="3a5f7760-1621-4a03-bd1e-c7477b5a6de4" />
                <object id="1b13f5b8-01d1-441e-bd7f-54884a24d71f" />
            </members>
        </object-group>
    </bpr:contents>
</bpr:release>